{"version":3,"sources":["components/city/useData.js","components/city/AxisBottom.js","components/city/AxisLeft.js","components/city/Marks.js","components/city/ColorLegend.js","components/city/city.js","components/sliderTraffic.js","components/routeMap.js","components/sliderCovid.js","components/covid-19.jsx","components/airQuality.js","components/streamgraph/Marks.js","components/streamgraph/main.js","components/streamgraph/useData.js","components/Barchart/Marks.js","components/Barchart/main.js","components/Barchart/useData.js","components/lineChart/main.js","index.js"],"names":["InnerList","AxisBottom","xScale","innerHeight","tickFormat","tickOffset","ticks","map","tickValue","className","key","transform","y2","style","textAnchor","dy","y","AxisLeft","yScale","innerWidth","x2","x","Marks","data","xValue","colorScale","yValue","year","colorValue","tooltipFormat","circleRadius","callback","margin","currentData","console","log","results","Object","getOwnPropertyNames","forEach","d","push","city","dataAt","c1","d3","selectAll","join","attr","transition","duration","parseFloat","Math","random","left","top","Area","end","then","result","ColorLegend","tickSpacing","tickSize","tickTextOffset","onHover","hoveredValue","fadeOpacity","domain","domainValue","i","fill","width","height","right","bottom","siFormat","format","xAxisTickFormat","replace","City","useState","setData","useEffect","l","index","n","undefined","happy","indexOf","toString","worth","useData","setYear","scaleLinear","range","scaleOrdinal","id","species","document","getElementById","innerHTML","Container","Styletron","styled","position","display","justifyContent","alignItems","zIndex","ThumbValue","color","TickBar","maxWidth","sliderTraffic","props","state","isPlaying","_renderThumbValue","bind","_animate","_toggle","_animationFrame","cancelAnimationFrame","this","setState","min","max","value","newValue","onChange","requestAnimationFrame","$thumbIndex","$value","Color","formatLabel","error","errorInfo","isButtonEnabled","hasError","shape","SHAPE","round","size","SIZE","compact","disabled","onClick","title","overrides","PureComponent","SelectContainer","SelectContainer2","engine","depData","depCenter","desCenter","desData","depPolygon","desPolygon","colorTable","ambientLight","AmbientLight","intensity","pointLight","PointLight","DEFAULT_THEME","buildingColor","trailColor0","trailColor1","material","ambient","diffuse","shininess","specularColor","effects","LightingEffect","INITIAL_VIEW_STATE","longitude","latitude","zoom","pitch","bearing","colorRange","Routes","Rad","PI","getStep","step","trip","newTrip","getRoute","time","Promise","resolve","count","routeData","sumMax","tmp","split","parseInt","out","in","pre","sum","countD","path","length","m","lng1","lat1","lng2","lat2","radLat1","radLat2","a","b","s","asin","sqrt","pow","sin","cos","getDistance","newRoutes","tmpTime","preIndex","timestamps","t","tmpStep","traffic","od","predict_origin","Map","predict_des","realOrg","realDes","blockRoute","blockData","setPredictData","hour","get","centroid","setRealData","tmpIcon","RouteMap","depV","desV","area","options","block","pre_org","pre_des","real_org","real","showPredict","blockIcon","re","match","tmpData","contour","number","sumlong","sumlat","Date","DepTime","getHours","has","set","Origin","Trips","Destination","da","h","getMinutes","getSeconds","depObject","depX","depY","pointerEvents","desObject","desX","desY","trailLength","theme","ScatterplotLayer","pickable","opacity","stroked","filled","radiusScale","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","getPosition","coordinates","getRadius","getFillColor","getLineColor","visible","TripsLayer","getPath","getTimestamps","getColor","widthMinPixels","rounded","currentTime","shadowEnabled","Route","showRoute","PolygonLayer","wireframe","getPolygon","getLineWidth","info","object","ColumnLayer","_getPredictData","diskResolution","radius","extruded","elevationScale","k","toFixed","getElevation","transitions","enter","updateTriggers","floor","viewState","mapStyle","layers","_renderLayers","initialViewState","controller","reuseMaps","preventStyleDiffing","mapboxApiAccessToken","_renderTooltipDep","_renderTooltipDes","LightTheme","_formatLabel","nowTime","label","placeholder","mini","params","option","Component","sliderCovid","newCount","date","setDate","getDate","getMonth","tmpstr","getFullYear","MAP_VIEW","MapView","farZMultiplier","flag","dateMap","Covid","DataFilterExtension","filterSize","pointData","days","dayCount","HeatmapLayer","coordinate","getWeight","radiusPixels","views","p","date_confirmation","pointLight1","pointLight2","lightingEffect","qualityMap","AirQuality","measurements","parameter","clearable","parems","keys","start","svg","stack","offset","order","y0","y1","curve","slice","stacked","series","r","StreamG","setKey","tmpK","timestamp","entries","tmpD","values","light","setStart","rectData","append","g2","groupCount","testData","update","popNum","unshift","pop","g4","filter","p1","g5","text","node","getTime","BarG","countrylist","yAxisGenerator","xdomain","xAxisGenerator","covidMap","dateKey","lineData","lineGenerator","App","day","linedata","c","country","g","gx","call","scale","newData","ease","window","ReactDOM","render","exact"],"mappings":"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","file":"static/js/main.cf200edd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nconst InnerList=['Camden',\r\n    'Greenwich',\r\n    'Hackney',\r\n    'Hammersmith and Fulham',\r\n    'Islington',\r\n    'Kensington and Chelsea',\r\n    'Lambeth',\r\n    'Lewisham',\r\n    'Southwark',\r\n    'Tower Hamlets',\r\n    'Wandsworth',\r\n    'Westminster']\r\n\r\nexport const useData = () => {\r\n    const [data, setData] = useState(null);\r\n    useEffect(() => {\r\n        console.log('1');\r\n        d3.csv('./happy.csv').then(d=>{\r\n            let data={};\r\n            d.map((l,index)=>{\r\n                //l 结构：\r\n                // Code: \"E09000001\"\r\n                // Area: \"City of London\"\r\n                // 2011/12: \"x\"\r\n                // 2012/13: \"x\"\r\n                // 2013/14: \"x\"\r\n                // 2014/15: \"x\"\r\n                // 2015/16: \"x\"\r\n                // 2016/17: \"x\"\r\n                let pro=Object.getOwnPropertyNames(l);\r\n                // console.log(l);\r\n                pro.map((n,index)=>{\r\n                    if(index>1){\r\n                        if(data[n]===undefined){\r\n                            data[n]={}\r\n                        }\r\n                        if(data[n][l['Area']]===undefined){\r\n                            data[n][l['Area']]={};\r\n                        }\r\n                        data[n][l['Area']].happy=l[n];\r\n                        if(InnerList.indexOf(l['Area'].toString())>=0){\r\n                            console.log('innner')\r\n                            data[n][l['Area']].Area='InnerLondon'\r\n                        }\r\n                        else data[n][l['Area']].Area='OuterLondon'\r\n                    }\r\n\r\n                })\r\n                // l.map((t,i)=>{\r\n                //     if(i>1){\r\n                //         if(data[i]===undefined){\r\n                //             data[i]=[]\r\n                //         }\r\n                //         // data[i].happy=\r\n                //         console.log(Object.getOwnPropertyNames(t))\r\n                //     }\r\n                //\r\n                // })\r\n            })\r\n            // hpData=d;\r\n            // console.log('data:',data);\r\n            d3.csv('./worthwhile.csv').then(d=>{\r\n                d.map((l,index)=>{\r\n                    let pro=Object.getOwnPropertyNames(l);\r\n                    pro.map((n,index)=>{\r\n                        if(index>1){\r\n                            if(data[n]===undefined){\r\n                                data[n]={}\r\n                            }\r\n                            if(data[n][l['Area']]===undefined){\r\n                                data[n][l['Area']]={};\r\n                            }\r\n                            data[n][l['Area']].worth=l[n];\r\n                        }\r\n                    })\r\n                })\r\n                setData(data)\r\n            });\r\n        })\r\n    },[]);//这里加这个[],可以让这个useEffect只执行一次\r\n\r\n    return data;\r\n};\r\n","import React from 'react';\r\nexport const AxisBottom = ({ xScale, innerHeight, tickFormat, tickOffset = 3 }) =>\r\n    xScale.ticks().map(tickValue => (\r\n\r\n        <g\r\n            className=\"tick\"\r\n            key={tickValue}\r\n            transform={`translate(${xScale(tickValue)},0)`}\r\n        >\r\n            <line y2={innerHeight} />\r\n            <text style={{ textAnchor: 'middle' }} dy=\".71em\" y={innerHeight + tickOffset}>\r\n                {tickFormat(tickValue)}\r\n            </text>\r\n        </g>\r\n    ));\r\n","import React from 'react';\r\nexport const AxisLeft = ({ yScale, innerWidth, tickOffset = 3 }) =>\r\n    yScale.ticks().map(tickValue => (\r\n        <g className=\"tick\" transform={`translate(0,${yScale(tickValue)})`}>\r\n            <line x2={innerWidth} />\r\n            <text\r\n                key={tickValue}\r\n                style={{ textAnchor: 'end' }}\r\n                x={-tickOffset}\r\n                dy=\".32em\"\r\n            >\r\n                {tickValue}\r\n            </text>\r\n        </g>\r\n    ));\r\n","import React from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\n\r\nexport const Marks = ({\r\n                          data,\r\n                          xScale,\r\n                          xValue,\r\n                          yScale,\r\n                          yValue,\r\n                          colorScale,\r\n                          colorValue,\r\n                          tooltipFormat,\r\n                          circleRadius,\r\n                          year,\r\n                          callback,\r\n                          margin\r\n                      }) =>{\r\n    function dataAt(year){\r\n        console.log('data:',data);\r\n        let results=[];\r\n        let pro=Object.getOwnPropertyNames(data[year]);\r\n        pro.forEach(d=>{\r\n            results.push({\r\n                city:d,\r\n                data:data[year][d],\r\n            })\r\n        })\r\n        return results\r\n    }\r\n\r\n    if(year&&data){\r\n        let currentData=dataAt(year+'/'+(year-2000+1));\r\n        let svg=d3.select('svg');\r\n        let c1=svg.selectAll(\"circle\")\r\n            .data(currentData,d=>d['city'])\r\n        console.log('enter',c1)\r\n        let c=c1\r\n            .join('circle')\r\n            .attr(\"stroke\", \"black\")\r\n\r\n            .transition()\r\n            // .on('end',function repeat(){\r\n            //     console.log('end')\r\n            // })\r\n            .duration(1000)\r\n            .attr(\"r\", d =>{\r\n                if(!(parseFloat(d.data['happy'])&&parseFloat(d.data['worth']))) return 0;\r\n                else return Math.random()*10\r\n            })\r\n            .attr(\"cx\", d => {if(parseFloat(d.data['happy'])){\r\n                // console.log(d.data['happy'])\r\n                return xScale(d.data['happy'])+margin.left\r\n            }})\r\n            .attr(\"cy\", d => {if(d.data['worth']){\r\n                return yScale(d.data['worth'])+margin.top\r\n            }\r\n            })\r\n            .attr(\"fill\", d =>{\r\n                // console.log('d',d);\r\n                //  console.log('Area',d.data.Area)\r\n                return colorScale(d.data.Area)\r\n            } )\r\n            .end();\r\n        c.then(result=>{\r\n            // if(year<2016){\r\n            //     setYear(year+1)\r\n            //     // updateCircle()\r\n            // }\r\n            // else {\r\n            //     setYear(2011)\r\n            //     // console.log('year:',year)\r\n            //     // year=2011;\r\n            //     // updateCircle()\r\n            // }\r\n            callback();\r\n            console.log('done')\r\n        })\r\n    }\r\n    return null\r\n}\r\n    // data.map(d => (\r\n    //     <circle\r\n    //         className=\"mark\"\r\n    //         cx={xScale(xValue(d))}\r\n    //         cy={yScale(yValue(d))}\r\n    //         fill={colorScale(colorValue(d))}\r\n    //         r={circleRadius}\r\n    //     >\r\n    //         <title>{tooltipFormat(xValue(d))}</title>\r\n    //     </circle>\r\n    // ));\r\n","import React from 'react';\r\nexport const ColorLegend = ({\r\n    colorScale,\r\n    tickSpacing = 20,\r\n    tickSize = 10,\r\n    tickTextOffset = 20,\r\n    onHover,\r\n    hoveredValue,\r\n    fadeOpacity\r\n}) =>\r\n    colorScale.domain().map((domainValue, i) => (\r\n        <g\r\n            className=\"tick\"\r\n            transform={`translate(0,${i * tickSpacing})`}\r\n            // onMouseEnter={() => {\r\n            //     onHover(domainValue);\r\n            // }}\r\n            // onMouseOut={() => {\r\n            //     onHover(null);\r\n            // }}\r\n            // opacity={hoveredValue && domainValue !== hoveredValue ? fadeOpacity : 1}\r\n        >\r\n            <rect fill={colorScale(domainValue)} width=\"10\" height=\"10\" y={-5} />\r\n            <text x={tickTextOffset} dy=\".32em\">\r\n                {domainValue}\r\n            </text>\r\n        </g>\r\n    ));\r\n","import React, { useState, useCallback, useEffect,Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { csv, scaleLinear, scaleOrdinal, max, format, extent } from 'd3';\r\nimport { useData } from './useData';\r\nimport { AxisBottom } from './AxisBottom';\r\nimport { AxisLeft } from './AxisLeft';\r\nimport { Marks } from './Marks';\r\nimport { ColorLegend } from './ColorLegend';\r\nimport * as d3 from 'd3'\r\nimport './city.css'\r\nconst width = 960;\r\nconst height = 500;\r\nconst margin = { top: 20, right: 200, bottom: 65, left: 90 };\r\nconst xAxisLabelOffset = 50;\r\nconst yAxisLabelOffset = 45;\r\nconst innerHeight = height - margin.top - margin.bottom;\r\nconst innerWidth = width - margin.left - margin.right;\r\nconst xAxisLabel = 'Satisfaction';\r\nconst yAxisLabel = 'Worthwhile';\r\nconst colorLegendLabel = 'Area';\r\nconst siFormat = format('.2s');\r\nconst xAxisTickFormat = tickValue => siFormat(tickValue).replace('G', 'B');\r\nlet tmp=[];\r\nfunction getData() {\r\n\r\n    return new Promise(resolve => {\r\n        d3.csv('./happy.csv').then(d=>{\r\n            d.map((l,index)=>{\r\n                let pro=Object.getOwnPropertyNames(l);\r\n                // console.log(l['Area']);\r\n                pro.map((n,index)=>{\r\n                    if(index>1){\r\n                        if(tmp[n]===undefined){\r\n                            tmp[n]={}\r\n                        }\r\n                        if(tmp[n][l['Area']]===undefined){\r\n                            tmp[n][l['Area']]={};\r\n                        }\r\n                        tmp[n][l['Area']].happy=l[n];\r\n                    }\r\n                })\r\n                // l.map((t,i)=>{\r\n                //     if(i>1){\r\n                //         if(data[i]===undefined){\r\n                //             data[i]=[]\r\n                //         }\r\n                //         // data[i].happy=\r\n                //         console.log(Object.getOwnPropertyNames(t))\r\n                //     }\r\n                //\r\n                // })\r\n            })\r\n\r\n\r\n            d3.csv('./worthwhile.csv').then(d=>{\r\n                d.map((l,index)=>{\r\n                    let pro=Object.getOwnPropertyNames(l);\r\n                    pro.map((n,index)=>{\r\n                        if(index>1){\r\n                            if(tmp[n]===undefined){\r\n                                tmp[n]={}\r\n                            }\r\n                            if(tmp[n][l['Area']]===undefined){\r\n                                tmp[n][l['Area']]={};\r\n                            }\r\n                            tmp[n][l['Area']].worth=l[n];\r\n                        }\r\n                    })\r\n                })\r\n                console.log('data:',tmp)\r\n                resolve();\r\n            });\r\n\r\n        });\r\n    })\r\n\r\n\r\n}\r\n\r\nexport function City() {\r\n\r\n    // const [data, setData] = useState(null);\r\n    const data=useData();\r\n    // console.log('dataini:',data);\r\n    const [year,setYear]=useState(2011);\r\n    // useEffect(function init(){\r\n    //     console.log('start');\r\n    //     console.log('data2:',data);\r\n    //     if(data['2011/12']){\r\n    //         console.log('in');\r\n    //         let svg=d3.select('svg');\r\n    //         // console.log(svg);\r\n    //         let k=dataAt('2011/12');\r\n    //         console.log('k',k)\r\n    //         //这里并不能马上赋值成功，hook调用时异步的\r\n    //         // setCurrentData(k);\r\n    //         // console.log('currentData',currentData);\r\n    //         svg.selectAll('circle')\r\n    //             .data(k,d=>['city'])\r\n    //             .join('circle')\r\n    //             .attr(\"stroke\", \"black\")\r\n    //             .attr(\"r\", d =>{\r\n    //                 if(!(parseFloat(d.data['happy'])&&parseFloat(d.data['worth']))) return 0;\r\n    //                 else return 5\r\n    //             })\r\n    //             .attr(\"cx\", d => {if(parseFloat(d.data['happy'])){\r\n    //                 console.log(d.data['happy'])\r\n    //                 return xScale(d.data['happy'])\r\n    //             }})\r\n    //             .attr(\"cy\", d => {if(d.data['worth']){\r\n    //                 return yScale(d.data['worth'])\r\n    //             }\r\n    //             })\r\n    //             .attr(\"fill\", d => 'blue');\r\n    //         setYear(2012)\r\n    //         console.log(year)\r\n    //     }\r\n    // },[data]);\r\n    // useEffect(function update() {\r\n    //\r\n    //         if(year){\r\n    //             let currentData=dataAt(year+'/'+(year-2000+1));\r\n    //             let svg=d3.select('svg');\r\n    //             let c=svg.selectAll(\"circle\")\r\n    //                 .data(currentData,d=>d['city'])\r\n    //                 .join('circle')\r\n    //                 .attr(\"stroke\", \"black\")\r\n    //                 .attr(\"r\", d =>{\r\n    //                     if(!(parseFloat(d.data['happy'])&&parseFloat(d.data['worth']))) return 0;\r\n    //                     else return 5\r\n    //                 })\r\n    //                 .transition()\r\n    //                 // .on('end',function repeat(){\r\n    //                 //     console.log('end')\r\n    //                 // })\r\n    //                 .duration(1000)\r\n    //                 .attr(\"cx\", d => {if(parseFloat(d.data['happy'])){\r\n    //                     // console.log(d.data['happy'])\r\n    //                     return xScale(d.data['happy'])\r\n    //                 }})\r\n    //                 .attr(\"cy\", d => {if(d.data['worth']){\r\n    //                     return yScale(d.data['worth'])\r\n    //                 }\r\n    //                 })\r\n    //                 .attr(\"fill\", d => 'blue')\r\n    //                 .end();\r\n    //             c.then(result=>{\r\n    //                 if(year<2016){\r\n    //                     setYear(year+1)\r\n    //                     // updateCircle()\r\n    //                 }\r\n    //                 else {\r\n    //                     setYear(2011)\r\n    //                     // console.log('year:',year)\r\n    //                     // year=2011;\r\n    //                     // updateCircle()\r\n    //                 }\r\n    //                 console.log('done')\r\n    //             })\r\n    //         }\r\n    // },[year])\r\n    // function dataAt(year){\r\n    //     console.log('data:',data)\r\n    //     let results=[];\r\n    //     let pro=Object.getOwnPropertyNames(data[year]);\r\n    //     pro.forEach(d=>{\r\n    //         results.push({\r\n    //             city:d,\r\n    //             data:data[year][d],\r\n    //         })\r\n    //     })\r\n    //     return results\r\n    // }\r\n    // const [hoveredValue, setHoveredValue] = useState(null);\r\n    // if (!data) {\r\n    //     return <pre>Loading...</pre>;\r\n    // }\r\n    const xValue = d => d.data['happy'];\r\n    const yValue = d => d.data['worth'];\r\n    const colorValue = d => d.species;\r\n    const circleRadius = 7;\r\n\r\n\r\n    const xScale = scaleLinear()\r\n        // .domain(extent(data, xValue))\r\n        .domain([6.8,8.5])\r\n        .range([0, innerWidth])\r\n\r\n    const yScale = scaleLinear()\r\n        // .domain(extent(data, yValue))\r\n        .domain([8.5,6.8])\r\n        .range([0, innerHeight]);\r\n\r\n    const colorScale = scaleOrdinal()\r\n        .domain(['InnerLondon','OuterLondon'])\r\n        .range(['#E6842A', '#137B80']);\r\n\r\n    return (\r\n        <Fragment>\r\n            <b >time:<span id=\"Time\"></span>\r\n            </b>\r\n            <svg width={width} height={height}>\r\n                <g transform={`translate(${margin.left},${margin.top})`}>\r\n                    <AxisBottom\r\n                        xScale={xScale}\r\n                        innerHeight={innerHeight}\r\n                        tickFormat={xAxisTickFormat}\r\n                        tickOffset={5}\r\n                    />\r\n                    <text\r\n                        className=\"axis-label\"\r\n                        textAnchor=\"middle\"\r\n                        transform={`translate(${-yAxisLabelOffset},${innerHeight /\r\n                        2}) rotate(-90)`}\r\n                    >\r\n                        {yAxisLabel}\r\n                    </text>\r\n                    <AxisLeft yScale={yScale} innerWidth={innerWidth} tickOffset={5} />\r\n                    <text\r\n                        className=\"axis-label\"\r\n                        x={innerWidth / 2}\r\n                        y={innerHeight + xAxisLabelOffset}\r\n                        textAnchor=\"middle\"\r\n                    >\r\n                        {xAxisLabel}\r\n                    </text>\r\n                    <g transform={`translate(${innerWidth + 60}, 60)`}>\r\n                        <text x={35} y={-25} className=\"axis-label\" textAnchor=\"middle\">\r\n                            {colorLegendLabel}\r\n                        </text>\r\n                        <ColorLegend\r\n                            tickSpacing={22}\r\n                            tickSize={10}\r\n                            tickTextOffset={12}\r\n                            tickSize={circleRadius}\r\n                            colorScale={colorScale}\r\n                            // onHover={setHoveredValue}\r\n                            // hoveredValue={hoveredValue}\r\n                            // fadeOpacity={fadeOpacity}\r\n                        />\r\n                    </g>\r\n                    <g >\r\n                        <Marks\r\n                            data={data}//参数变了，组件就会自动刷新\r\n                            xScale={xScale}\r\n                            xValue={xValue}\r\n                            yScale={yScale}\r\n                            yValue={yValue}\r\n                            colorScale={colorScale}\r\n                            colorValue={colorValue}\r\n                            tooltipFormat={xAxisTickFormat}\r\n                            circleRadius={circleRadius}\r\n                            year={year}\r\n                            margin={margin}\r\n                            callback={()=>{\r\n                                if(year<2016){\r\n                                    setYear(year+1)\r\n                                }\r\n                                else{\r\n                                    setYear(2011)\r\n                                }\r\n                                document.getElementById('Time').innerHTML=year+'/'+(year-2000+1)\r\n\r\n                            }}\r\n                        />\r\n                    </g>\r\n                </g>\r\n            </svg>\r\n\r\n        </Fragment>\r\n\r\n    );\r\n};\r\n","/* global requestAnimationFrame, cancelAnimationFrame */\r\nimport React, {PureComponent} from 'react';\r\nimport {Client as Styletron} from 'styletron-engine-atomic';\r\nimport {Provider as StyletronProvider} from 'styletron-react';\r\nimport {LightTheme, BaseProvider, styled} from 'baseui';\r\nimport {Slider} from 'baseui/slider';\r\nimport {Button, SHAPE, SIZE} from 'baseui/button';\r\nimport Start from 'baseui/icon/chevron-right';\r\nimport Stop from 'baseui/icon/delete';\r\nimport { Select } from \"baseui/select\";\r\n\r\nconst engine = new Styletron();\r\n\r\nconst SelectContainer=styled('div',{\r\n    position: 'absolute',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    zIndex: 2,\r\n    top: '10px',\r\n    left:'10px'\r\n});\r\n\r\n\r\nconst Container = styled('div', {\r\n    position: 'absolute',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    zIndex: 1,\r\n    bottom: '20px',\r\n    width: '100%'\r\n});\r\n\r\nconst ThumbValue = styled('div', {\r\n    color: '#00FFFF',\r\n    position: 'absolute',\r\n    top: '-2em'\r\n});\r\n\r\nconst TickBar = styled('div', {\r\n    width: '480px',\r\n    height: '24px',\r\n    maxWidth: '80vw'\r\n});\r\n\r\nconst ANIMATION_SPEED = 10;\r\n\r\nexport default class sliderTraffic extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isPlaying: false\r\n        };\r\n\r\n        this._renderThumbValue = this._renderThumbValue.bind(this);\r\n        this._animate = this._animate.bind(this);\r\n        this._toggle = this._toggle.bind(this);\r\n        this._animationFrame = null;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this._animationFrame);\r\n    }\r\n\r\n    _toggle() {\r\n        cancelAnimationFrame(this._animationFrame);\r\n        const {isPlaying} = this.state;\r\n        if (!isPlaying) {\r\n            this._animate();\r\n        }\r\n        this.setState({isPlaying: !isPlaying});\r\n    }\r\n\r\n    _animate() {\r\n        const {min,max, value} = this.props;\r\n        let newValue=value[1]+ANIMATION_SPEED;\r\n        if(value[1]>max){\r\n            newValue=min;\r\n        }\r\n        this.props.onChange({\r\n            value: [value[0],newValue]\r\n        });\r\n\r\n\r\n        this._animationFrame = requestAnimationFrame(this._animate);\r\n    }\r\n\r\n    _renderThumbValue({$thumbIndex, $value}) {\r\n        //console.log('$thumbIndex:',$thumbIndex);\r\n        if($thumbIndex==1){\r\n            const value = $value[$thumbIndex];\r\n            if(value==3600){\r\n                console.log('thumb==3600')\r\n            }\r\n           // console.log('thumb:',value)\r\n            return <ThumbValue Color={[0,0,0,255]}>{this.props.formatLabel(value)}</ThumbValue>;\r\n        }\r\n        else{\r\n            return <ThumbValue></ThumbValue>\r\n        }\r\n\r\n        // return <ThumbValue>{0}</ThumbValue>;\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // Update state so the next render will show the fallback UI.\r\n        return { hasError: true };\r\n    }\r\n    componentDidCatch(error, errorInfo) {\r\n        // You can also log the error to an error reporting service\r\n        console.log(error, errorInfo);\r\n    }\r\n\r\n\r\n    render() {\r\n        const {value, min, max} = this.props;\r\n        const isButtonEnabled = value[0] > min || value[1] < max;\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return (\r\n\r\n                    <Container>\r\n                        <Button\r\n                            shape={SHAPE.round}\r\n                            size={SIZE.compact}\r\n                            disabled={!isButtonEnabled}\r\n                            onClick={this._toggle}\r\n                        >\r\n                            {this.state.isPlaying ? <Stop title=\"Stop\" /> : <Start title=\"Animate\" />}\r\n                        </Button>\r\n                        <Slider\r\n                            {...this.props}\r\n                            overrides={{\r\n                                ThumbValue: this._renderThumbValue,\r\n                                TickBar: () => <TickBar />\r\n                            }}\r\n                        />\r\n                    </Container>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n","// /// app.js\r\nimport React,{Fragment} from 'react';\r\nimport DeckGL from '@deck.gl/react';\r\nimport {TripsLayer} from '@deck.gl/geo-layers';\r\nimport {StaticMap} from 'react-map-gl';\r\nimport * as d3 from 'd3'\r\n//\r\n// // Set your mapbox access token here\r\n// const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\r\n//\r\n// // Initial viewport settings\r\n// const initialViewState = {\r\n//     longitude: -122.41669,\r\n//     latitude: 37.7853,\r\n//     zoom: 13,\r\n//     pitch: 0,\r\n//     bearing: 0\r\n// };\r\n//\r\n// // Data to be used by the LineLayer\r\n// const data = [   {\r\n//              waypoints: [{coordinates: [-122.3907988, 37.7664413], timestamp: 1554772579000},\r\n//                      {coordinates: [-122.3908298,37.7667706], timestamp: 1554772579010},\r\n//                      {coordinates: [-122.4485672, 37.8040182], timestamp: 1554772580200}\r\n//              ]\r\n//      }];\r\n//\r\n// class App extends React.Component {\r\n//     render() {\r\n//         const layers = [\r\n//             new TripsLayer({id: 'trips-layer', data,\r\n//                 getPath:d => d.waypoints.map(p => p.coordinates),\r\n//                 getTimestamps: d => d.waypoints.map(p => p.timestamp - 1554772579000),\r\n//                 getColor: [253, 128, 93],\r\n//                 opacity: 0.8,\r\n//                 widthMinPixels: 5,\r\n//                 rounded: true,\r\n//                 trailLength: 200,\r\n//                 currentTime: 0\r\n//\r\n//             })\r\n//         ];\r\n//\r\n//         return (\r\n//             <DeckGL\r\n//                 initialViewState={initialViewState}\r\n//                 controller={true}\r\n//                 layers={layers}\r\n//             >\r\n//                 <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\r\n//             </DeckGL>\r\n//         );\r\n//     }\r\n// }\r\n// ReactDOM.render(<App />, document.getElementById('root'));\r\nimport {Component} from 'react';\r\n\r\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\r\nimport {ColumnLayer, PolygonLayer,IconLayer,ScatterplotLayer} from '@deck.gl/layers';\r\n\r\nimport SliderTraffic from \"./sliderTraffic\";\r\nimport { Select,SIZE } from \"baseui/select\";\r\nimport {BaseProvider, LightTheme, styled} from \"baseui\";\r\nimport {Client as Styletron} from 'styletron-engine-atomic';\r\nimport {Provider as StyletronProvider} from 'styletron-react';\r\n\r\nconst SelectContainer=styled('div',{\r\n    position: 'absolute',\r\n    // display: 'flex',\r\n    // justifyContent: 'center',\r\n    // alignItems: 'center',\r\n    zIndex: 1,\r\n    top: '50px',\r\n    right:'10px',\r\n    width:'15%',\r\n    // height:'5%'\r\n});\r\nconst SelectContainer2=styled('div',{\r\n    position: 'absolute',\r\n    // display: 'flex',\r\n    // justifyContent: 'center',\r\n    // alignItems: 'center',\r\n    zIndex: 1,\r\n    top: '50px',\r\n    left:'10px',\r\n    width:'15%',\r\n    // height:'5%'\r\n});\r\nconst engine = new Styletron();\r\n\r\n\r\n// Set your mapbox token here\r\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\r\n\r\nconst DATA_URL =\r\n    'https://raw.githubusercontent.com/uber-web/kepler.gl-data/master/earthquakes/data.csv';\r\n\r\n//加载区域数据\r\nvar depData=[];\r\nvar depCenter=[];\r\n\r\nlet desCenter=[];\r\nlet desData=[];\r\n\r\nlet depPolygon=[];\r\nlet desPolygon=[];\r\n\r\nlet colorTable=[[128,255,0,255],[255,255,40,255],[255,128,0,255],[255,64,64,255],[255,0,0,255]];\r\n\r\n\r\nconst ICON_MAPPING = {\r\n    marker: {x: 0, y: 0, width: 32, height: 32, mask: true}\r\n};\r\n\r\n\r\n\r\n// Source data CSV\r\n// const DATA_URL = {\r\n//     BUILDINGS:\r\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/buildings.json', // eslint-disable-line\r\n//     TRIPS:\r\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/trips-v7.json' // eslint-disable-line\r\n// };\r\n\r\nconst ambientLight = new AmbientLight({\r\n    color: [255, 255, 255],\r\n    intensity: 1.0\r\n});\r\n\r\nconst pointLight = new PointLight({\r\n    color: [255, 255, 255],\r\n    intensity: 2.0,\r\n    position: [120.167057, 30.185901, 8000]\r\n});\r\n\r\nconst lightingEffect = new LightingEffect({ambientLight, pointLight});\r\n\r\nconst material = {\r\n    ambient: 0.1,\r\n    diffuse: 0.9,\r\n    shininess: 64,\r\n    specularColor: [60, 64, 70]\r\n};\r\n\r\nconst DEFAULT_THEME = {\r\n    buildingColor: [74, 80, 87],\r\n    trailColor0: [253, 128, 93],\r\n    trailColor1: [23, 184, 190],\r\n    material,\r\n    effects: [lightingEffect]\r\n};\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n    longitude:  120.207057,\r\n    latitude: 30.225901,\r\n    // longitude:-74.00823,\r\n    // latitude: 40.71351,\r\n    zoom: 11,\r\n    pitch: 45,\r\n    bearing: 0\r\n};\r\n\r\n//柱状图的颜色\r\nconst colorRange = [\r\n    [1, 152, 189],\r\n    [73, 227, 206],\r\n    [216, 254, 181],\r\n    [254, 237, 177],\r\n    [254, 173, 84],\r\n    [209, 55, 78]\r\n];\r\n\r\n\r\n\r\n\r\n// d3.json(\"https://api.openaq.org/v1/latest?limit=10000\").then(data=>{\r\n//     console.log(data)\r\n// })\r\n\r\n\r\nvar Routes=[];\r\nfunction Rad(d){\r\n    return d * Math.PI / 180.0;//经纬度转换成三角函数中度分表形式。\r\n}\r\nvar getDistance=function(lng1,lat1,lng2,lat2){\r\n    var radLat1 = Rad(lat1);\r\n    var radLat2 = Rad(lat2);\r\n    var a = radLat1 - radLat2;\r\n    var  b = Rad(lng1) - Rad(lng2);\r\n    var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a/2),2) +\r\n        Math.cos(radLat1)*Math.cos(radLat2)*Math.pow(Math.sin(b/2),2)));\r\n    s = s *6378.137 ;// EARTH_RADIUS;\r\n    s = Math.round(s * 10000) / 10000; //输出为公里\r\n    //s=s.toFixed(4);\r\n    return s;\r\n}\r\n\r\n// var od=[];\r\n// var getRoutedata=function(start,end) {\r\n//\r\n//     var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[start][0] + ',' + depCenter[start][1] + ';' + desCenter[end][0] + ',' + desCenter[end][1] + '?steps=true&geometries=geojson&access_token=' + 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\r\n//\r\n//     // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\r\n//     var req = new XMLHttpRequest();\r\n//     req.open('GET', url, true);\r\n//     req.send()\r\n//     req.onload = function () {\r\n//         var json = JSON.parse(req.response);\r\n//         // console.log('route:',json)\r\n//         var data = json.routes[0];\r\n//         var route = data.geometry.coordinates;\r\n//         var timestamps=[0];//先设置每条路径1000stamp\r\n//         for(var i=0;i<route.length;i++){\r\n//             if(i!==0){\r\n//                 var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\r\n//                 timestamps.push(dist+timestamps[i-1])\r\n//             }\r\n//         }\r\n//         var geojson = {\r\n//             'path': route,\r\n//             'timestamps':timestamps,\r\n//         };\r\n//         console.log(geojson)\r\n//         Routes.push(geojson)\r\n//\r\n//     }\r\n// }\r\n//getRoutedata([120.167057,30.185901], [120.302548\t,30.399632])\r\n\r\nvar saveJson={}\r\n\r\n// var getRoute=new function(time) {\r\n//     // var gets = [];\r\n//     d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\r\n//\r\n//         let re=/([-+]?[0-9]*\\.?[0-9]+)/g;\r\n//         console.log('data1:',data)\r\n//         data.forEach(d=>{\r\n//             let tmp=d.value.match(re)\r\n//             let tmpData=[];\r\n//             for(let i=0;i<tmp.length-1;i+=2){\r\n//                 tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\r\n//             }\r\n//             depData.push(tmpData)\r\n//         })\r\n//         depData.forEach(d=>{\r\n//             let sumlong=0\r\n//             let sumlat=0;\r\n//             d.forEach(data=>{\r\n//                 sumlong+=data[0];\r\n//                 sumlat+=data[1];\r\n//             })\r\n//             depCenter.push([sumlong/d.length,sumlat/d.length])\r\n//         })\r\n//         d3.csv(\"./edge_des_csv.csv\").then(function (data) {\r\n//             let re=/([-+]?[0-9]*\\.?[0-9]+)/g\r\n//             console.log('data2:',data)\r\n//             data.forEach(d=>{\r\n//                 let tmp=d.value.match(re)\r\n//                 let tmpData=[];\r\n//                 for(let i=0;i<tmp.length-1;i+=2){\r\n//                     tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\r\n//                 }\r\n//                 desData.push(tmpData)\r\n//             })\r\n//             desData.forEach(d=>{\r\n//                 let sumlong=0;\r\n//                 let sumlat=0;\r\n//                 d.forEach(data=>{\r\n//                     sumlong+=data[0];\r\n//                     sumlat+=data[1];\r\n//                 })\r\n//                 desCenter.push([sumlong/d.length,sumlat/d.length])\r\n//             });\r\n//             // d3.json('http://localhost:5000/data/12:00:00').then(function(data){\r\n//             //     data.forEach(d=>{\r\n//             //         var tmp=d.split(',');\r\n//             //         if(tmp[0]!=-1 && tmp[1]!=-1) {\r\n//             //             if(tmp[0]>46&&tmp[0]<=60){\r\n//             //              //   if (tmp[2] !== '0') {\r\n//             //                 var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\r\n//             //                 gets.push($.ajax({\r\n//             //                     type: 'GET',\r\n//             //                     url: urlNow,\r\n//             //                     success: function (r) {\r\n//             //                         console.log('r:', r)\r\n//             //                         //var json = JSON.parse(data);\r\n//             //                         var plan = r.routes[0];\r\n//             //                         var route = plan.geometry.coordinates;\r\n//             //                         var timestamps = [0];//先设置每条路径1000stamp\r\n//             //                         for (var i = 0; i < route.length; i++) {\r\n//             //                             if (i !== 0) {\r\n//             //                                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\r\n//             //                                 timestamps.push(dist + timestamps[i - 1])\r\n//             //                             }\r\n//             //                         }\r\n//             //                         var geojson = {\r\n//             //                             'vendor': 1,\r\n//             //                             'path': route,\r\n//             //                             'timestamps': timestamps,\r\n//             //\r\n//             //                         };\r\n//             //                         console.log(geojson)\r\n//             //                         Routes.push(geojson)\r\n//             //                         saveJson[tmp[0]+','+tmp[1]] = geojson\r\n//             //                     },\r\n//             //                     error:function(){\r\n//             //                         console.log('err')\r\n//             //                     }\r\n//             //                 }));\r\n//             //\r\n//             //            // }\r\n//             //             }\r\n//             //         }\r\n//             //     })\r\n//             //     // url.forEach(function(value) {\r\n//             //     //     console.log('url:',value)\r\n//             //     //     gets.push($.ajax({\r\n//             //     //         type: 'GET',\r\n//             //     //         url: value,\r\n//             //     //         success: function(data) {\r\n//             //     //             console.log('data:',data)\r\n//             //     //             //var json = JSON.parse(data);\r\n//             //     //             var plan = data.routes[0];\r\n//             //     //             var route = plan.geometry.coordinates;\r\n//             //     //             var timestamps=[0];//先设置每条路径1000stamp\r\n//             //     //             for(var i=0;i<route.length;i++){\r\n//             //     //                 if(i!==0){\r\n//             //     //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\r\n//             //     //                     timestamps.push(dist+timestamps[i-1])\r\n//             //     //                 }\r\n//             //     //             }\r\n//             //     //             var geojson = {\r\n//             //     //                 'vendor':1,\r\n//             //     //                 'path': route,\r\n//             //     //                 'timestamps':timestamps,\r\n//             //     //\r\n//             //     //             };\r\n//             //     //             console.log(geojson)\r\n//             //     //             Routes.push(geojson)\r\n//             //     //\r\n//             //     //\r\n//             //     //         }\r\n//             //     //     }));\r\n//             //     // });\r\n//             //\r\n//             //     $.when.apply($, gets).then(function() {\r\n//             //         console.log(saveJson)\r\n//             //         var jsonData=JSON.stringify(saveJson)\r\n//             //         download(jsonData,'route.json','text/plain')\r\n//             //         console.log('Routes:',Routes)\r\n//             //         resolve(Routes);\r\n//             //         // resolve([\r\n//             //         //     {\r\n//             //         //         \"vendor\": 1,\r\n//             //         //         \"path\": [\r\n//             //         //             [120.167057,30.185901],\r\n//             //         //             [120.165752,30.185723],\r\n//             //         //             [120.16581,30.188491],\r\n//             //         //             [120.190417,30.198224],\r\n//             //         //             [120.191971\t,30.204],\r\n//             //         //             [120.189622\t,30.20767],\r\n//             //         //             [120.182369\t,30.218973],\r\n//             //         //             [120.180889\t,30.222601],\r\n//             //         //             [120.200108\t,30.306856],\r\n//             //         //             [120.23477\t,30.311914],\r\n//             //         //             [120.246959\t,30.316748],\r\n//             //         //             [120.309708\t,30.387518],\r\n//             //         //             [120.312426\t,30.39154],\r\n//             //         //             [120.309069\t,30.400897],\r\n//             //         //             [120.302548\t,30.399632],],\r\n//             //         //\r\n//             //         //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\r\n//             //         //     }])\r\n//             //     });\r\n//             // })\r\n//\r\n//             d3.json('http://localhost:5000/data/'+time+':00:00').then(function(data){\r\n//                 var count=0;\r\n//                 d3.json('./10.json').then(function (map) {\r\n//                    // console.log('map:',map)\r\n//                     data.forEach(d=>{\r\n//                         var tmp=d.split(',');\r\n//                         if(tmp[0]!=-1 && tmp[1]!=-1) {\r\n//                             if(parseInt(tmp[2])>=5){\r\n//                                 count++;\r\n//                                 var key=tmp[0]+','+tmp[1];\r\n//                                 console.log(map[key]);\r\n//                                 Routes.push(map[key]);\r\n//                             }\r\n//                             // if(tmp[0]>40&&tmp[0]<=60&&tmp[1]>40&&tmp[1]<=60){\r\n//                                 //   if (tmp[2] !== '0') {\r\n//                                 // var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\r\n//                                 // gets.push($.ajax({\r\n//                                 //     type: 'GET',\r\n//                                 //     url: urlNow,\r\n//                                 //     success: function (r) {\r\n//                                 //         console.log('r:', r)\r\n//                                 //         //var json = JSON.parse(data);\r\n//                                 //         var plan = r.routes[0];\r\n//                                 //         var route = plan.geometry.coordinates;\r\n//                                 //         var timestamps = [0];//先设置每条路径1000stamp\r\n//                                 //         for (var i = 0; i < route.length; i++) {\r\n//                                 //             if (i !== 0) {\r\n//                                 //                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\r\n//                                 //                 timestamps.push(dist + timestamps[i - 1])\r\n//                                 //             }\r\n//                                 //         }\r\n//                                 //         var geojson = {\r\n//                                 //             'vendor': 1,\r\n//                                 //             'path': route,\r\n//                                 //             'timestamps': timestamps,\r\n//                                 //\r\n//                                 //         };\r\n//                                 //         console.log(geojson)\r\n//                                 //         Routes.push(geojson)\r\n//                                 //         saveJson[tmp[0]+','+tmp[1]] = geojson\r\n//                                 //     },\r\n//                                 //     error:function(){\r\n//                                 //         console.log('err')\r\n//                                 //     }\r\n//                                 // }));\r\n//\r\n//                                 // }\r\n//                            // }\r\n//                         }\r\n//                     })\r\n//                     console.log('count:',count)\r\n//                    // console.log(Routes)\r\n//                 })\r\n//                 // url.forEach(function(value) {\r\n//                 //     console.log('url:',value)\r\n//                 //     gets.push($.ajax({\r\n//                 //         type: 'GET',\r\n//                 //         url: value,\r\n//                 //         success: function(data) {\r\n//                 //             console.log('data:',data)\r\n//                 //             //var json = JSON.parse(data);\r\n//                 //             var plan = data.routes[0];\r\n//                 //             var route = plan.geometry.coordinates;\r\n//                 //             var timestamps=[0];//先设置每条路径1000stamp\r\n//                 //             for(var i=0;i<route.length;i++){\r\n//                 //                 if(i!==0){\r\n//                 //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\r\n//                 //                     timestamps.push(dist+timestamps[i-1])\r\n//                 //                 }\r\n//                 //             }\r\n//                 //             var geojson = {\r\n//                 //                 'vendor':1,\r\n//                 //                 'path': route,\r\n//                 //                 'timestamps':timestamps,\r\n//                 //\r\n//                 //             };\r\n//                 //             console.log(geojson)\r\n//                 //             Routes.push(geojson)\r\n//                 //\r\n//                 //\r\n//                 //         }\r\n//                 //     }));\r\n//                 // });\r\n//\r\n//                 // $.when.apply($, gets).then(function() {\r\n//                 //     console.log(saveJson)\r\n//                 //     var jsonData=JSON.stringify(saveJson)\r\n//                 //     download(jsonData,'route.json','text/plain')\r\n//                 //     console.log('Routes:',Routes)\r\n//                 //     resolve(Routes);\r\n//                 //\r\n//                 // });\r\n//             })\r\n//         });\r\n//     });\r\n//\r\n// };\r\n\r\n\r\n\r\n//每条路径按流量加线的数量\r\nlet getStep=function(step,trip){\r\n    let newTrip=[]\r\n    trip.forEach(d=>{\r\n        d+=3600/step;\r\n        newTrip.push(d)\r\n    })\r\n    return newTrip;\r\n}\r\n\r\n\r\nfunction getArea(){\r\n    d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\r\n        let re = /([-+]?[0-9]*\\.?[0-9]+)/g;\r\n        console.log('data1:', data)\r\n        data.forEach((d,index) => {\r\n            let tmp = d.value.match(re)\r\n            let tmpData = [];\r\n            for (let i = 0; i < tmp.length - 1; i += 2) {\r\n                tmpData.push([parseFloat(tmp[i + 1]), parseFloat(tmp[i])])\r\n            }\r\n            depData.push(tmpData)\r\n            depPolygon.push({\r\n                contour:tmpData,\r\n                in:0,\r\n                out:0,\r\n                number:index\r\n            })\r\n        })\r\n        depData.forEach(d => {\r\n            let sumlong = 0\r\n            let sumlat = 0;\r\n            d.forEach(data => {\r\n                sumlong += data[0];\r\n                sumlat += data[1];\r\n            })\r\n            depCenter.push([sumlong / d.length, sumlat / d.length])\r\n        })\r\n        d3.csv(\"./edge_des_csv.csv\").then(function (data) {\r\n            let re = /([-+]?[0-9]*\\.?[0-9]+)/g\r\n            console.log('data2:', data)\r\n            data.forEach((d,index)=> {\r\n                let tmp = d.value.match(re)\r\n                let tmpData = [];\r\n                for (let i = 0; i < tmp.length - 1; i += 2) {\r\n                    tmpData.push([parseFloat(tmp[i + 1]), parseFloat(tmp[i])])\r\n                }\r\n                desData.push(tmpData)\r\n\r\n                desPolygon.push({\r\n                    contour:tmpData,\r\n                    in:0,\r\n                    out:0,\r\n                    number:index\r\n                })\r\n\r\n\r\n            });\r\n            desData.forEach(d => {\r\n                let sumlong = 0;\r\n                let sumlat = 0;\r\n                d.forEach(data => {\r\n                    sumlong += data[0];\r\n                    sumlat += data[1];\r\n                })\r\n                desCenter.push([sumlong / d.length, sumlat / d.length])\r\n            });\r\n        })\r\n})\r\n}\r\n//获取流量数据\r\nfunction getRoute(time) {\r\n    return new Promise(resolve => {\r\n        // var gets = [];\r\n        d3.json('http://localhost:5000/data/'+time).then(function (data) {\r\n            var count = 0;\r\n            d3.json('./10.json').then(function (map) {\r\n                // console.log('map:',map)\r\n                var routeData=[];\r\n                var sumMax=0;\r\n                data.forEach(d => {\r\n                    var tmp = d.split(',');\r\n                    if (tmp[0] != -1 && tmp[1] != -1) {\r\n                        if (parseInt(tmp[2]) >= 2) {\r\n\r\n                            depPolygon[parseInt(tmp[0])].out+=parseInt(tmp[2]);\r\n                            desPolygon[parseInt(tmp[1])].in+=parseInt(tmp[2]);\r\n                            count++;\r\n                            var key = tmp[0] + ',' + tmp[1];\r\n\r\n                            //  console.log(map[key]);\r\n                            var pre=[];\r\n                            var sum=0;\r\n                            var countD=[];\r\n                            map[key].path.forEach(d=>{\r\n                                if(pre.length==0){\r\n                                    pre=d\r\n                                }\r\n                                else{\r\n                                    // console.log('pre:',pre);\r\n                                    var m=getDistance(pre[0],pre[1],d[0],d[1]);\r\n                                    countD.push(m);\r\n                                    sum+=m;\r\n                                    pre=d;\r\n                                }\r\n                            });\r\n                            if(sum>=sumMax){\r\n                                sumMax=sum\r\n                            }\r\n//control color\r\n                            if(parseInt(tmp[2]) >= 2&& parseInt(tmp[2]) < 5){\r\n                                routeData.push({\r\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\r\n                                    'traffic':parseInt(tmp[2]),\r\n                                    \"color\":0,\r\n                                    \"path\":map[key].path,\r\n                                    \"timestamps\":countD\r\n                                })\r\n                                // console.log('path',map[key].path)\r\n                            }\r\n\r\n                            else if(parseInt(tmp[2]) >=5&&parseInt(tmp[2]) <20){\r\n                                routeData.push({\r\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\r\n                                    'traffic':parseInt(tmp[2]),\r\n                                    \"color\":1,\r\n                                    \"path\":map[key].path,\r\n                                    \"timestamps\":countD\r\n                                })\r\n                            }\r\n                            else if(parseInt(tmp[2]) >=20&&parseInt(tmp[2]) <100){\r\n                                routeData.push({\r\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\r\n                                    'traffic':parseInt(tmp[2]),\r\n                                    \"color\":2,\r\n                                    \"path\":map[key].path,\r\n                                    \"timestamps\":countD\r\n                                })\r\n                            }\r\n                            else if(parseInt(tmp[2]) >= 100&&parseInt(tmp[2]) <150){\r\n                                routeData.push({\r\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\r\n                                    'traffic':parseInt(tmp[2]),\r\n                                    \"color\":3,\r\n                                    \"path\":map[key].path,\r\n                                    \"timestamps\":countD\r\n                                })\r\n                            }\r\n                            else if(parseInt(tmp[2]) >= 150){\r\n                                routeData.push({\r\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\r\n                                    'traffic':parseInt(tmp[2]),\r\n                                    \"color\":4,\r\n                                    \"path\":map[key].path,\r\n                                    \"timestamps\":countD\r\n                                })\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n                });\r\n                let newRoutes=[];\r\n                //按照流量多加动画效果\r\n                routeData.forEach(d=>{\r\n                    var tmpTime=[time*3600];\r\n                    let preIndex=0;\r\n                    // console.log('timestamps:',d.timestamps)\r\n                    d.timestamps.forEach(t=>{\r\n                        // console.log('t:',t)\r\n                        tmpTime.push(tmpTime[preIndex]+(3600/sumMax)*t)//加上当前已经过去的小时的时间\r\n                        preIndex++;\r\n                    });\r\n                    d.timestamps=tmpTime;\r\n                    let tmpStep=tmpTime;\r\n                    for(let i=0;i<(d.traffic);i++){\r\n                        tmpStep=getStep((d.traffic),tmpStep);\r\n                        newRoutes.push({\r\n                            'od':d.od,\r\n                            'traffic':d.traffic,\r\n                            \"color\":d.color,\r\n                            \"path\":d.path,\r\n                            \"timestamps\":tmpStep\r\n                        })\r\n                    }\r\n                });\r\n                newRoutes.forEach(d=>{\r\n                    routeData.push(d)\r\n                })\r\n                // routeData.forEach(d=>{\r\n                //     Routes.push(d)\r\n                // })\r\n                Routes=routeData;\r\n                console.log('count:', count);\r\n                console.log('Routes:', Routes)\r\n                resolve('0')\r\n                // console.log(Routes)\r\n            })\r\n\r\n        })\r\n\r\n    });\r\n}\r\n\r\n\r\nlet predict_origin=new Map();\r\nlet predict_des=new Map();\r\n\r\n//获取预测流量数据\r\nfunction getPredictData(){\r\n    return new Promise( resolve => {\r\n        d3.csv('./Traffic_Predict_Data/prediction1-origin.csv').then(d=>{\r\n            d.map((x,index)=>{\r\n                // console.log('time',x.DepTime);\r\n                let date=new Date(x.DepTime);\r\n                // console.log('hour',date.getHours())\r\n                let hour=date.getHours();\r\n                if(!predict_origin.has(hour)){\r\n                    predict_origin.set(hour,{})\r\n                }\r\n                let tmp=predict_origin.get(hour)\r\n                tmp[x.Origin]=x.Trips\r\n            })\r\n            d3.csv('./Traffic_Predict_Data/prediction2-dep.csv').then(d=>{d.map((x,index)=>{\r\n                let date=new Date(x.DepTime);\r\n                // console.log('hour',date.getHours())\r\n                let hour=date.getHours();\r\n                    if(!predict_des.has(hour)){\r\n                        predict_des.set(hour,{})\r\n                    }\r\n                    let tmp=predict_des.get(hour)\r\n                        tmp[x.Destination]=x.Trips;\r\n                    });\r\n                resolve();\r\n                }\r\n            )\r\n            }\r\n        )\r\n    })\r\n}\r\n\r\nlet realOrg=new Map()\r\nlet realDes=new Map()\r\n//获取真实流量数据\r\nfunction getRealData(){\r\n    d3.csv('./Traffic_Predict_Data/origin.csv').then(d=>{\r\n            d.map((x,index)=>{\r\n                // console.log('time',x.DepTime);\r\n                let date=new Date(x.DepTime);\r\n                // console.log('hour',date.getHours())\r\n                let hour=date.getHours();\r\n                if(!realOrg.has(hour)){\r\n                    realOrg.set(hour,{})\r\n                }\r\n                let tmp=realOrg.get(hour)\r\n                tmp[x.Origin]=x.Trips\r\n            })\r\n            d3.csv('./Traffic_Predict_Data/destination.csv').then(d=>{d.map((x,index)=>{\r\n                    let date=new Date(x.DepTime);\r\n                    // console.log('hour',date.getHours())\r\n                    let hour=date.getHours();\r\n                    if(!realDes.has(hour)){\r\n                        realDes.set(hour,{})\r\n                    }\r\n                    let tmp=realDes.get(hour)\r\n                    tmp[x.Destination]=x.Trips;\r\n                });\r\n                }\r\n            )\r\n        }\r\n    )\r\n}\r\n\r\nlet blockRoute=[]\r\nlet count=[]\r\nlet blockData=new Map();\r\nfunction getBlockData(){\r\n    d3.csv('./blockdetect/anomalyFile.csv').then(d=>{\r\n        d.map(x=>{\r\n            console.log(x)\r\n            console.log(x['occurencingTime'])\r\n            let da=new Date(x['occurencingTime']);\r\n            console.log('da',da)\r\n            let h=da.getHours();\r\n            let m=da.getMinutes();\r\n            let s=da.getSeconds();\r\n            let t=h*3600+m*60+s;\r\n            blockData.set(t,[parseFloat(x['longitude']),parseFloat(x['latitude'])])\r\n        })\r\n        console.log(blockData)\r\n    })\r\n}\r\nfunction getBlockRoute(){\r\n    return new Promise(resolve => {\r\n        d3.csv('./blockdetect/GPS_588_merge.csv').then(d=>{\r\n            console.log(d)\r\n            let path=[];\r\n            let timestamps=[]\r\n            let m=0;\r\n            d.map((x,index)=>{\r\n                // console.log('x',x);\r\n                // console.log('lat',x.lat)\r\n                let da=new Date(x['date']);\r\n                let h=da.getHours();\r\n                let m=da.getMinutes();\r\n                let s=da.getSeconds();\r\n                let t=h*3600+m*60+s;\r\n                if(count.indexOf(t)===-1&&m%5===0){\r\n                    m++;\r\n                    count.push(t)\r\n                    timestamps.push(t)\r\n                    path.push([parseFloat(x['Long']),parseFloat(x['Lat'])])\r\n                    if(m%1===0){\r\n                        blockData.set(t,[parseFloat(x['Long']),parseFloat(x['Lat'])])\r\n\r\n                    }\r\n                }\r\n\r\n            })\r\n            blockRoute.push({\r\n                path:path,\r\n                timestamps:timestamps,\r\n                color:0\r\n            })\r\n\r\n\r\n            resolve();\r\n        })\r\n\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n//设置预测流量数据\r\nfunction setPredictData(hour){\r\n    console.log('org',predict_origin)\r\n    let data=[];\r\n    let tmp=predict_origin.get(parseInt(hour));\r\n    console.log('tmp',tmp)\r\n    for(let key in tmp){\r\n        // console.log('key',key)\r\n        data.push({\r\n            centroid: depCenter[parseInt(key)],\r\n            value:tmp[key]\r\n        })\r\n    }\r\n    // console.log('data',data)\r\n    return data;\r\n}\r\n//设置实际流量数据\r\nfunction setRealData(hour){\r\n    // console.log('org',predict_origin)\r\n    let data=[];\r\n    let tmp=realOrg.get(parseInt(hour));\r\n    console.log('tmp',tmp)\r\n    for(let key in tmp){\r\n        // console.log('key',key)\r\n        data.push({\r\n            centroid: depCenter[parseInt(key)],\r\n            value:tmp[key]\r\n        })\r\n    }\r\n    console.log('data',data)\r\n    return data;\r\n\r\n}\r\n\r\n\r\n\r\n// getRoute.then(function () {\r\n//     console.log('get')\r\n// });\r\n\r\nlet tmpIcon=[];\r\n\r\nexport default class RouteMap extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n         // const [value, setValue] = React.useState([0]);\r\n        this.state = {\r\n            time: 0,\r\n            hour:-1,\r\n            depV:false,\r\n            desV:false,\r\n            area:[],\r\n            options:[],\r\n            block:false,\r\n            pre_org:[],\r\n            pre_des:[],\r\n            real_org:[],\r\n            real:false,\r\n            showPredict:false,\r\n            blockIcon:[]\r\n\r\n\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        getArea();\r\n        let p= getPredictData();\r\n        p.then(function() {\r\n            // this.setState({\r\n            //     pre_origin: predict_origin,\r\n            //     pre_des : predict_des\r\n            // })\r\n        }.bind(this))\r\n\r\n        getRealData();\r\n\r\n        let p2=getBlockRoute();\r\n        p2.then(function () {\r\n            console.log('blockRoute',blockRoute)\r\n\r\n            this.setState({\r\n                blockRoute:blockRoute\r\n            })\r\n        }.bind(this) )\r\n\r\n        // getBlockData();\r\n\r\n\r\n        // this.setState({\r\n        //     depPolygon:depPolygon,\r\n        //     desPolygon:desPolygon\r\n        // })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // if (this._animationFrame) {\r\n        //     window.cancelAnimationFrame(this._animationFrame);\r\n        // }\r\n    }\r\n\r\n//get route from mapbox\r\n    // getRoute(){\r\n    //     d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\r\n    //\r\n    //         let re=/([-+]?[0-9]*\\.?[0-9]+)/g;\r\n    //         console.log('data1:',data)\r\n    //         data.forEach(d=>{\r\n    //             let tmp=d.value.match(re)\r\n    //             let tmpData=[];\r\n    //             for(let i=0;i<tmp.length-1;i+=2){\r\n    //                 tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\r\n    //             }\r\n    //             depData.push(tmpData)\r\n    //         })\r\n    //         depData.forEach(d=>{\r\n    //             let sumlong=0\r\n    //             let sumlat=0;\r\n    //             d.forEach(data=>{\r\n    //                 sumlong+=data[0];\r\n    //                 sumlat+=data[1];\r\n    //             })\r\n    //             depCenter.push([sumlong/d.length,sumlat/d.length])\r\n    //         })\r\n    //         d3.csv(\"./edge_des_csv.csv\").then(function (data) {\r\n    //             let re=/([-+]?[0-9]*\\.?[0-9]+)/g\r\n    //             console.log('data2:',data)\r\n    //             data.forEach(d=>{\r\n    //                 let tmp=d.value.match(re)\r\n    //                 let tmpData=[];\r\n    //                 for(let i=0;i<tmp.length-1;i+=2){\r\n    //                     tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\r\n    //                 }\r\n    //                 desData.push(tmpData)\r\n    //             })\r\n    //             desData.forEach(d=>{\r\n    //                 let sumlong=0;\r\n    //                 let sumlat=0;\r\n    //                 d.forEach(data=>{\r\n    //                     sumlong+=data[0];\r\n    //                     sumlat+=data[1];\r\n    //                 })\r\n    //                 desCenter.push([sumlong/d.length,sumlat/d.length])\r\n    //             });\r\n    //             // d3.json('http://localhost:5000/data/12:00:00').then(function(data){\r\n    //             //     data.forEach(d=>{\r\n    //             //         var tmp=d.split(',');\r\n    //             //         if(tmp[0]!=-1 && tmp[1]!=-1) {\r\n    //             //             if(tmp[0]>46&&tmp[0]<=60){\r\n    //             //              //   if (tmp[2] !== '0') {\r\n    //             //                 var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\r\n    //             //                 gets.push($.ajax({\r\n    //             //                     type: 'GET',\r\n    //             //                     url: urlNow,\r\n    //             //                     success: function (r) {\r\n    //             //                         console.log('r:', r)\r\n    //             //                         //var json = JSON.parse(data);\r\n    //             //                         var plan = r.routes[0];\r\n    //             //                         var route = plan.geometry.coordinates;\r\n    //             //                         var timestamps = [0];//先设置每条路径1000stamp\r\n    //             //                         for (var i = 0; i < route.length; i++) {\r\n    //             //                             if (i !== 0) {\r\n    //             //                                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\r\n    //             //                                 timestamps.push(dist + timestamps[i - 1])\r\n    //             //                             }\r\n    //             //                         }\r\n    //             //                         var geojson = {\r\n    //             //                             'vendor': 1,\r\n    //             //                             'path': route,\r\n    //             //                             'timestamps': timestamps,\r\n    //             //\r\n    //             //                         };\r\n    //             //                         console.log(geojson)\r\n    //             //                         Routes.push(geojson)\r\n    //             //                         saveJson[tmp[0]+','+tmp[1]] = geojson\r\n    //             //                     },\r\n    //             //                     error:function(){\r\n    //             //                         console.log('err')\r\n    //             //                     }\r\n    //             //                 }));\r\n    //             //\r\n    //             //            // }\r\n    //             //             }\r\n    //             //         }\r\n    //             //     })\r\n    //             //     // url.forEach(function(value) {\r\n    //             //     //     console.log('url:',value)\r\n    //             //     //     gets.push($.ajax({\r\n    //             //     //         type: 'GET',\r\n    //             //     //         url: value,\r\n    //             //     //         success: function(data) {\r\n    //             //     //             console.log('data:',data)\r\n    //             //     //             //var json = JSON.parse(data);\r\n    //             //     //             var plan = data.routes[0];\r\n    //             //     //             var route = plan.geometry.coordinates;\r\n    //             //     //             var timestamps=[0];//先设置每条路径1000stamp\r\n    //             //     //             for(var i=0;i<route.length;i++){\r\n    //             //     //                 if(i!==0){\r\n    //             //     //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\r\n    //             //     //                     timestamps.push(dist+timestamps[i-1])\r\n    //             //     //                 }\r\n    //             //     //             }\r\n    //             //     //             var geojson = {\r\n    //             //     //                 'vendor':1,\r\n    //             //     //                 'path': route,\r\n    //             //     //                 'timestamps':timestamps,\r\n    //             //     //\r\n    //             //     //             };\r\n    //             //     //             console.log(geojson)\r\n    //             //     //             Routes.push(geojson)\r\n    //             //     //\r\n    //             //     //\r\n    //             //     //         }\r\n    //             //     //     }));\r\n    //             //     // });\r\n    //             //\r\n    //             //     $.when.apply($, gets).then(function() {\r\n    //             //         console.log(saveJson)\r\n    //             //         var jsonData=JSON.stringify(saveJson)\r\n    //             //         download(jsonData,'route.json','text/plain')\r\n    //             //         console.log('Routes:',Routes)\r\n    //             //         resolve(Routes);\r\n    //             //         // resolve([\r\n    //             //         //     {\r\n    //             //         //         \"vendor\": 1,\r\n    //             //         //         \"path\": [\r\n    //             //         //             [120.167057,30.185901],\r\n    //             //         //             [120.165752,30.185723],\r\n    //             //         //             [120.16581,30.188491],\r\n    //             //         //             [120.190417,30.198224],\r\n    //             //         //             [120.191971\t,30.204],\r\n    //             //         //             [120.189622\t,30.20767],\r\n    //             //         //             [120.182369\t,30.218973],\r\n    //             //         //             [120.180889\t,30.222601],\r\n    //             //         //             [120.200108\t,30.306856],\r\n    //             //         //             [120.23477\t,30.311914],\r\n    //             //         //             [120.246959\t,30.316748],\r\n    //             //         //             [120.309708\t,30.387518],\r\n    //             //         //             [120.312426\t,30.39154],\r\n    //             //         //             [120.309069\t,30.400897],\r\n    //             //         //             [120.302548\t,30.399632],],\r\n    //             //         //\r\n    //             //         //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\r\n    //             //         //     }])\r\n    //             //     });\r\n    //             // })\r\n    //\r\n    //             d3.json('http://localhost:5000/data/0:00:00').then(function(data){\r\n    //                 var count=0;\r\n    //                 d3.json('./10.json').then(function (map) {\r\n    //                     // console.log('map:',map)\r\n    //                     data.forEach(d=>{\r\n    //                         var tmp=d.split(',');\r\n    //                         if(tmp[0]!=-1 && tmp[1]!=-1) {\r\n    //                             if(parseInt(tmp[2])>=5){\r\n    //                                 count++;\r\n    //                                 var key=tmp[0]+','+tmp[1];\r\n    //                                 console.log(map[key]);\r\n    //                                 Routes.push(map[key]);\r\n    //                             }\r\n    //                             // if(tmp[0]>40&&tmp[0]<=60&&tmp[1]>40&&tmp[1]<=60){\r\n    //                             //   if (tmp[2] !== '0') {\r\n    //                             // var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\r\n    //                             // gets.push($.ajax({\r\n    //                             //     type: 'GET',\r\n    //                             //     url: urlNow,\r\n    //                             //     success: function (r) {\r\n    //                             //         console.log('r:', r)\r\n    //                             //         //var json = JSON.parse(data);\r\n    //                             //         var plan = r.routes[0];\r\n    //                             //         var route = plan.geometry.coordinates;\r\n    //                             //         var timestamps = [0];//先设置每条路径1000stamp\r\n    //                             //         for (var i = 0; i < route.length; i++) {\r\n    //                             //             if (i !== 0) {\r\n    //                             //                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\r\n    //                             //                 timestamps.push(dist + timestamps[i - 1])\r\n    //                             //             }\r\n    //                             //         }\r\n    //                             //         var geojson = {\r\n    //                             //             'vendor': 1,\r\n    //                             //             'path': route,\r\n    //                             //             'timestamps': timestamps,\r\n    //                             //\r\n    //                             //         };\r\n    //                             //         console.log(geojson)\r\n    //                             //         Routes.push(geojson)\r\n    //                             //         saveJson[tmp[0]+','+tmp[1]] = geojson\r\n    //                             //     },\r\n    //                             //     error:function(){\r\n    //                             //         console.log('err')\r\n    //                             //     }\r\n    //                             // }));\r\n    //\r\n    //                             // }\r\n    //                             // }\r\n    //                         }\r\n    //                     })\r\n    //                     console.log('count:',count)\r\n    //                     this.layers[1].setData(Routes)\r\n    //                     // resolve(Routes);\r\n    //                     // console.log(Routes)\r\n    //                 })\r\n    //\r\n    //                 // url.forEach(function(value) {\r\n    //                 //     console.log('url:',value)\r\n    //                 //     gets.push($.ajax({\r\n    //                 //         type: 'GET',\r\n    //                 //         url: value,\r\n    //                 //         success: function(data) {\r\n    //                 //             console.log('data:',data)\r\n    //                 //             //var json = JSON.parse(data);\r\n    //                 //             var plan = data.routes[0];\r\n    //                 //             var route = plan.geometry.coordinates;\r\n    //                 //             var timestamps=[0];//先设置每条路径1000stamp\r\n    //                 //             for(var i=0;i<route.length;i++){\r\n    //                 //                 if(i!==0){\r\n    //                 //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\r\n    //                 //                     timestamps.push(dist+timestamps[i-1])\r\n    //                 //                 }\r\n    //                 //             }\r\n    //                 //             var geojson = {\r\n    //                 //                 'vendor':1,\r\n    //                 //                 'path': route,\r\n    //                 //                 'timestamps':timestamps,\r\n    //                 //\r\n    //                 //             };\r\n    //                 //             console.log(geojson)\r\n    //                 //             Routes.push(geojson)\r\n    //                 //\r\n    //                 //\r\n    //                 //         }\r\n    //                 //     }));\r\n    //                 // });\r\n    //\r\n    //                 // $.when.apply($, gets).then(function() {\r\n    //                 //     console.log(saveJson)\r\n    //                 //     var jsonData=JSON.stringify(saveJson)\r\n    //                 //     download(jsonData,'route.json','text/plain')\r\n    //                 //     console.log('Routes:',Routes)\r\n    //                 //     resolve(Routes);\r\n    //                 //     // resolve([\r\n    //                 //     //     {\r\n    //                 //     //         \"vendor\": 1,\r\n    //                 //     //         \"path\": [\r\n    //                 //     //             [120.167057,30.185901],\r\n    //                 //     //             [120.165752,30.185723],\r\n    //                 //     //             [120.16581,30.188491],\r\n    //                 //     //             [120.190417,30.198224],\r\n    //                 //     //             [120.191971\t,30.204],\r\n    //                 //     //             [120.189622\t,30.20767],\r\n    //                 //     //             [120.182369\t,30.218973],\r\n    //                 //     //             [120.180889\t,30.222601],\r\n    //                 //     //             [120.200108\t,30.306856],\r\n    //                 //     //             [120.23477\t,30.311914],\r\n    //                 //     //             [120.246959\t,30.316748],\r\n    //                 //     //             [120.309708\t,30.387518],\r\n    //                 //     //             [120.312426\t,30.39154],\r\n    //                 //     //             [120.309069\t,30.400897],\r\n    //                 //     //             [120.302548\t,30.399632],],\r\n    //                 //     //\r\n    //                 //     //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\r\n    //                 //     //     }])\r\n    //                 // });\r\n    //             })\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n\r\n\r\n//routeTip\r\n//     _renderTooltip() {\r\n//         const {hoveredObject, pointerX, pointerY} = this.state || {};\r\n//         return hoveredObject && (\r\n//             <div className=\"tooltip\" style={{color:'#ffffff',position: 'absolute', zIndex: 1, pointerEvents: 'none', left: pointerX, top: pointerY}}>\r\n//                 <div>\r\n//                     <b>O-D: </b>\r\n//                     <span>{hoveredObject.od}</span>\r\n//                 </div>\r\n//                 <div>\r\n//                     <b>Traffic: </b>\r\n//                     <span>{hoveredObject.traffic}</span>\r\n//                 </div>\r\n//\r\n//             </div>\r\n//\r\n//         );\r\n//     }\r\n\r\n//areaTipDep\r\n    _renderTooltipDep() {\r\n        const { depObject,  depX,  depY} = this.state || {};\r\n        return depObject && (\r\n            <div className=\"tooltip\" style={{color:'#00ffff',position: 'absolute', zIndex: 1, pointerEvents: 'none', left: depX, top: depY}}>\r\n                <div>\r\n                    <b>区域 id: </b>\r\n                    <span>{depObject.number}</span>\r\n                </div>\r\n\r\n                <div>\r\n                    <b>驶出流量: </b>\r\n                    <span>{depObject.out}</span>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n    //areaTipDes\r\n    _renderTooltipDes() {\r\n        const { desObject, desX, desY} = this.state || {};\r\n        return desObject && (\r\n            <div className=\"tooltip\" style={{color:'#00ffff',position: 'absolute', zIndex: 1, pointerEvents: 'none', left: desX, top: desY}}>\r\n                <div>\r\n                    <b>区域: </b>\r\n                    <span>{desObject.number}</span>\r\n                </div>\r\n\r\n                <div>\r\n                    <b>驶入流量: </b>\r\n                    <span>{desObject.in}</span>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n    _getPredictData(){\r\n        if(this.state.showPredict){\r\n            return this.state.real?this.state.real_org:this.state.pre_org\r\n        }\r\n        else return [{\r\n            centroid: [0,0],\r\n            value:[0,0]\r\n        }]\r\n    }\r\n\r\n    _renderLayers() {\r\n        const {\r\n            // buildings = DATA_URL.BUILDINGS,\r\n            trailLength = 120,\r\n            theme = DEFAULT_THEME,\r\n            // TripsLayer=new TripsLayer({\r\n            //     id: 'trips',\r\n            //     //data: trips,\r\n            //     // data:[\r\n            //     //     {\r\n            //     //         \"vendor\": 1,\r\n            //     //         \"path\": [\r\n            //     //             [120.167057,30.185901],\r\n            //     //             [120.165752,30.185723],\r\n            //     //             [120.16581,30.188491],\r\n            //     //             [120.190417,30.198224],\r\n            //     //             [120.191971\t,30.204],\r\n            //     //             [120.189622\t,30.20767],\r\n            //     //             [120.182369\t,30.218973],\r\n            //     //             [120.180889\t,30.222601],\r\n            //     //             [120.200108\t,30.306856],\r\n            //     //             [120.23477\t,30.311914],\r\n            //     //             [120.246959\t,30.316748],\r\n            //     //             [120.309708\t,30.387518],\r\n            //     //             [120.312426\t,30.39154],\r\n            //     //             [120.309069\t,30.400897],\r\n            //     //             [120.302548\t,30.399632],],\r\n            //     //\r\n            //     //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\r\n            //     //     }],\r\n            //     data:Routes,\r\n            //     getPath: d => d.path,\r\n            //     getTimestamps: d => d.timestamps,\r\n            //     getColor: d => (d.vendor === 0 ? theme.trailColor0 : theme.trailColor1),\r\n            //     opacity: 0.3,\r\n            //     widthMinPixels: 2,\r\n            //     rounded: true,\r\n            //     trailLength,\r\n            //     currentTime: this.state.time,\r\n            //\r\n            //     shadowEnabled: false\r\n            // }),\r\n        } = this.props;\r\n\r\n        return [\r\n         new ScatterplotLayer({\r\n            id: 'scatterplot-layer',\r\n            data:this.state.blockIcon,\r\n            pickable: true,\r\n            opacity: 0.8,\r\n            stroked: true,\r\n            filled: true,\r\n            radiusScale: 6,\r\n            radiusMinPixels: 1,\r\n            radiusMaxPixels: 100,\r\n            lineWidthMinPixels: 1,\r\n            getPosition: d => d.coordinates,\r\n            getRadius: d => 20,\r\n            getFillColor: d => [255, 140, 0],\r\n            getLineColor: d => [0, 0, 0],\r\n            visible:this.state.block\r\n        }),\r\n\r\n            // new IconLayer({\r\n            //     id:'blockIcon',\r\n            //     data:this.state.blockIcon,\r\n            //     iconAtlas:'./warning.png',\r\n            //     iconMapping:ICON_MAPPING,\r\n            //     getIcon: d => 'marker',\r\n            //     sizeScale: 15,\r\n            //     getPosition: d => d.coordinates,\r\n            //     getColor:[255,255,0],\r\n            //     getSize: d => 5,\r\n            //\r\n            // }),\r\n            new TripsLayer({\r\n                id:'blockRoute',\r\n                data:this.state.blockRoute,\r\n                getPath:d=>d.path,\r\n                getTimestamps: d => d.timestamps,\r\n                // getColor: d => colorTable[d.color],\r\n                getColor:[0,140,255,255],\r\n                opacity: 0.3,\r\n                widthMinPixels: 5,\r\n                rounded: true,\r\n                trailLength:1200,\r\n                currentTime: this.state.time,\r\n                shadowEnabled: false,\r\n                pickable:true,\r\n                visible:this.state.block\r\n            }),\r\n\r\n            new TripsLayer({\r\n                id: 'trips',\r\n                //data: trips,\r\n                // data:[\r\n                //     {\r\n                //         \"vendor\": 1,\r\n                //         \"path\": [\r\n                //             [120.167057,30.185901],\r\n                //             [120.165752,30.185723],\r\n                //             [120.16581,30.188491],\r\n                //             [120.190417,30.198224],\r\n                //             [120.191971\t,30.204],\r\n                //             [120.189622\t,30.20767],\r\n                //             [120.182369\t,30.218973],\r\n                //             [120.180889\t,30.222601],\r\n                //             [120.200108\t,30.306856],\r\n                //             [120.23477\t,30.311914],\r\n                //             [120.246959\t,30.316748],\r\n                //             [120.309708\t,30.387518],\r\n                //             [120.312426\t,30.39154],\r\n                //             [120.309069\t,30.400897],\r\n                //             [120.302548\t,30.399632],],\r\n                //\r\n                //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\r\n                //     }],\r\n                // data:getRoute,\r\n                data:this.state.Route,\r\n                // updateTriggers:{\r\n                //   data:Routes\r\n                // },\r\n                getPath: d => d.path,\r\n                getTimestamps: d => d.timestamps,\r\n                getColor: d => colorTable[d.color],\r\n                // getColor:[0,255,255,255],\r\n                opacity: 0.3,\r\n                widthMinPixels: 2,\r\n                rounded: true,\r\n                trailLength,\r\n                currentTime: this.state.time,\r\n                shadowEnabled: false,\r\n                pickable:true,\r\n                visible:this.state.showRoute\r\n                // onHover: info=>this.setState({\r\n                //     hoveredObject: info.object,\r\n                //     pointerX: info.x,\r\n                //     pointerY: info.y\r\n                // })\r\n                // onHover:info=>{\r\n                //     console.log(info)\r\n                // }\r\n            }),\r\n\r\n            new PolygonLayer({\r\n                id: 'dep_polygon',\r\n                data:this.state.depPolygon,\r\n                pickable: true,\r\n                stroked: true,\r\n                filled: true,\r\n                wireframe: true,\r\n                lineWidthMinPixels: 1,\r\n                getPolygon: d => d.contour,\r\n                // getElevation: d => d.population / d.area / 10,\r\n                getFillColor: d => [255, 255, 0,50],\r\n                getLineColor: [80, 80, 80],\r\n                getLineWidth: 1,\r\n                onHover: info=>this.setState({\r\n                    depObject: info.object,\r\n                    depX: info.x,\r\n                    depY: info.y\r\n                }),\r\n                visible:this.state.depV\r\n                // onHover: info=>{\r\n                //     console.log(info)\r\n                // }\r\n\r\n            }),\r\n\r\n            new PolygonLayer({\r\n                id:'des_polygon',\r\n                data:this.state.desPolygon,\r\n                pickable: true,\r\n                stroked: true,\r\n                filled: true,\r\n                wireframe: true,\r\n                lineWidthMinPixels: 1,\r\n                getPolygon: d => d.contour,\r\n                // getElevation: d => d.population / d.area / 10,\r\n                getFillColor: d => [255, 0, 0,50],\r\n                getLineColor: [80, 80, 80],\r\n                getLineWidth: 1,\r\n                onHover: info=>this.setState({\r\n                    desObject: info.object,\r\n                    desX: info.x,\r\n                    desY: info.y\r\n                }),\r\n                visible:this.state.desV\r\n            }),\r\n\r\n            new ColumnLayer({\r\n                id: 'predict-origin-layer',\r\n                data: this._getPredictData(),\r\n                diskResolution: 12,\r\n                radius: 100,\r\n                extruded: true,\r\n                pickable: true,\r\n                elevationScale: 5000,\r\n                getPosition: d => d.centroid,\r\n                getFillColor: d => {\r\n                    let k = (Math.log(d.value) / Math.log(4)).toFixed(0);\r\n                    if (k <= 5) {\r\n                        return colorRange[k]\r\n                    } else {\r\n                        return colorRange[5]\r\n                    }\r\n                },\r\n                getLineColor: [0, 0, 0],\r\n                getElevation: d =>parseInt(d.value)/100,\r\n                transitions: {\r\n                    getElevation: {\r\n                        duration: 3000,\r\n                        // type: 'spring',\r\n                        // stiffness: 0.01,\r\n                        // damping: 0.15,\r\n                        // easing: d3.easeCubicInOut,\r\n                        enter: d => {\r\n                            // console.log(d);\r\n                            let tmp = [];\r\n                            for (let i = 0; i < 300; i++) {\r\n                                tmp.push(d[0] * i / 300)\r\n                            }\r\n                            // console.log(tmp)\r\n                            return tmp;\r\n                        },\r\n                    }\r\n                },\r\n                updateTriggers: {\r\n                    getElevation: [this.state.pre_org,this.state.real_org],\r\n                }\r\n            }),\r\n            // new PolygonLayer({\r\n            //     id: 'buildings',\r\n            //     data: buildings,\r\n            //     extruded: true,\r\n            //     wireframe: false,\r\n            //     opacity: 0.5,\r\n            //     getPolygon: f => f.polygon,\r\n            //     getElevation: f => f.height,\r\n            //     getFillColor: theme.buildingColor,\r\n            //     material: theme.material\r\n            // })\r\n        ];\r\n    }\r\n    _formatLabel(t) {\r\n        return `${Math.floor(t/3600)}:${Math.floor((t%3600)/60)}:${Math.floor((t%3600)%60)}`;\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            viewState,\r\n            mapStyle = 'mapbox://styles/mapbox/dark-v9',\r\n            theme = DEFAULT_THEME,\r\n        } = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <DeckGL\r\n                    layers={this._renderLayers()}\r\n                    effects={theme.effects}\r\n                    initialViewState={INITIAL_VIEW_STATE}\r\n                    viewState={viewState}\r\n                    controller={true}\r\n                >\r\n                    <StaticMap\r\n                        reuseMaps\r\n                        mapStyle={mapStyle}\r\n                        preventStyleDiffing={true}\r\n                        mapboxApiAccessToken={MAPBOX_TOKEN}\r\n                    />\r\n                </DeckGL>\r\n\r\n                { this._renderTooltipDep() }\r\n                {this._renderTooltipDes()}\r\n\r\n                <StyletronProvider value={engine}>\r\n                    <BaseProvider theme={LightTheme}>\r\n                        <SliderTraffic\r\n                            min={0}\r\n                            max={86400}\r\n                            value={[0,this.state.time]}\r\n                            formatLabel={this._formatLabel}\r\n                            onChange={({value}) => {\r\n                                let nowTime=value[1];\r\n\r\n                                if(blockData.has(nowTime)){\r\n                                    console.log('icon')\r\n                                    tmpIcon.push({\r\n                                        coordinates:blockData.get(nowTime)\r\n                                    })\r\n                                    let tmp=[];\r\n                                    tmpIcon.forEach(d=>{\r\n                                        tmp.push(d)\r\n                                    })\r\n                                    // if(tmpIcon.length>10){\r\n                                        console.log('set')\r\n                                        this.setState({\r\n                                            blockIcon:tmp\r\n                                        })\r\n                                    // }\r\n\r\n\r\n                                    console.log(this.state.blockIcon)\r\n                                }\r\n\r\n                                // console.log('nowTime:',nowTime);\r\n                                if(Math.floor(nowTime/3600)!==this.state.hour){\r\n                                    this.setState({hour:Math.floor(nowTime/3600)})\r\n                                    console.log('nowztime:',nowTime);\r\n                                    var hour=(nowTime/3600).toFixed(0);\r\n                                    console.log('hour:',hour);\r\n                                    this.setState({\r\n                                        pre_org:setPredictData(hour),\r\n                                        real_org:setRealData(hour)\r\n                                    });\r\n                                    // console.log('pre_org',this.state.pre_org);\r\n\r\n                                    var p=getRoute(hour);\r\n                                    p.then(function() {\r\n                                        console.log('Route',Routes)\r\n                                        this.setState({\r\n                                            Route:Routes,\r\n                                            depPolygon:depPolygon,\r\n                                            desPolygon:desPolygon\r\n                                        })\r\n                                    }.bind(this))\r\n                                }\r\n                                this.setState({time: nowTime})\r\n                                // console.log('time',this.state.time)\r\n                                //console.log(this.state)\r\n                                //console.log('value:',value)\r\n                            }}\r\n                        />\r\n                     <SelectContainer>\r\n                        <Select id={'area'}\r\n                        options={[\r\n                            {label:\"出发区域\",id:'dep_polygon'},\r\n                            {label:\"到达区域\",id:'des_polygon'},\r\n                            { label: \"隐藏\", id: \"\" },\r\n\r\n                        ]}\r\n                        value={this.state.area}\r\n                        placeholder=\"显示区域\"\r\n                        // onChange={params => setValue(params.value)}\r\n                        size={SIZE.mini}\r\n                        onChange={params=> {\r\n                            // console.log('params:',params);\r\n                            if(params.option!=null){\r\n\r\n\r\n                                if(params.option.id=='dep_polygon'){\r\n                                    console.log()\r\n                                    this.setState({\r\n                                        depPolygon:depPolygon,\r\n                                        depV:true,\r\n                                        desV:false,\r\n                                        area:[{label:\"出发区域\",id:'dep_polygon'}]\r\n                                    })\r\n                                }\r\n                                else if(params.option.id=='des_polygon'){\r\n                                    console.log('desPolygon',this.state.desPolygon)\r\n                                    this.setState({\r\n                                        desPolygon:desPolygon,\r\n                                        desV:true,\r\n                                        depV:false,\r\n                                        area:[{label:\"到达区域\",id:'des_polygon'}]\r\n                                    })\r\n                                }\r\n                                else{\r\n                                    this.setState({\r\n                                        desV:false,\r\n                                        depV:false,\r\n                                        area:[{ label: \"隐藏\", id: \"\" }]\r\n                                    })\r\n                                }\r\n                            }\r\n                            else{\r\n                                this.setState({\r\n                                    area:[],\r\n                                    desV:false,\r\n                                    depV:false,\r\n                                })\r\n                            }\r\n\r\n                        }}\r\n                    />\r\n\r\n                </SelectContainer>\r\n                        <SelectContainer2>\r\n                            <Select id={'option'}\r\n                                    options={[\r\n                                        {label:\"显示轨迹\",id:'route'},\r\n                                        {label:'预测流量',id:\"predict\"},\r\n                                        {label:\"实际流量\",id:'real'},\r\n                                        {label:'路障检测',id:'block'}\r\n                                    ]}\r\n                                    value={this.state.options}\r\n                                    placeholder={'选择服务'}\r\n                                    size={SIZE.mini}\r\n                                    onChange={ params=>{\r\n                                        if (params.option!==null){\r\n                                            if(params.option.id==='predict'){\r\n                                                this.setState({\r\n                                                    real:false,\r\n                                                    options:[{label:\"预测流量\",id:\"predict\"}],\r\n                                                    showPredict:true\r\n                                                })\r\n                                            }\r\n                                            else if(params.option.id==='real'){\r\n                                                this.setState({\r\n                                                    real:true,\r\n                                                    options:[{label:\"实际流量\",id:\"real\"}],\r\n                                                    showPredict:true\r\n                                                })\r\n                                            }\r\n                                            else if(params.option.id==='block'){\r\n                                                this.setState({\r\n                                                    block:true,\r\n                                                    options:[{label:\"路障检测\",id:\"block\"}],\r\n                                                    time:45466,\r\n                                                    showPredict:false,\r\n                                                    showRoute:false\r\n                                                })\r\n\r\n                                            }\r\n                                            else if(params.option.id==='route'){\r\n                                                this.setState({\r\n                                                    block:false,\r\n                                                    options:[{label:\"显示轨迹\",id:\"route\"}],\r\n                                                    showRoute:true,\r\n\r\n                                                })\r\n                                            }\r\n                                        }\r\n                                    }}\r\n                            />\r\n                        </SelectContainer2>\r\n                    </BaseProvider>\r\n                </StyletronProvider>\r\n\r\n\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n/* {(<SliderInput\r\n                     value={[0,this.state.time]}\r\n                    min={0}\r\n                    max={24 * 60}\r\n                    formatLabel={this._formatLabel}\r\n                    onChange={({value}) => {\r\n                        if (value % 3600 === 0) {\r\n                            var p = getRoute(value / 3600);\r\n                            p.then(function () {\r\n                                this.setState({\r\n                                    Routes: Routes\r\n                                })\r\n                            }.bind(this))\r\n                        }\r\n                        this.setState({time: value});\r\n                        console.log(value)\r\n                    }}\r\n                />)\r\n                }*/\r\n\r\n\r\n// export function renderToDOM(container) {\r\n//     render(<App />, container);\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\n// ReactDOM.render(<CustomTicks />,document.getElementById('app'))\r\n\r\n// require('d3-request').csv(DATA_URL, (error, response) => {\r\n//         if (!error) {\r\n//             const data = response.map(row => ({\r\n//                 timestamp: new Date(`${row.DateTime} UTC`).getTime(),\r\n//                 latitude: Number(row.Latitude),\r\n//                 longitude: Number(row.Longitude),\r\n//                 depth: Number(row.Depth),\r\n//                 magnitude: Number(row.Magnitude)\r\n//             }));\r\n//             ReactDOM.render(<App2 data={data} />, document.getElementById('root'));\r\n//         }\r\n//     });\r\n","/* global requestAnimationFrame, cancelAnimationFrame */\r\nimport React, {PureComponent} from 'react';\r\nimport {Client as Styletron} from 'styletron-engine-atomic';\r\nimport {Provider as StyletronProvider} from 'styletron-react';\r\nimport {LightTheme, BaseProvider, styled} from 'baseui';\r\nimport {Slider} from 'baseui/slider';\r\nimport {Button, SHAPE, SIZE} from 'baseui/button';\r\nimport Start from 'baseui/icon/chevron-right';\r\nimport Stop from 'baseui/icon/delete';\r\n\r\nconst engine = new Styletron();\r\n\r\n\r\nconst ButtonContainer=styled('div',{\r\n    position: 'absolute',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    zIndex: 2,\r\n    top: '10px',\r\n    left:'10px'\r\n});\r\n\r\nconst Container = styled('div', {\r\n    position: 'absolute',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    zIndex: 1,\r\n    bottom: '20px',\r\n    width: '100%'\r\n});\r\n\r\nconst ThumbValue = styled('div', {\r\n    color: '#000000',\r\n    position: 'absolute',\r\n    top: '-2em'\r\n});\r\n\r\nconst TickBar = styled('div', {\r\n    width: '480px',\r\n    height: '20px',\r\n    maxWidth: '80vw'\r\n});\r\n\r\nconst ANIMATION_SPEED = 2;\r\nlet count=0;\r\n\r\nexport default class sliderCovid extends PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isPlaying: false\r\n        };\r\n\r\n        this._renderThumbValue = this._renderThumbValue.bind(this);\r\n        this._animate = this._animate.bind(this);\r\n        this._toggle = this._toggle.bind(this);\r\n        this._animationFrame = null;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this._animationFrame);\r\n    }\r\n\r\n    _toggle() {\r\n        cancelAnimationFrame(this._animationFrame);\r\n        const {isPlaying} = this.state;\r\n        if (!isPlaying) {\r\n            this._animate();\r\n        }\r\n        this.setState({isPlaying: !isPlaying});\r\n    }\r\n\r\n    _animate() {\r\n        count++;\r\n        // console.log(count);\r\n        if(count===ANIMATION_SPEED){\r\n            const {max,value} = this.props;\r\n            let newCount=((value[1]+1)>max)?0:value[1]+1;\r\n\r\n            let date=new Date('2020-01-22');\r\n            date.setDate(date.getDate()+value[1]);\r\n            console.log('mounth:',date.getMonth());\r\n\r\n            // let month=date.getUTCMonth()+1;\r\n            // if(month<10){\r\n            //     month='0'+month\r\n            // }\r\n            // else{\r\n            //     month=month.toString()\r\n            // }\r\n            // let tmpstr=date.getFullYear()+'-'+date.getUTCMonth()+1+'-'+date.getDate();\r\n            let tmpstr=`${date.getFullYear()}-${(date.getMonth()+1)<10?'0'+(date.getMonth()+1):date.getMonth()+1}-${date.getDate()<10?'0'+date.getDate():date.getDate()}`;\r\n            console.log('tmpstr:',tmpstr);\r\n            this.props.onChange({\r\n                date:tmpstr,\r\n                value:[0,newCount]\r\n            });\r\n            count=0\r\n        }\r\n        this._animationFrame = requestAnimationFrame(this._animate);\r\n    }\r\n\r\n    _renderThumbValue({$thumbIndex, $value}) {\r\n        //console.log('$thumbIndex:',$thumbIndex);\r\n        if($thumbIndex==1){\r\n            const value = $value[$thumbIndex];\r\n            // console.log('thumb:',value)\r\n            return <ThumbValue Color={[0,0,0,255]}>{this.props.formatLabel(value)}</ThumbValue>;\r\n        }\r\n        else{\r\n            return <ThumbValue></ThumbValue>\r\n        }\r\n\r\n        // return <ThumbValue>{0}</ThumbValue>;\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const {value, min, max} = this.props;\r\n        const isButtonEnabled = value[0] > min || value[1] < max;\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return (\r\n            <StyletronProvider value={engine}>\r\n                <BaseProvider theme={LightTheme}>\r\n                    <Container>\r\n                        <Button\r\n                            shape={SHAPE.round}\r\n                            size={SIZE.compact}\r\n                            disabled={!isButtonEnabled}\r\n                            onClick={this._toggle}\r\n                        >\r\n                            {this.state.isPlaying ? <Stop title=\"Stop\" /> : <Start title=\"Animate\" />}\r\n                        </Button>\r\n                        <Slider\r\n                            {...this.props}\r\n                            overrides={{\r\n                                ThumbValue: this._renderThumbValue,\r\n                                TickBar: () => <TickBar />\r\n                            }}\r\n                        />\r\n                    </Container>\r\n                    {/*<ButtonContainer>*/}\r\n                    {/*    <Button*/}\r\n                    {/*        shape={SHAPE.round}*/}\r\n                    {/*        size={SIZE.compact}*/}\r\n                    {/*        disabled={!isButtonEnabled}*/}\r\n                    {/*    >*/}\r\n                    {/*    </Button>*/}\r\n                    {/*</ButtonContainer>*/}\r\n                </BaseProvider>\r\n            </StyletronProvider>\r\n        );\r\n    }\r\n}\r\n","import React, {Component, Fragment} from 'react';\r\nimport {render} from 'react-dom';\r\nimport {StaticMap} from 'react-map-gl';\r\nimport DeckGL from '@deck.gl/react';\r\nimport {ScatterplotLayer} from '@deck.gl/layers';\r\nimport {DataFilterExtension} from '@deck.gl/extensions';\r\nimport {MapView} from '@deck.gl/core';\r\nimport SliderCovid from './sliderCovid'\r\nimport {HeatmapLayer} from '@deck.gl/aggregation-layers';\r\nimport * as d3 from 'd3'\r\n\r\n\r\n// Set your mapbox token here\r\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\r\n\r\n\r\nconst MAP_VIEW = new MapView({\r\n    // 1 is the distance between the camera and the ground\r\n    farZMultiplier: 100\r\n});\r\n\r\n\r\nlet days=39;\r\n\r\nlet flag=-1;\r\n\r\n//read data\r\n\r\nlet dateMap=new Map();\r\nfunction getData(){\r\n    return new Promise(resolve => {\r\n        d3.csv(\"./COVID19_open_line_list.csv\").then(function (data) {\r\n            data.forEach(d=>{\r\n                let tmp=d.date_confirmation.split('.');\r\n                let tmpstr=tmp[2]+'-'+tmp[1]+'-'+tmp[0];\r\n                if(dateMap.has(tmpstr)){\r\n                    dateMap.get(tmpstr).push([d.longitude,d.latitude])\r\n                }\r\n                else{\r\n                    dateMap.set(tmpstr,[]);\r\n                }\r\n            })\r\n            resolve('done');\r\n        })\r\n    })\r\n}\r\n\r\n\r\n\r\n\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n    longitude:  120.207057,\r\n    latitude: 30.225901,\r\n    zoom: 3,\r\n    pitch: 0,\r\n    bearing: 0\r\n};\r\n\r\nconst MS_PER_DAY = 8.64e7; // milliseconds in a day\r\n\r\nconst dataFilter = new DataFilterExtension({filterSize: 1});\r\n\r\nexport default class Covid extends Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //\r\n    //     const timeRange = this._getTimeRange(props.data);\r\n    //\r\n    //     this.state = {\r\n    //         timeRange,\r\n    //         filterValue: timeRange,\r\n    //         hoveredObject: null\r\n    //     };\r\n    //     this._onHover = this._onHover.bind(this);\r\n    //     this._renderTooltip = this._renderTooltip.bind(this);\r\n    // }\r\n    constructor(props) {\r\n        super(props);\r\n        // const [value, setValue] = React.useState([0]);\r\n        this.state = {\r\n            pointData:[],\r\n            days:days,\r\n            dayCount:0\r\n        };\r\n    }\r\n\r\n    // componentWillReceiveProps(nextProps) {\r\n    //     if (nextProps.data !== this.props.data) {\r\n    //         const timeRange = this._getTimeRange(nextProps.data);\r\n    //         this.setState({timeRange, filterValue: timeRange});\r\n    //     }\r\n    // }\r\n\r\n    // _getTimeRange(data) {\r\n    //     if (!data) {\r\n    //         return null;\r\n    //     }\r\n    //     return data.reduce(\r\n    //         (range, d) => {\r\n    //             const t = d.timestamp / MS_PER_DAY;\r\n    //             range[0] = Math.min(range[0], t);\r\n    //             range[1] = Math.max(range[1], t);\r\n    //             return range;\r\n    //         },\r\n    //         [Infinity, -Infinity]\r\n    //     );\r\n    // }\r\n\r\n    // _onHover({x, y, object}) {\r\n    //     this.setState({x, y, hoveredObject: object});\r\n    // }\r\n    _renderLayers() {\r\n\r\n        return [\r\n            // new ScatterplotLayer({\r\n            //     id: 'covid',\r\n            //     data:this.state.pointData,\r\n            //     opacity: 0.8,\r\n            //     radiusScale: 100,\r\n            //     radiusMinPixels: 1,\r\n            //     wrapLongitude: true,\r\n            //\r\n            //     getPosition: d =>d.coordinate,\r\n            //     getRadius: 500,\r\n            //     // getFillColor: d => {\r\n            //     //     const r = Math.sqrt(Math.max(d.depth, 0));\r\n            //     //     return [255 - r * 15, r * 5, r * 10];\r\n            //     // },\r\n            //\r\n            //     getFillColor:[255,0,0,255],\r\n            //\r\n            //     // getFilterValue: d => d.timestamp / MS_PER_DAY, // in days\r\n            //     // filterRange: [filterValue[0], filterValue[1]],\r\n            //     // filterSoftRange: [\r\n            //     //     filterValue[0] * 0.9 + filterValue[1] * 0.1,\r\n            //     //     filterValue[0] * 0.1 + filterValue[1] * 0.9\r\n            //     // ],\r\n            //     // extensions: [dataFilter],\r\n            //\r\n            //     pickable: true,\r\n            //     // onHover: this._onHover\r\n            // }),\r\n            new HeatmapLayer({\r\n                id:'heatmap',\r\n                data:this.state.pointData,\r\n                getPosition:d=>d.coordinate,\r\n                getWeight:10,\r\n                radiusPixels:20\r\n\r\n            })\r\n        ];\r\n    }\r\n\r\n    // _renderTooltip() {\r\n    //     const {x, y, hoveredObject} = this.state;\r\n    //     return (\r\n    //         hoveredObject && (\r\n    //             <div className=\"tooltip\" style={{top: y, left: x}}>\r\n    //                 <div>\r\n    //                     <b>Time: </b>\r\n    //                     <span>{new Date(hoveredObject.timestamp).toUTCString()}</span>\r\n    //                 </div>\r\n    //                 <div>\r\n    //                     <b>Magnitude: </b>\r\n    //                     <span>{hoveredObject.magnitude}</span>\r\n    //                 </div>\r\n    //                 <div>\r\n    //                     <b>Depth: </b>\r\n    //                     <span>{hoveredObject.depth} km</span>\r\n    //                 </div>\r\n    //             </div>\r\n    //         )\r\n    //     );\r\n    // }\r\n\r\n    _formatLabel(t) {\r\n        const date = new Date('2020-01-22');\r\n        date.setDate(date.getDate()+t);\r\n        return `${date.getFullYear()}/${date.getMonth()+1}/${date.getDate()}`;\r\n    }\r\n\r\n    render() {\r\n        const {mapStyle = 'mapbox://styles/mapbox/light-v9'} = this.props;\r\n        // const {timeRange, filterValue} = this.state;\r\n\r\n        return (\r\n            <Fragment>\r\n                <DeckGL\r\n                    views={MAP_VIEW}\r\n                    layers={this._renderLayers()}\r\n                    initialViewState={INITIAL_VIEW_STATE}\r\n                    controller={true}\r\n                >\r\n                    <StaticMap\r\n                        reuseMaps\r\n                        mapStyle={mapStyle}\r\n                        preventStyleDiffing={true}\r\n                        mapboxApiAccessToken={MAPBOX_TOKEN}\r\n                    />\r\n\r\n                    {/*{this._renderTooltip}*/}\r\n                </DeckGL>\r\n\r\n                <SliderCovid\r\n                    min={0}\r\n                    max={this.state.days}\r\n                    value={[0,this.state.dayCount]}\r\n                    formatLabel={this._formatLabel}\r\n\r\n                    onChange={({date,value}) => {\r\n                        console.log('value:',value)\r\n\r\n                        if(flag===-1){\r\n                            let p=getData();\r\n                            console.log(dateMap);\r\n                            p.then(result=>{\r\n                                let pointData=[];\r\n                                if(dateMap.has(date)){\r\n                                    dateMap.get(date).forEach(d=>{\r\n                                        console.log(d)\r\n                                        pointData.push({\r\n                                            coordinate:[parseFloat(d[0]),parseFloat(d[1])]\r\n                                        })\r\n                                    })\r\n                                    this.setState({\r\n                                        pointData:pointData,\r\n                                        dayCount:value[1]\r\n                                    })\r\n                                }\r\n\r\n                                flag=0;\r\n\r\n                            });\r\n\r\n                        }\r\n                        else{\r\n                            let pointData=[];\r\n\r\n                            if(dateMap.has(date)){\r\n                                dateMap.get(date).forEach(d=>{\r\n                                    pointData.push({\r\n                                        coordinate:[parseFloat(d[0]),parseFloat(d[1])]\r\n                                    })\r\n                                });\r\n                                this.setState({\r\n                                    pointData:pointData,\r\n                                    // dayCount:this.state.dayCount+1\r\n                                });\r\n                            }\r\n\r\n                            this.setState({\r\n                                dayCount:value[1]\r\n                            })\r\n                            console.log(this.state.pointData);\r\n                        }\r\n\r\n\r\n\r\n\r\n                        // let nowTime=value[1];\r\n                        // // console.log('nowTime:',nowTime);\r\n                        // if(Math.floor(nowTime/3600)!==this.state.hour){\r\n                        //     this.setState({hour:Math.floor(nowTime/3600)})\r\n                        //     console.log('nowztime:',nowTime);\r\n                        //     var hour=(nowTime/3600).toFixed(0);\r\n                        //     console.log('hour:',hour);\r\n                        //     var p=getRoute(hour);\r\n                        //     p.then(function() {\r\n                        //         this.setState({\r\n                        //             Route:Routes,\r\n                        //             depPolygon:depPolygon,\r\n                        //             desPolygon:desPolygon\r\n                        //         })\r\n                        //     }.bind(this))\r\n                        // }\r\n                        // this.setState({time: nowTime})\r\n                        // //console.log(this.state)\r\n                        // //console.log('value:',value)\r\n                    }}\r\n                />\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n// export function renderToDOM(container) {\r\n//     render(<App />, container);\r\n//     require('d3-request').csv(DATA_URL, (error, response) => {\r\n//         if (!error) {\r\n//             const data = response.map(row => ({\r\n//                 timestamp: new Date(`${row.DateTime} UTC`).getTime(),\r\n//                 latitude: Number(row.Latitude),\r\n//                 longitude: Number(row.Longitude),\r\n//                 depth: Number(row.Depth),\r\n//                 magnitude: Number(row.Magnitude)\r\n//             }));\r\n//             render(<App data={data} />, container);\r\n//         }\r\n//     });\r\n// }\r\n","import React, {Component, Fragment} from 'react';\r\nimport {render} from 'react-dom';\r\nimport {StaticMap} from 'react-map-gl';\r\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\r\n// import {HexagonLayer} from '@deck.gl/aggregation-layers';\r\nimport DeckGL from '@deck.gl/react';\r\nimport { Select,SIZE } from \"baseui/select\";\r\nimport{ColumnLayer} from \"@deck.gl/layers\";\r\n\r\nimport * as d3 from 'd3'\r\nimport {Provider as StyletronProvider} from \"styletron-react\";\r\nimport {BaseProvider, LightTheme, styled} from \"baseui\";\r\nimport SliderTraffic from \"./sliderTraffic\";\r\n\r\nimport {Client as Styletron} from 'styletron-engine-atomic';\r\nconst SelectContainer=styled('div',{\r\n    position: 'absolute',\r\n    // display: 'flex',\r\n    // justifyContent: 'center',\r\n    // alignItems: 'center',\r\n    zIndex: 1,\r\n    top: '50px',\r\n    right:'10px',\r\n    width:'20%',\r\n    height:'10%'\r\n});\r\nconst engine = new Styletron();\r\n\r\n// Set your mapbox token here\r\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w'; // eslint-disable-line\r\n\r\n// Source data CSV\r\n\r\nconst ambientLight = new AmbientLight({\r\n    color: [255, 255, 255],\r\n    intensity: 1.0\r\n});\r\n\r\nconst pointLight1 = new PointLight({\r\n    color: [255, 255, 255],\r\n    intensity: 1.0,\r\n    position: [0, 0, 80000]\r\n});\r\n\r\nconst pointLight2 = new PointLight({\r\n    color: [255, 255, 255],\r\n    intensity: 1.0,\r\n    position: [180, 0, 80000]\r\n});\r\n\r\nconst lightingEffect = new LightingEffect({ambientLight, pointLight1, pointLight2});\r\n\r\nlet qualityMap=new Map()\r\n\r\nfunction download(content, fileName, contentType) {\r\n    var a = document.createElement(\"a\");\r\n    var file = new Blob([content], {type: contentType});\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = fileName;\r\n    a.click();\r\n}\r\n\r\n// let maxpm10=0;\r\nfunction getData(){\r\n    return new Promise(resolve => {\r\n        d3.json(\"./air.json\").then(data=>{\r\n            console.log(data)\r\n            data.results.forEach(d=>{\r\n                // console.log('d',d);\r\n                if(d.coordinates){\r\n                    d.measurements.forEach(l=>{\r\n                        // if(l.value>maxpm10){\r\n                        //     maxpm10=l.value;\r\n                        // }\r\n                        // console.log(l)\r\n                        if(qualityMap.has(l.parameter)){\r\n                            qualityMap.get(l.parameter).push(\r\n                                {centroid: [d.coordinates.longitude,d.coordinates.latitude], value: l.value},\r\n                            )\r\n                        }\r\n                        else{\r\n                            qualityMap.set(l.parameter,[{centroid: [d.coordinates.longitude,d.coordinates.latitude], value: l.value}])\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n            // console.log('maxpm',maxpm10)\r\n            // qualityMap.get('pm10').forEach(d=>{\r\n            //     d.value=(d.value/maxpm10)*1000;\r\n            // })\r\n            resolve('0');\r\n        })\r\n    })\r\n}\r\n\r\n\r\n// let p=getData()\r\n// p.then(results=>{\r\n//     console.log('qulity',qualityMap)\r\n// })\r\n\r\n\r\nconst material = {\r\n    ambient: 0.64,\r\n    diffuse: 0.6,\r\n    shininess: 32,\r\n    specularColor: [51, 51, 51]\r\n};\r\n\r\nconst INITIAL_VIEW_STATE = {\r\n    longitude:  120.207057,\r\n    latitude: 30.225901,\r\n    // longitude:-74.00823,\r\n    // latitude: 40.71351,\r\n    zoom: 3,\r\n    pitch: 45,\r\n    bearing: 0\r\n\r\n};\r\n\r\nconst colorRange = [\r\n    [1, 152, 189],\r\n    [73, 227, 206],\r\n    [216, 254, 181],\r\n    [254, 237, 177],\r\n    [254, 173, 84],\r\n    [209, 55, 78]\r\n];\r\n\r\n\r\n/* eslint-disable react/no-deprecated */\r\nexport default class AirQuality extends Component {\r\n    static get defaultColorRange() {\r\n        return colorRange;\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data:[]\r\n        };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        let p=getData();\r\n        p.then(results=>{\r\n            this.setState({\r\n                data:[]\r\n            });\r\n            console.log('qualityMap:',qualityMap)\r\n        })\r\n        // this._animate();\r\n    }\r\n\r\n    _renderLayers() {\r\n\r\n\r\n        return [\r\n        //     new HexagonLayer({\r\n        //         id: 'heatmap',\r\n        //         colorRange,\r\n        //         coverage,\r\n        //         data,\r\n        //         elevationRange: [0, 3000],\r\n        //         elevationScale: data && data.length ? 50 : 0,\r\n        //         extruded: true,\r\n        //         getPosition: d => d,\r\n        //         onHover: this.props.onHover,\r\n        //         pickable: Boolean(this.props.onHover),\r\n        //         radius,\r\n        //         upperPercentile,\r\n        //         material,\r\n        //\r\n        //         transitions: {\r\n        //             elevationScale: 3000\r\n        //         }\r\n        //     })\r\n\r\n            new ColumnLayer({\r\n\r\n                    id: 'column-layer',\r\n                    data:this.state.data,\r\n                    diskResolution: 12,\r\n                    radius: 5000,\r\n                    extruded: true,\r\n                    pickable: true,\r\n                    elevationScale: 5000,\r\n                    getPosition: d => d.centroid,\r\n                    getFillColor: d => {\r\n                        let k=(Math.log(d.value)/Math.log(4)).toFixed(0);\r\n                        if(k<=5){\r\n                            return colorRange[k]\r\n                        }\r\n                        else{\r\n                            return colorRange[5]\r\n                        }\r\n                    },\r\n                    getLineColor: [0, 0, 0],\r\n                getElevation:d=>d.value,\r\n                transitions:{\r\n                    getElevation:{\r\n                        duration: 3000,\r\n                        // type: 'spring',\r\n                        // stiffness: 0.01,\r\n                        // damping: 0.15,\r\n                        // easing: d3.easeCubicInOut,\r\n                        enter: d => {\r\n                            console.log(d);\r\n                            let tmp=[];\r\n                            for(let i=0;i<300;i++){\r\n                                tmp.push(d[0]*i/300)\r\n                            }\r\n                            console.log(tmp)\r\n                            return tmp;\r\n                        },\r\n                    }\r\n                },\r\n\r\n                updateTriggers:{\r\n                    getElevation: [this.state.data],\r\n                }\r\n\r\n                // onHover: ({object, x, y}) => {\r\n                //     const tooltip = `height: ${object.value * 5000}m`;\r\n                //\r\n                // }\r\n            })\r\n         ];\r\n\r\n    }\r\n\r\n    render() {\r\n        const {mapStyle = 'mapbox://styles/mapbox/dark-v9'} = this.props;\r\n\r\n        return (\r\n            <Fragment>\r\n                <DeckGL\r\n                    layers={this._renderLayers()}\r\n                     effects={[lightingEffect]}\r\n                    initialViewState={INITIAL_VIEW_STATE}\r\n                    controller={true}\r\n                >\r\n                    <StaticMap\r\n                        reuseMaps\r\n                        mapStyle={mapStyle}\r\n                        preventStyleDiffing={true}\r\n                        mapboxApiAccessToken={MAPBOX_TOKEN}\r\n                    />\r\n                </DeckGL>\r\n                <StyletronProvider value={engine}>\r\n                    <BaseProvider theme={LightTheme}>\r\n                        <SelectContainer>\r\n                            <Select\r\n                                options={[\r\n                                    {label:\"pm10\",id:'pm10'},\r\n                                    {label:\"pm25\",id:'pm25'},\r\n                                    { label: \"co\", id: \"co\" },\r\n                                    { label: \"no2\", id: \"no2\" },\r\n                                    { label: \"so2\", id: \"so2\" },\r\n                                    { label: \"o3\", id: \"o3\" },\r\n                                    { label: \"bc\", id: \"bc\" },\r\n                                ]}\r\n                                value={this.state.label}\r\n                                placeholder=\"选择污染类型\"\r\n                                // onChange={params => setValue(params.value)}\r\n                                size={SIZE.mini}\r\n                                clearable={true}\r\n                                onChange={parems=> {\r\n\r\n                                    this.setState({\r\n                                        data:qualityMap.get(parems.option.id),\r\n                                        label:{label:parems.option.label,id:parems.option.id}\r\n                                    })\r\n\r\n                                    // if(parems.option.id=='pm10'){\r\n                                    //     this.setState({\r\n                                    //         data:qualityMap.get()\r\n                                    //         label:{label:\"pm10\",id:'pm10'}\r\n                                    //     })\r\n                                    // }\r\n                                    // else if(parems.option.id=='pm25'){\r\n                                    //     this.setState({\r\n                                    //\r\n                                    //         label:{label:\"pm25\",id:'pm25'}\r\n                                    //     })\r\n                                    // }\r\n                                    // else{\r\n                                    //     this.setState({\r\n                                    //         desV:false,\r\n                                    //         depV:false,\r\n                                    //         area:{ label: \"隐藏\", id: \"\" }\r\n                                    //     })\r\n                                    // }\r\n                                }}\r\n                            />\r\n                        </SelectContainer>\r\n                    </BaseProvider>\r\n                </StyletronProvider>\r\n            </Fragment>\r\n\r\n\r\n\r\n    );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nexport const Marks = ({\r\n                          data,\r\n                          xScale,\r\n                          xValue,\r\n                          yScale,\r\n                          innerHeight,\r\n                          innerWidth,\r\n                          margin,\r\n                          keys,\r\n                            start,\r\n                          callback\r\n                      }) =>{\r\n\r\n    const svg=d3.select('svg');\r\n\r\n    let stack = d3.stack()//\r\n        .offset(d3.stackOffsetWiggle)\r\n        .order(d3.stackOrderNone);\r\n\r\n\r\n    var colorScale = d3.scaleOrdinal()\r\n        .range(d3.schemeCategory10);\r\n\r\n    var area = d3.area()\r\n        .x(d => xScale(xValue(d.data))+margin.left)\r\n        .y0(d => (yScale(d[0])+margin.top))\r\n        .y1(d => (yScale(d[1])+margin.top))\r\n        .curve(d3.curveBasis);\r\n\r\n\r\n    if(data){\r\n        data=data.slice(start,start+24);\r\n        // console.log(keys)\r\n        stack.keys(keys);\r\n        // console.log('data',data);\r\n        let stacked=stack(data);\r\n        // console.log('stack',stacked);\r\n\r\n        colorScale.domain(d3.range(keys.length));\r\n\r\n        xScale\r\n            .domain(d3.extent(data, xValue))\r\n            .range([0, innerWidth]);\r\n        yScale\r\n            .domain([\r\n                d3.min(stacked, function (series) {\r\n                    return d3.min(series, function (d) { return d[0]; });\r\n                }),\r\n                d3.max(stacked, function (series) {\r\n                    return d3.max(series, function (d) { return d[1]; });\r\n                })\r\n            ])\r\n            .range([ innerHeight,0]);\r\n\r\n        let p=svg.selectAll('path')\r\n            .data(stacked)\r\n            .join('path')\r\n            .attr('fill', function (d) {\r\n                // console.log('d',d)\r\n                // console.log(d[0].data[d.index]);\r\n                return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n            })\r\n            .attr('stroke', function (d) { return d3.interpolateSpectral(keys.indexOf(d[0].data[d.index]/8)); })\r\n            .transition()\r\n            .duration(2000)\r\n            .attr('d', area)\r\n            .end();\r\n\r\n        p.then(r=>{\r\n            callback()\r\n        })\r\n    }\r\n\r\n    return null;\r\n\r\n}\r\n","import './stream.css'\r\nimport * as d3 from 'd3'\r\nimport React, { useState, useCallback, useEffect,Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {useData} from './useData'\r\nimport {AxisBottom} from \"../city/AxisBottom\";\r\nimport {AxisLeft} from \"../city/AxisLeft\";\r\nimport {Marks} from \"./Marks\"\r\nimport {ColorLegend} from \"../city/ColorLegend\";\r\n\r\nconst width = 960;\r\nconst height = 500;\r\nconst margin = { top: 20, right: 200, bottom: 65, left: 150 };\r\nvar innerWidth = width - margin.right - margin.left;\r\nvar innerHeight = height - margin.top - margin.bottom;\r\nconst xAxisLabel = 'Time';\r\nconst yAxisLabel='Light';\r\nconst siFormat = d3.format('.2s');\r\nconst xAxisLabelOffset = 50;\r\nconst yAxisLabelOffset = 70;\r\nconst xAxisTickFormat = tickValue => siFormat(tickValue).replace('G', 'B');\r\n\r\n//画河流图需要data和keys\r\n/*\r\n*data format data is a list\r\n* [{\r\n*   xvalue:x\r\n*   key1: k1\r\n*   key2: k2\r\n*   ...\r\n* }\r\n* ,\r\n* {\r\n*   ...\r\n* }\r\n* ...\r\n* ]\r\n*\r\n* keys 就是data中所有的key的集合\r\n*\r\n* */\r\n\r\nexport function StreamG(){\r\n\r\n\r\n    const [data,keys]=useData();\r\n    const [start,setStart]=useState(19)\r\n\r\n\r\n\r\n\r\n\r\n    var xValue = function (d) { return new Date(d.date).getHours(); };\r\n    var xScale = d3.scaleLinear();\r\n    var yScale = d3.scaleLinear();\r\n\r\n\r\n    // var xAxisMajor = d3.axisBottom().scale(xScale);\r\n    // var xAxisMinor = d3.axisBottom().scale(xScale).ticks(50);\r\n//设置标志列表\r\n    const circleRadius = 7;\r\n    const colorLegendLabel='city'\r\n    const colorScale = d3.scaleOrdinal()\r\n    let range=[];\r\n    if(keys){\r\n        keys.forEach((d,i)=>{\r\n                range.push(d3.interpolateSpectral(i/8))\r\n            }\r\n        )\r\n        colorScale.domain(keys)\r\n            .range(range)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return <div className={'stream'} >\r\n        <svg height={height} width={width} >\r\n            <g transform={`translate(${margin.left},${margin.top})`}>\r\n                <g transform={`translate(${innerWidth + 60}, 60)`}>\r\n                    <text x={35} y={-25} className=\"axis-label\" textAnchor=\"middle\" style={{'fill':'#FFFFFF'}}>\r\n                        {colorLegendLabel}\r\n                    </text>\r\n                    <ColorLegend\r\n                        tickSpacing={22}\r\n                        tickSize={10}\r\n                        tickTextOffset={12}\r\n                        tickSize={circleRadius}\r\n                        colorScale={colorScale}\r\n                        // onHover={setHoveredValue}\r\n                        // hoveredValue={hoveredValue}\r\n                        // fadeOpacity={fadeOpacity}\r\n                    />\r\n                </g>\r\n                <Marks data={data}\r\n                       start={start}\r\n                       keys={keys}\r\n                       xScale={xScale}\r\n                       xValue={xValue}\r\n                       yScale={yScale}\r\n                       margin={margin}\r\n                       innerHeight={innerHeight}\r\n                       innerWidth={innerWidth}\r\n                       callback={()=>{\r\n                           if(start+24<139){\r\n                               console.log(data.length,start+24)\r\n                               setStart(start+24)\r\n                           }\r\n                           else{\r\n                               setStart(19)\r\n                           }\r\n                       }}\r\n                >\r\n\r\n                </Marks>\r\n                <AxisBottom\r\n                    xScale={xScale}\r\n                    innerHeight={innerHeight}\r\n                    tickFormat={xAxisTickFormat}\r\n                    tickOffset={2}\r\n                />\r\n                <text\r\n                    className=\"axis-label\"\r\n                    textAnchor=\"middle\"\r\n                    transform={`translate(${-yAxisLabelOffset},${innerHeight /\r\n                    2}) rotate(-90)`}\r\n                >\r\n                    {yAxisLabel}\r\n                </text>\r\n                {/*<AxisLeft yScale={yScale} innerWidth={innerWidth} tickOffset={5} />*/}\r\n                <text\r\n                    className=\"axis-label\"\r\n                    x={innerWidth / 2}\r\n                    y={innerHeight + xAxisLabelOffset}\r\n                    textAnchor=\"middle\"\r\n                >\r\n                    {xAxisLabel}\r\n                </text>\r\n            </g>\r\n        </svg>\r\n    </div>\r\n\r\n\r\n}\r\n","import * as d3 from 'd3'\r\nimport {useEffect, useState} from \"react\";\r\n\r\nexport function useData(props) {\r\n    const [data,setData]=useState(null);\r\n    const [keys,setKey]=useState(null)\r\n    //画河流图需要data和keys\r\n    /*\r\n    *data format data is a list\r\n    * [{\r\n    *   xvalue:x\r\n    *   key1: k1\r\n    *   key2: k2\r\n    *   ...\r\n    * }\r\n    * ,\r\n    * {\r\n    *   ...\r\n    * }\r\n    * ...\r\n    * ]\r\n    *\r\n    * keys 就是data中所有的key的集合\r\n    *\r\n    * */\r\n    useEffect(()=>{\r\n       d3.csv(\"./data-city-oneweek.csv\").then(d=>{\r\n           let tmpK=[];\r\n           d.forEach(d=>{\r\n\r\n               if(tmpK.indexOf(d.city)===-1){\r\n                   tmpK.push(d.city)\r\n               }\r\n           });\r\n           setKey(tmpK);\r\n           //nest 怎么早没想到用d3的工具呢\r\n            let tmp=d3.nest()\r\n                .key(d=>d.timestamp)\r\n                .entries(d)\r\n            let tmpD=[];\r\n            tmp.forEach(d=>{\r\n                let t={};\r\n                t.date=d.key;\r\n                d.values.forEach(d=>{\r\n                    t[d.city]=d.light;\r\n                })\r\n                tmpD.push(t);\r\n            });\r\n            console.log('tmpD',tmpD);\r\n            tmpD.slice(5,19).forEach(d=>{\r\n                console.log(d.date)\r\n                    console.log(new Date(d.date).getHours())\r\n                    console.log(new Date(d.date))\r\n            }\r\n\r\n            )\r\n            setData(tmpD);\r\n           // setData(tmpD.slice(19,19+24));\r\n       })\r\n    },[]);\r\n\r\n        return [data,keys]\r\n}\r\n","import React from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nexport const Marks = ({\r\n                          data,\r\n                          xScale,\r\n                          xValue,\r\n                          yScale,\r\n                          innerHeight,\r\n                          innerWidth,\r\n                          margin,\r\n                          keys,\r\n                            start,\r\n                          callback\r\n                      }) =>{\r\n\r\n    const svg=d3.select('svg');\r\n\r\n    const xLength=24;\r\n    const getTime=d=>{\r\n        let date=new Date(d.date);\r\n        let hour=date.getHours();\r\n        let day=date.getDate();\r\n        return day+'/'+hour+':00'\r\n\r\n    }\r\n\r\n    const delay=1000;\r\n\r\n    let stack = d3.stack()//\r\n        .offset(d3.stackOffsetNone)\r\n        .order(d3.stackOrderNone);\r\n\r\n\r\n    var colorScale = d3.scaleOrdinal()\r\n        .range(d3.schemeCategory10);\r\n\r\n    var area = d3.area()\r\n        .x(d => xScale(xValue(d.data))+margin.left)\r\n        .y0(d => (yScale(d[0])+margin.top))\r\n        .y1(d => (yScale(d[1])+margin.top))\r\n        .curve(d3.curveBasis);\r\n\r\n\r\n    if(data){\r\n        data=data.slice(19,139);\r\n        // console.log(keys)\r\n        stack.keys(keys);\r\n        // console.log('data',data);\r\n        let stacked=stack(data);\r\n        // console.log('stack',stacked);\r\n\r\n        colorScale.domain(d3.range(keys.length));\r\n\r\n        xScale\r\n            .domain(d3.extent(data, xValue))\r\n            .range([0, innerWidth]);\r\n        yScale\r\n            .domain([\r\n                d3.min(stacked, function (series) {\r\n                    return d3.min(series, function (d) { return d[0]; });\r\n                }),\r\n                d3.max(stacked, function (series) {\r\n                    return d3.max(series, function (d) { return d[1]; });\r\n                })\r\n            ])\r\n            .range([ innerHeight,0]);\r\n\r\n\r\n        let rectData=[];\r\n//stack的数据结构：\r\n//      //数组里面7个元素分别对应7个地点\r\n//      //每个元素又是一个数组有24个元素分别对应24小时\r\n/*       (7) [Array(24), Array(24), Array(24), Array(24), Array(24), Array(24), Array(24)]\r\n0: Array(24)\r\n0: (2) [0, 19.3671431509997, data: {…}, key: \"San Francisco\"]\r\n1: (2) [0, 20.8082012083461, data: {…}, key: \"San Francisco\"]\r\n2: (2) [0, 22.5238576663828, data: {…}, key: \"San Francisco\"]\r\n3: (2) [0, 24.4214051463704, data: {…}, key: \"San Francisco\"]\r\n4: (2) [0, 26.2049693716955, data: {…}, key: \"San Francisco\"]\r\n5: (2) [0, 26.579802484894, data: {…}, key: \"San Francisco\"]\r\n6: (2) [0, 26.5525094442272, data: {…}, key: \"San Francisco\"]\r\n7: (2) [0, 23.9758724990251, data: {…}, key: \"San Francisco\"]\r\n8: (2) [0, 20.7705334007582, data: {…}, key: \"San Francisco\"]\r\n9: (2) [0, 19.5826361563267, data: {…}, key: \"San Francisco\"]\r\n10: (2) [0, 18.7265399946616, data: {…}, key: \"San Francisco\"]\r\n11: (2) [0, 18.2886029132647, data: {…}, key: \"San Francisco\"]\r\n12: (2) [0, 17.4904771411586, data: {…}, key: \"San Francisco\"]\r\n13: (2) [0, 17.1831430954037, data: {…}, key: \"San Francisco\"]\r\n14: (2) [0, 17.2898856656444, data: {…}, key: \"San Francisco\"]\r\n15: (2) [0, 17.8578100360021, data: {…}, key: \"San Francisco\"]\r\n16: (2) [0, 18.1992192220978, data: {…}, key: \"San Francisco\"]\r\n17: (2) [0, 18.13420905954, data: {…}, key: \"San Francisco\"]\r\n18: (2) [0, 18.5888149684944, data: {…}, key: \"San Francisco\"]\r\n19: (2) [0, 18.6733003026984, data: {…}, key: \"San Francisco\"]\r\n20: (2) [0, 19.1600833190036, data: {…}, key: \"San Francisco\"]\r\n21: (2) [0, 19.207095797011, data: {…}, key: \"San Francisco\"]\r\n22: (2) [0, 18.9847082241235, data: {…}, key: \"San Francisco\"]\r\n23: (2) [0, 19.4293802064908, data: {…}, key: \"San Francisco\"]\r\nkey: \"San Francisco\"\r\nindex: 0\r\nlength: 24\r\n__proto__: Array(0)\r\n1: (24) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), key: \"Bangalore\", index: 1]\r\n2: (24) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), key: \"Boston\", index: 2]\r\n3: (24) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), key: \"Geneva\", index: 3]\r\n4: (24) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), key: \"Rio de Janeiro\", index: 4]\r\n5: (24) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), key: \"Shanghai\", index: 5]\r\n6: (24) [Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), Array(2), key: \"Singapore\", index: 6]\r\nlength: 7\r\n__proto__: Array(0)*/\r\n//\r\n//把 stack 再转换成按时间分组的数据，其实data就是按时间分组的，但是为了计算出堆叠出来的数据所以用的了stack\r\n        stacked.map(x=>{\r\n            x.map((t,index)=>{\r\n                t.key=x.key;\r\n                if(rectData[index]===undefined){\r\n                    rectData[index]=[]\r\n                }\r\n                rectData[index].push(t);\r\n            })\r\n        })\r\n\r\n        // console.log('rectData',rectData)\r\n\r\n\r\n        const group=svg.append('g');\r\n        const g2=svg.append('g');\r\n        let count=0;\r\n        let tmpData=[];\r\n\r\n\r\n        let groupCount=[];\r\n\r\n        // tmpData.forEach(d=>{d.n=tmpData.indexOf(d)})\r\n        let testData=[];\r\n\r\n        function update(){\r\n            let popNum=0;\r\n            groupCount.unshift(rectData[count].length);\r\n            if(groupCount.length>xLength){\r\n                // console.log('24')\r\n                popNum=groupCount.pop()\r\n            }\r\n            //tmpData 里面是每一个小矩形的数据(到目前为止所有插入的矩形)，如何对这些矩形计数呢从而和时间对应\r\n            //无论你有多少数据我都只取前24组时间内的数据//不对啊我这样做出来的效果并不是时间轴跟着动而是这个温度变成下一个时刻的温度这样的动态效果，最好试用的例子是不同年龄段的人随着时间变化的过程，并不是温度\r\n            rectData[count].forEach(d=>{\r\n                    d.count=count;\r\n                    tmpData.unshift(d)\r\n                }\r\n            );\r\n\r\n            testData.unshift(\r\n                    rectData[count]\r\n\r\n                );\r\n            // console.log('testData',xValue(testData[0][0].data))\r\n            if(testData.length>xLength)testData.pop();\r\n            // console.log('testData',testData)\r\n            let g=g2.selectAll('g').data(testData).enter().append('g');\r\n            // console.log('g',g);\r\n            // let g3=g.enter().append('g');\r\n            // g3.append('text').attr('x',d=>xScale(xValue(d[0].data))+margin.left).attr('y',d=>yScale(d[0][1])+margin.top).text(d=>xValue(d[0].data))\r\n            let g4=g2.selectAll('g')\r\n                .selectAll('rect')\r\n                .data(d=>d)\r\n                .join(\r\n                    enter=>enter.append('rect')\r\n                        .attr('fill', function (d) {\r\n                            return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n                        })\r\n                        .attr('x', d =>{\r\n                            // console.log('x',xScale(xValue(d.data))+margin.left)\r\n                            return xScale(xValue(d.data))+margin.left-5\r\n                        } )\r\n                        .attr('y',d => (yScale(d[1])+margin.top))\r\n                        .attr('height',d=>(yScale(d[0])-yScale(d[1]))),\r\n\r\n                    update=>update\r\n                    //     .attr('x',d=>{\r\n                    //     console.log(this)\r\n                    //     if(d.count===count&&d.count>=xLength){\r\n                    //         return xScale(xValue(d.data))+margin.left\r\n                    //     }\r\n                    //     else return this.x\r\n                    // })\r\n                )\r\n\r\n                // .attr('cx',(d,i,node)=>{\r\n                //     console.log('node',node);\r\n                //     if(xValue(d.data)===0&&i!==0)\r\n                //         return xScale(xValue(d.data))+margin.left\r\n                //     else return(node[i].cx)\r\n                // })\r\n            g4.filter((d,i)=>{\r\n                return xValue(d.data)===0\r\n            }).attr('fill', function (d) {\r\n                // console.log('count',d.count)\r\n                return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n            })\r\n                .attr('x', d =>{\r\n                    // console.log('next!!')\r\n                    return xScale(xValue(d.data))+margin.left-5\r\n                } )\r\n                .attr('y',d => (yScale(d[1])+margin.top))\r\n                // .attr('height',d=>(yScale(d[0])-yScale(d[1])))\r\n                .attr('width',0)\r\n\r\n\r\n            let p1=g4.transition()\r\n                .duration(delay)\r\n                .attr('fill', function (d) {\r\n                    return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n                })\r\n                .attr('x', d =>{\r\n                    // console.log('x',xScale(xValue(d.data))+margin.left)\r\n                    return xScale(xValue(d.data))+margin.left-5\r\n                } )\r\n                .attr('y',d => (yScale(d[1])+margin.top))\r\n                .attr('height',d=>(yScale(d[0])-yScale(d[1])))\r\n                .attr('width',10)\r\n                .end()\r\n\r\n            let g5=g2.selectAll('g').selectAll('text')\r\n                .data(d=>d)\r\n                .join('text')\r\n                .text((d,i,node)=>{\r\n                    // console.log('d12',d);\r\n                    if (i===6) return getTime(d.data);\r\n                    else return null\r\n                })\r\n                .attr('dy',\".2em\")\r\n                .attr('font-size',\"8\")\r\n\r\n\r\n            g5.filter(d=>{\r\n                return xValue(d.data)===0\r\n            }).attr('x',d=>xScale(xValue(d.data))+margin.left-12)\r\n                .attr('y',d=>yScale(d[1])+margin.top)\r\n\r\n            g5.transition()\r\n                .duration(delay)\r\n                .attr('x',d=>xScale(xValue(d.data))+margin.left-12)\r\n                .attr('y',d=>yScale(d[1])+margin.top)\r\n            // g3.selectAll('circle').data(d=>d).enter().append('circle')\r\n            //     .transition()\r\n            //     .duration(2000)\r\n            //     .attr('r',10).attr('cy',d=>yScale(d[1])+margin.top).attr('cx',d=>xScale(xValue(d.data))+margin.left);\r\n\r\n            // console.log('g3',)\r\n\r\n\r\n\r\n\r\n\r\n            //如果界面满了就不再增加数据量\r\n            for(let i=0;i<popNum;i++){\r\n                tmpData.pop()\r\n            }\r\n            let t=[];\r\n            tmpData.forEach((d,index)=>{\r\n                let m=[d[0],d[1]];\r\n                m.data=d.data;\r\n                m.key=d.key;\r\n                m.n=index;\r\n                m.count=d.count\r\n                t.push(m)\r\n            });\r\n            console.log('t.len',t.length)\r\n\r\n\r\n\r\n\r\n            // console.log('t',t);\r\n            // console.log('tmpData',tmpData);\r\n            // let s1=group.selectAll('rect')\r\n            //     .data(t,d=>d.n)\r\n            // .join(\r\n            //         enter=>enter.append('rect')\r\n            //             .attr('fill', function (d) {\r\n            //                 return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n            //             })\r\n            //             .attr('x', d =>{\r\n            //                 // console.log('x',xScale(xValue(d.data))+margin.left)\r\n            //                 return xScale(xValue(d.data))+margin.left\r\n            //             } )\r\n            //             .attr('y',d => (yScale(d[1])+margin.top))\r\n            //             .attr('height',d=>(yScale(d[0])-yScale(d[1]))),\r\n            //\r\n            //         update=>update\r\n            //         //     .attr('x',d=>{\r\n            //         //     console.log(this)\r\n            //         //     if(d.count===count&&d.count>=xLength){\r\n            //         //         return xScale(xValue(d.data))+margin.left\r\n            //         //     }\r\n            //         //     else return this.x\r\n            //         // })\r\n            //     )\r\n            // //要选择的是坐标轴最后一个数据而不是最新的数据！！！而最后一个的当前数据的时间是0点\r\n            // let f=group.selectAll('rect')\r\n            //     .filter(d=>xValue(d.data)===0&&d.count>1)\r\n            //     .attr('fill', function (d) {\r\n            //         // console.log('count',d.count)\r\n            //         return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n            //     })\r\n            //     .attr('x', d =>{\r\n            //         // console.log('next!!')\r\n            //         return xScale(xValue(d.data))+margin.left\r\n            //     } )\r\n            //     .attr('y',d => (yScale(d[1])+margin.top))\r\n            //     // .attr('height',d=>(yScale(d[0])-yScale(d[1])))\r\n            //      .attr('width',0)\r\n            //\r\n            // let p1=s1.transition()\r\n            //     .duration(800)\r\n            //     .attr('fill', function (d) {\r\n            //         return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n            //     })\r\n            //     .attr('x', d =>{\r\n            //         // console.log('x',xScale(xValue(d.data))+margin.left)\r\n            //         return xScale(xValue(d.data))+margin.left\r\n            //     } )\r\n            //     .attr('y',d => (yScale(d[1])+margin.top))\r\n            //     .attr('height',d=>(yScale(d[0])-yScale(d[1])))\r\n            //     .attr('width',10)\r\n            //     .end()\r\n            // let p2=s1.enter().append('rect')\r\n            //     .attr('fill', function (d) {\r\n            //         return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n            //     })\r\n            //     .attr('x', d =>{\r\n            //         // console.log('x',xScale(xValue(d.data))+margin.left)\r\n            //         return xScale(xValue(d.data))+margin.left\r\n            //     } )\r\n            //     .attr('y',d => (yScale(d[1])+margin.top))\r\n            //     .attr('height',d=>(yScale(d[0])-yScale(d[1])))\r\n            //     // .attr('stroke', function (d) { return d3.interpolateSpectral(keys.indexOf(d[0].data[d.index]/8)); })\r\n            //     // .transition()\r\n            //     // .duration(2000)\r\n            //     .transition()\r\n            //     .duration(1000)\r\n            //     .attr('width',10)\r\n            //     .end();\r\n\r\n\r\n\r\n             // let p2= p.enter().append('rect')\r\n             //      .attr('fill', function (d) {\r\n             //    return d3.interpolateSpectral(keys.indexOf(d.key)/8);\r\n             //    })\r\n             //    .transition()\r\n             //    .duration(2000)\r\n             //    .attr('x', d =>{\r\n             //        console.log('x',xScale(xValue(d.data))+margin.left)\r\n             //        return xScale(xValue(d.data))+margin.left\r\n             //    } )\r\n             //    .attr('y',d => (yScale(d[1])+margin.top))\r\n             //    .attr('height',d=>(yScale(d[0])-yScale(d[1])))\r\n             //    // .attr('stroke', function (d) { return d3.interpolateSpectral(keys.indexOf(d[0].data[d.index]/8)); })\r\n             //    // .transition()\r\n             //    // .duration(2000)\r\n             //    .attr('width',10)\r\n             //     .end()\r\n            p1.then(()=>{\r\n                if(count<(rectData.length-1)){\r\n                    // let p2=group.transition()\r\n                    //     .duration(1000)\r\n                    //     .attr(\"transform\", `translate(${xScale(1)-xScale(0)},0)`)\r\n                    //     .end()\r\n                    // p2.then(()=>{\r\n                        count++;\r\n                        // tmpData=tmpData.slice(0,2);\r\n\r\n                    // console.log('tmpData1',tmpData);\r\n                    // console.log('t1',t)\r\n                        update()\r\n                        // }\r\n                    // )\r\n\r\n                }\r\n                else{\r\n                    // callback()\r\n                    // count=0;\r\n                }\r\n            })\r\n        }\r\n\r\n        update();\r\n\r\n        // stacked.map((x,index)=>{\r\n        //     // if(index!==0){\r\n        //     //     return\r\n        //     // }\r\n        //     svg.selectAll('rect')\r\n        //         .data(x)\r\n        //\r\n        // })\r\n        // let p=\r\n        //     .end();\r\n\r\n        // p.then(r=>{\r\n        //     callback()\r\n        // })\r\n    }\r\n\r\n    return null;\r\n\r\n}\r\n","import * as d3 from 'd3'\r\nimport React, { useState, useCallback, useEffect,Fragment } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {useData} from './useData'\r\nimport {AxisBottom} from \"../city/AxisBottom\";\r\nimport {AxisLeft} from \"../city/AxisLeft\";\r\nimport {Marks} from \"./Marks\"\r\nimport {ColorLegend} from \"../city/ColorLegend\";\r\nconst width = 960;\r\nconst height = 500;\r\nconst margin = { top: 20, right: 200, bottom: 65, left: 150 };\r\nvar innerWidth = width - margin.right - margin.left;\r\nvar innerHeight = height - margin.top - margin.bottom;\r\nconst xAxisLabel = 'Time';\r\nconst yAxisLabel='Light';\r\nconst siFormat = d3.format('.2s');\r\nconst xAxisLabelOffset = 50;\r\nconst yAxisLabelOffset = 70;\r\nconst xAxisTickFormat = tickValue => siFormat(tickValue).replace('G', 'B');\r\n//画河流图需要data和keys\r\n/*\r\n*data format data is a list\r\n* [{\r\n*   xvalue:x\r\n*   key1: k1\r\n*   key2: k2\r\n*   ...\r\n* }\r\n* ,\r\n* {\r\n*   ...\r\n* }\r\n* ...\r\n* ]\r\n*\r\n* keys 就是data中所有的key的集合\r\n*\r\n* */\r\n\r\nexport function BarG(){\r\n\r\n\r\n    const [data,keys]=useData();\r\n    const [start,setStart]=useState(19)\r\n\r\n\r\n\r\n\r\n\r\n    var xValue = function (d) { return new Date(d.date).getHours(); };\r\n    var xScale = d3.scaleLinear();\r\n    var yScale = d3.scaleLinear();\r\n\r\n\r\n\r\n\r\n    // var xAxisMajor = d3.axisBottom().scale(xScale);\r\n    // var xAxisMinor = d3.axisBottom().scale(xScale).ticks(50);\r\n\r\n    const circleRadius = 7;\r\n    const colorLegendLabel='city'\r\n    const colorScale = d3.scaleOrdinal()\r\n    let range=[];\r\n    if(keys){\r\n        keys.forEach((d,i)=>{\r\n                range.push(d3.interpolateSpectral(i/8))\r\n            }\r\n        )\r\n        colorScale.domain(keys)\r\n            .range(range)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    return <Fragment>\r\n        <svg height={height} width={width}>\r\n            <g transform={`translate(${margin.left},${margin.top})`}>\r\n                <g transform={`translate(${innerWidth + 60}, 60)`}>\r\n                    <text x={35} y={-25} className=\"axis-label\" textAnchor=\"middle\">\r\n                        {colorLegendLabel}\r\n                    </text>\r\n                    <ColorLegend\r\n                        tickSpacing={22}\r\n                        tickSize={10}\r\n                        tickTextOffset={12}\r\n                        tickSize={circleRadius}\r\n                        colorScale={colorScale}\r\n                        // onHover={setHoveredValue}\r\n                        // hoveredValue={hoveredValue}\r\n                        // fadeOpacity={fadeOpacity}\r\n                    />\r\n                </g>\r\n                <Marks data={data}\r\n                       start={start}\r\n                       keys={keys}\r\n                       xScale={xScale}\r\n                       xValue={xValue}\r\n                       yScale={yScale}\r\n                       margin={margin}\r\n                       innerHeight={innerHeight}\r\n                       innerWidth={innerWidth}\r\n                       callback={()=>{\r\n                           if(start+24<139){\r\n                               console.log(data.length,start+24)\r\n                               setStart(start+24)\r\n                           }\r\n                           else{\r\n                               setStart(19)\r\n                           }\r\n                       }}\r\n                >\r\n\r\n                </Marks>\r\n                <AxisBottom\r\n                    xScale={xScale}\r\n                    innerHeight={innerHeight}\r\n                    tickFormat={xAxisTickFormat}\r\n                    tickOffset={2}\r\n                />\r\n                <text\r\n                    className=\"axis-label\"\r\n                    textAnchor=\"middle\"\r\n                    transform={`translate(${-yAxisLabelOffset},${innerHeight /\r\n                    2}) rotate(-90)`}\r\n                >\r\n                    {yAxisLabel}\r\n                </text>\r\n                {/*<AxisLeft yScale={yScale} innerWidth={innerWidth} tickOffset={5} />*/}\r\n                <text\r\n                    className=\"axis-label\"\r\n                    x={innerWidth / 2}\r\n                    y={innerHeight + xAxisLabelOffset}\r\n                    textAnchor=\"middle\"\r\n                >\r\n                    {xAxisLabel}\r\n                </text>\r\n            </g>\r\n        </svg>\r\n    </Fragment>\r\n}\r\n","import * as d3 from 'd3'\r\nimport {useEffect, useState} from \"react\";\r\n\r\nexport function useData(props) {\r\n    const [data,setData]=useState(null);\r\n    const [keys,setKey]=useState(null)\r\n    //画河流图需要data和keys\r\n    /*\r\n    *data format data is a list\r\n    * [{\r\n    *   xvalue:x\r\n    *   key1: k1\r\n    *   key2: k2\r\n    *   ...\r\n    * }\r\n    * ,\r\n    * {\r\n    *   ...\r\n    * }\r\n    * ...\r\n    * ]\r\n    *\r\n    * keys 就是data中所有的key的集合\r\n    *\r\n    * */\r\n    useEffect(()=>{\r\n       d3.csv(\"./data-city-oneweek.csv\").then(d=>{\r\n           let tmpK=[];\r\n           d.forEach(d=>{\r\n\r\n               if(tmpK.indexOf(d.city)===-1){\r\n                   tmpK.push(d.city)\r\n               }\r\n           });\r\n           setKey(tmpK);\r\n           //nest 怎么早没想到用d3的工具呢\r\n            let tmp=d3.nest()\r\n                .key(d=>d.timestamp)\r\n                .entries(d)\r\n\r\n            let tmpD=[];\r\n            tmp.forEach(d=>{\r\n                let t={};\r\n                t.date=d.key;\r\n                d.values.forEach(d=>{\r\n                    t[d.city]=d.light;\r\n                })\r\n                tmpD.push(t);\r\n            });\r\n            console.log('tmpD',tmpD);\r\n            tmpD.slice(5,19).forEach(d=>{\r\n                console.log(d.date)\r\n                    console.log(new Date(d.date).getHours())\r\n                    console.log(new Date(d.date))\r\n            }\r\n            )\r\n            setData(tmpD);\r\n           // setData(tmpD.slice(19,19+24));\r\n       })\r\n    },[]);\r\n\r\n        return [data,keys]\r\n}\r\n","import * as d3 from 'd3'\r\nimport React, {useState, useCallback, useEffect, Fragment, Component} from 'react';\r\n\r\n\r\nconst width = 960;\r\nconst height = 500;\r\nconst margin = { top: 20, right: 200, bottom: 65, left: 150 };\r\nvar innerWidth = width - margin.right - margin.left;\r\nvar innerHeight = height - margin.top - margin.bottom;\r\n\r\nconst countrylist=['China','US'];\r\nconst totalTime=10000;\r\n// let currentTime=new Date(2020,1,22);\r\n\r\nconst yScale = d3.scaleLinear()\r\n    .domain([0, 100000])\r\n    .range([innerHeight, 0]);\r\nconst yAxisGenerator = d3.axisLeft(yScale)\r\n    // .tickValues(d3.range(0, 3, 5));\r\n    let xdomain=[new Date(2020, 0, 22), new Date(2020, 4, 1)];\r\n    let xScale=d3.scaleTime()\r\n        .domain(xdomain)\r\n        .range([0, innerWidth]);\r\n    const xAxisGenerator = d3.axisBottom()\r\n\r\n\r\n    let covidMap=new Map();\r\n    //数据格式\r\n//{\r\n//  {\r\n//  {\r\n//  'country':{\r\n//      time1:\r\n//      time2:\r\n//      ...\r\n//  }\r\n//\r\n//  }\r\n//}\r\n    let dateKey=[];\r\n    let sorted=new Map();\r\n    let dataFlow=[];\r\n\r\n    let lineData=[]\r\n    function getCovid() {\r\n        return new Promise(resolve => {\r\n            d3.csv('./covid/time_series_covid19_confirmed_global.csv').then(d=>{\r\n            d.map((i,index)=>{\r\n                for(let k in i){\r\n                    let t=new Date(k)\r\n                    if(t.getDate()){\r\n                        i[k]=parseInt(i[k])\r\n                    }\r\n                }\r\n                if(!covidMap.has(i['Country/Region'])){\r\n                    covidMap.set(i['Country/Region'],i)\r\n                }\r\n                else{\r\n                    let tmp=covidMap.get(i['Country/Region'])\r\n                    for(let k in tmp){\r\n                        // console.log(k)\r\n                        let d=new Date(k);\r\n                        if(d.getDate()){\r\n                            if(dateKey.indexOf(k)===-1){\r\n                                dateKey.push(k)\r\n                            }\r\n                            // console.log(tmp[k])\r\n                            tmp[k]=(tmp[k]+i[k])\r\n                            // console.log(tmp)\r\n                        }\r\n                    }\r\n                }\r\n                }\r\n            )\r\n                //这么做好像没有什么用，曲线图是将每天的数据\r\n                console.log(covidMap)\r\n                // dateKey.forEach(d=>{\r\n                //     console.log(new Date(d))\r\n                // })\r\n                countrylist.forEach(d=>{\r\n                    let c={\r\n                        country: d,\r\n                        path:[]\r\n                    }\r\n                    for(let k in covidMap.get(d)){\r\n                        let tmp=new Date(k);\r\n                        if(tmp.getDate()){\r\n                            // console.log('k',k)\r\n                            let t=new Date(tmp.getFullYear(),tmp.getMonth(),tmp.getDate())\r\n                       c.path.push([tmp,covidMap.get(d)[k]])\r\n                        }\r\n                    }\r\n                    lineData.push(c)\r\n                })\r\n                console.log(lineData)\r\n                resolve()\r\n\r\n                // dateKey.forEach(k=>{\r\n                //     let arrayMap=Array.from(covidMap)\r\n                //     console.log('arrayMap',arrayMap);\r\n                //     let tmp=[]\r\n                //     arrayMap.forEach(d=>{\r\n                //         if(countrylist.indexOf(d[0])!==-1){\r\n                //             // tmp.push({\r\n                //             //     Country:d[0]\r\n                //             //     Value:\r\n                //             // })\r\n                //         }\r\n                //     })\r\n                //\r\n                //     sorted[k]= arrayMap.sort((a,b)=>{\r\n                //         if(a[1][k]>b[1][k]){\r\n                //             return -1\r\n                //         }\r\n                //         else return 1\r\n                //     })\r\n                //     // console.log(sorted[k])\r\n                // })\r\n                // console.log(sorted)\r\n                // for(let i in sorted){\r\n                //\r\n                // }\r\n\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // var xAxisMajor = d3.axisBottom().scale(xScale);\r\n    // var xAxisMinor = d3.axisBottom().scale(xScale).ticks(50);\r\n\r\n    // const circleRadius = 7;\r\n    // const colorLegendLabel='city'\r\n    // const colorScale = d3.scaleOrdinal()\r\n    // let range=[];\r\n    // if(keys){\r\n    //     keys.forEach((d,i)=>{\r\n    //             range.push(d3.interpolateSpectral(i/8))\r\n    //         }\r\n    //     )\r\n    //     colorScale.domain(keys)\r\n    //         .range(range)\r\n    // }\r\n//\r\n// }\r\n\r\nconst lineGenerator = d3.line()\r\n    // .curve(d3.curveCatmullRom)\r\n    .x(d => xScale(d[0]))\r\n    .y(d => yScale(d[1]));\r\n\r\nfunction setData(day) {\r\n    let data=[]\r\n    lineData.map((x)=>{\r\n        let tmp=[];\r\n        x.path.map((i,index)=>{\r\n            if(index>day){\r\n                tmp.push(x.path[day])\r\n            }\r\n            else{\r\n                tmp.push(i)\r\n            }\r\n        })\r\n        data.push({\r\n            country:x.country,\r\n            path:tmp\r\n        })\r\n    })\r\n    return data\r\n}\r\n\r\n\r\nexport default class App extends Component{\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            day:0,\r\n            linedata:[]\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n        let testData=\r\n            []\r\n        //     [{\r\n        //     path:[[new Date(2020,0,22),1000],[new Date(2020,1,10),10000]]\r\n        // }]\r\n        let p1=getCovid();\r\n        p1.then(result=>{\r\n            let svg=d3.select('svg');\r\n            const g = svg.append(\"g\")\r\n                .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\r\n\r\n            let gx=g.append(\"g\")\r\n            // .call(xAxisGenerator)\r\n                .attr(\"transform\", `translate(0, ${innerHeight})`);\r\n            g.append(\"g\")\r\n                .call(yAxisGenerator);\r\n            let p=gx.transition().duration(2000)\r\n                .call(xAxisGenerator.scale(xScale))\r\n                .end()\r\n            p.then(\r\n                // ()=>{\r\n                //     let x=d3.scaleTime()\r\n                //         .domain([new Date(2010, 0, 1), new Date(2010, 10, 1)])\r\n                //         .range([0, innerWidth])\r\n                //     gx.transition().duration(2000)\r\n                //         .call(xAxisGenerator.scale(x))\r\n                // }\r\n            )\r\n            svg.append('g').attr('id','line')\r\n                .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\r\n            // let lineg=svg.append('g');\r\n            //\r\n            // let line=lineg.selectAll('path')\r\n            //     .data(this.state.linedata)\r\n            //     .join('path')\r\n            //\r\n            // line\r\n            //     .attr(\"fill\", \"none\")\r\n            //     .attr(\"stroke\", \"black\")\r\n            //     .attr(\"stroke-width\", 2.5)\r\n            //     .attr(\"stroke-linejoin\", \"round\")\r\n            //     .attr(\"stroke-linecap\", \"round\")\r\n            //     .attr(\"d\",lineGenerator(this.state.linedata))\r\n\r\n            let lineg=d3.select('#line');\r\n            let line=lineg.selectAll('path')\r\n                .data(testData)\r\n                .join('path')\r\n                .attr(\"fill\", \"none\")\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2.5)\r\n                .attr(\"stroke-linejoin\", \"round\")\r\n                .attr(\"stroke-linecap\", \"round\")\r\n                // .attr(\"d\",lineGenerator(this.state.linedata[0].path))\r\n                .attr(\"d\",d=>{\r\n                    console.log('d',lineGenerator(d.path))\r\n                    return lineGenerator(d.path)\r\n                });\r\n            // setTimeout(function () {\r\n            //\r\n            //     this.setState({\r\n            //         linedata: newData\r\n            //     })\r\n            // },1000)\r\n            this._animate()\r\n        });\r\n\r\n\r\n    }\r\n    _animate(){\r\n\r\n            let newData=setData(this.state.day)\r\n            console.log('newData',newData)\r\n            this.setState({\r\n                        linedata: newData\r\n                    })\r\n            let lineg=d3.select('#line');\r\n            let line=lineg.selectAll('path')\r\n                .data(this.state.linedata)\r\n                .join('path')\r\n            let p=line\r\n                .attr(\"fill\", \"none\")\r\n                .attr(\"stroke\", \"black\")\r\n                .attr(\"stroke-width\", 2.5)\r\n                .attr(\"stroke-linejoin\", \"round\")\r\n                .attr(\"stroke-linecap\", \"round\")\r\n                .transition()\r\n                .ease(d3.easeLinear)\r\n                .duration(500)\r\n                .attr(\"d\",d=>lineGenerator(d.path))\r\n                .end()\r\n            p.then(()=>{\r\n                if(this.state.day<68){\r\n                    this.state.day+=1;\r\n                    this._animationFrame = window.requestAnimationFrame(this._animate.bind(this));\r\n                }\r\n            })\r\n\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        if (this._animationFrame) {\r\n            window.cancelAnimationFrame(this._animationFrame);\r\n        }\r\n    }\r\n\r\n     render() {\r\n\r\n\r\n\r\n\r\n         return <Fragment>\r\n             <svg height={height} width={width}>\r\n                 <g transform={`translate(${margin.left},${margin.top})`}>\r\n                 </g>\r\n             </svg>\r\n         </Fragment>\r\n     }\r\n}\r\n","import React,{Fragment}from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter as Router, Route,  Switch,Link } from 'react-router-dom'\r\n\r\nimport {City} from './components/city/city'\r\nimport RouteMap from \"./components/routeMap\";\r\nimport Covid from \"./components/covid-19\"\r\nimport AirQuality from \"./components/airQuality\";\r\nimport {StreamG} from \"./components/streamgraph/main\";\r\nimport {BarG} from \"./components/Barchart/main\";\r\n\r\nimport LineChart from \"./components/lineChart/main\";\r\n\r\nconst map = document.getElementById(\"map\");\r\nfunction Getpage(){\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <RouteMap />\r\n                </Route>\r\n                <Route path=\"/covid\">\r\n                    <Covid />\r\n                </Route>\r\n                <Route path=\"/airquality\">\r\n                    <AirQuality />\r\n                </Route>\r\n                <Route path=\"/city\">\r\n                    <City />\r\n                </Route>\r\n                <Route path=\"/stream\">\r\n                    <StreamG />\r\n                </Route>\r\n                <Route path=\"/bar\">\r\n                    <BarG />\r\n                </Route>\r\n                <Route path=\"/line\">\r\n                    <LineChart />\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\n\r\n// getData();\r\n\r\n// ReactDOM.render(\r\n//         <Map />,\r\n//     map\r\n// );\r\n\r\nReactDOM.render(\r\n    <Getpage />,\r\n    map\r\n\r\n)\r\n\r\n// ReactDOM.render(\r\n//     <Getpage/>\r\n//     ,map\r\n// )\r\n"],"sourceRoot":""}