{"version":3,"sources":["../../../src/lib/parse-wkb.js"],"names":["NUM_DIMENSIONS","parseWKB","buffer","view","DataView","offset","littleEndian","getUint8","geometryCode","getUint32","geometryType","dimension","point","parsePoint","type","line","parseLineString","polygon","parsePolygon","multiPoint","parseMultiPoint","multiLine","parseMultiLineString","multiPolygon","parseMultiPolygon","assert","positions","Float64Array","i","getFloat64","value","size","nPoints","pathIndices","push","Uint16Array","cumulativeSum","sum","nRings","rings","parsed","concatenatedPositions","concatTypedArrays","polygonIndices","length","primitivePolygonIndices","map","l","unshift","points","littleEndianPoint","nLines","lines","littleEndianLine","nPolygons","polygons","primitivePolygons","littleEndianPolygon","p","primitivePolygon","filter","x","arrays","byteLength","Uint8Array","byteOffset","data","j","condition","message","Error"],"mappings":"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","sourcesContent":["const NUM_DIMENSIONS = {\n  0: 2, // 2D\n  1: 3, // 3D (Z)\n  2: 3, // 3D (M)\n  3: 4 // 4D (ZM)\n};\n\nexport default function parseWKB(buffer) {\n  const view = new DataView(buffer);\n  let offset = 0;\n\n  // Check endianness of data\n  const littleEndian = view.getUint8(offset) === 1;\n  offset++;\n\n  // 4-digit code representing dimension and type of geometry\n  const geometryCode = view.getUint32(offset, littleEndian);\n  offset += 4;\n\n  const geometryType = geometryCode % 1000;\n  const dimension = NUM_DIMENSIONS[(geometryCode - geometryType) / 1000];\n\n  switch (geometryType) {\n    case 1:\n      const point = parsePoint(view, offset, dimension, littleEndian);\n      delete point.offset;\n      point.type = 'Point';\n      return point;\n    case 2:\n      const line = parseLineString(view, offset, dimension, littleEndian);\n      delete line.offset;\n      line.type = 'LineString';\n      return line;\n    case 3:\n      const polygon = parsePolygon(view, offset, dimension, littleEndian);\n      delete polygon.offset;\n      polygon.type = 'Polygon';\n      return polygon;\n    case 4:\n      const multiPoint = parseMultiPoint(view, offset, dimension, littleEndian);\n      multiPoint.type = 'Point';\n      return multiPoint;\n    case 5:\n      const multiLine = parseMultiLineString(view, offset, dimension, littleEndian);\n      multiLine.type = 'LineString';\n      return multiLine;\n    case 6:\n      const multiPolygon = parseMultiPolygon(view, offset, dimension, littleEndian);\n      multiPolygon.type = 'Polygon';\n      return multiPolygon;\n    // case 7:\n    // TODO: handle GeometryCollections\n    // return parseGeometryCollection(view, offset, dimension, littleEndian);\n    default:\n      assert(false, `Unsupported geometry type: ${geometryType}`);\n  }\n\n  return null;\n}\n\n// Primitives; parse point and linear ring\nfunction parsePoint(view, offset, dimension, littleEndian) {\n  const positions = new Float64Array(dimension);\n  for (let i = 0; i < dimension; i++) {\n    positions[i] = view.getFloat64(offset, littleEndian);\n    offset += 8;\n  }\n\n  return {positions: {value: positions, size: dimension}, offset};\n}\n\nfunction parseLineString(view, offset, dimension, littleEndian) {\n  const nPoints = view.getUint32(offset, littleEndian);\n  offset += 4;\n\n  // Instantiate array\n  const positions = new Float64Array(nPoints * dimension);\n  for (let i = 0; i < nPoints * dimension; i++) {\n    positions[i] = view.getFloat64(offset, littleEndian);\n    offset += 8;\n  }\n\n  const pathIndices = [0];\n  if (nPoints > 0) {\n    pathIndices.push(nPoints);\n  }\n\n  return {\n    positions: {value: positions, size: dimension},\n    pathIndices: {value: new Uint16Array(pathIndices), size: 1},\n    offset\n  };\n}\n\n// https://stackoverflow.com/a/55261098\nconst cumulativeSum = sum => value => (sum += value);\n\nfunction parsePolygon(view, offset, dimension, littleEndian) {\n  const nRings = view.getUint32(offset, littleEndian);\n  offset += 4;\n\n  const rings = [];\n  for (let i = 0; i < nRings; i++) {\n    const parsed = parseLineString(view, offset, dimension, littleEndian);\n    const {positions} = parsed;\n    offset = parsed.offset;\n    rings.push(positions.value);\n  }\n\n  const concatenatedPositions = new Float64Array(concatTypedArrays(rings).buffer);\n  const polygonIndices = [0];\n  if (concatenatedPositions.length > 0) {\n    polygonIndices.push(concatenatedPositions.length / dimension);\n  }\n  const primitivePolygonIndices = rings.map(l => l.length / dimension).map(cumulativeSum(0));\n  primitivePolygonIndices.unshift(0);\n\n  return {\n    positions: {value: concatenatedPositions, size: dimension},\n    polygonIndices: {\n      value: new Uint16Array(polygonIndices),\n      size: 1\n    },\n    primitivePolygonIndices: {value: new Uint16Array(primitivePolygonIndices), size: 1},\n    offset\n  };\n}\n\nfunction parseMultiPoint(view, offset, dimension, littleEndian) {\n  const nPoints = view.getUint32(offset, littleEndian);\n  offset += 4;\n\n  const points = [];\n  for (let i = 0; i < nPoints; i++) {\n    // Byte order for point\n    const littleEndianPoint = view.getUint8(offset) === 1;\n    offset++;\n\n    // Assert point type\n    assert(\n      view.getUint32(offset, littleEndianPoint) % 1000 === 1,\n      'Inner geometries of MultiPoint not of type Point'\n    );\n    offset += 4;\n\n    const parsed = parsePoint(view, offset, dimension, littleEndianPoint);\n    const {positions} = parsed;\n    offset = parsed.offset;\n    points.push(positions.value);\n  }\n\n  const concatenatedPositions = new Float64Array(concatTypedArrays(points).buffer);\n\n  return {\n    positions: {value: concatenatedPositions, size: dimension}\n  };\n}\n\nfunction parseMultiLineString(view, offset, dimension, littleEndian) {\n  const nLines = view.getUint32(offset, littleEndian);\n  offset += 4;\n\n  const lines = [];\n  for (let i = 0; i < nLines; i++) {\n    // Byte order for line\n    const littleEndianLine = view.getUint8(offset) === 1;\n    offset++;\n\n    // Assert type LineString\n    assert(\n      view.getUint32(offset, littleEndianLine) % 1000 === 2,\n      'Inner geometries of MultiLineString not of type LineString'\n    );\n    offset += 4;\n\n    const parsed = parseLineString(view, offset, dimension, littleEndianLine);\n    const {positions} = parsed;\n    offset = parsed.offset;\n    lines.push(positions.value);\n  }\n\n  const concatenatedPositions = new Float64Array(concatTypedArrays(lines).buffer);\n  const pathIndices = lines.map(l => l.length / dimension).map(cumulativeSum(0));\n  pathIndices.unshift(0);\n\n  return {\n    positions: {value: concatenatedPositions, size: dimension},\n    pathIndices: {value: new Uint16Array(pathIndices), size: 1}\n  };\n}\n\nfunction parseMultiPolygon(view, offset, dimension, littleEndian) {\n  const nPolygons = view.getUint32(offset, littleEndian);\n  offset += 4;\n\n  const polygons = [];\n  const primitivePolygons = [];\n  for (let i = 0; i < nPolygons; i++) {\n    // Byte order for polygon\n    const littleEndianPolygon = view.getUint8(offset) === 1;\n    offset++;\n\n    // Assert type Polygon\n    assert(\n      view.getUint32(offset, littleEndianPolygon) % 1000 === 3,\n      'Inner geometries of MultiPolygon not of type Polygon'\n    );\n    offset += 4;\n\n    const parsed = parsePolygon(view, offset, dimension, littleEndianPolygon);\n    const {positions, primitivePolygonIndices} = parsed;\n    offset = parsed.offset;\n    polygons.push(positions.value);\n    primitivePolygons.push(primitivePolygonIndices.value);\n  }\n\n  const concatenatedPositions = new Float64Array(concatTypedArrays(polygons).buffer);\n  const polygonIndices = polygons.map(p => p.length / dimension).map(cumulativeSum(0));\n  polygonIndices.unshift(0);\n\n  // Combine primitivePolygonIndices from each individual polygon\n  const primitivePolygonIndices = [0];\n  for (const primitivePolygon of primitivePolygons) {\n    primitivePolygonIndices.push(\n      ...primitivePolygon\n        .filter(x => x > 0)\n        .map(x => x + primitivePolygonIndices[primitivePolygonIndices.length - 1])\n    );\n  }\n\n  return {\n    positions: {value: concatenatedPositions, size: dimension},\n    polygonIndices: {value: new Uint16Array(polygonIndices), size: 1},\n    primitivePolygonIndices: {value: new Uint16Array(primitivePolygonIndices), size: 1}\n  };\n}\n\n// TODO: remove copy; import from typed-array-utils\n// modules/math/src/geometry/typed-arrays/typed-array-utils.js\nfunction concatTypedArrays(arrays) {\n  let byteLength = 0;\n  for (let i = 0; i < arrays.length; ++i) {\n    byteLength += arrays[i].byteLength;\n  }\n  const buffer = new Uint8Array(byteLength);\n\n  let byteOffset = 0;\n  for (let i = 0; i < arrays.length; ++i) {\n    const data = new Uint8Array(arrays[i].buffer);\n    byteLength = data.length;\n    for (let j = 0; j < byteLength; ++j) {\n      buffer[byteOffset++] = data[j];\n    }\n  }\n  return buffer;\n}\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(`Error parsing Well-Known Binary. ${message}`);\n  }\n}\n"],"file":"parse-wkb.js"}