(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/bundle.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../../node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/bundle.js":
/*!***********************!*\
  !*** ./src/bundle.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/* global window, global */
const moduleExports = __webpack_require__(/*! ./index */ "./src/index.js");
const _global = typeof window === 'undefined' ? global : window;
// @ts-ignore
_global.loaders = _global.loaders || {};
// @ts-ignore
module.exports = Object.assign(_global.loaders, moduleExports);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../node_modules/webpack/buildin/global.js */ "../../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: WKBLoader, WKBWorkerLoader, WKTLoader, WKTWorkerLoader, WKTWriter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _wkb_loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wkb-loader */ "./src/wkb-loader.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WKBLoader", function() { return _wkb_loader__WEBPACK_IMPORTED_MODULE_0__["WKBLoader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WKBWorkerLoader", function() { return _wkb_loader__WEBPACK_IMPORTED_MODULE_0__["WKBWorkerLoader"]; });

/* harmony import */ var _wkt_loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wkt-loader */ "./src/wkt-loader.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WKTLoader", function() { return _wkt_loader__WEBPACK_IMPORTED_MODULE_1__["WKTLoader"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WKTWorkerLoader", function() { return _wkt_loader__WEBPACK_IMPORTED_MODULE_1__["WKTWorkerLoader"]; });

/* harmony import */ var _wkt_writer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wkt-writer */ "./src/wkt-writer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "WKTWriter", function() { return _wkt_writer__WEBPACK_IMPORTED_MODULE_2__["WKTWriter"]; });






/***/ }),

/***/ "./src/lib/encode-wkt.js":
/*!*******************************!*\
  !*** ./src/lib/encode-wkt.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return encodeWKT; });
// Fork of https://github.com/mapbox/wellknown under ISC license (MIT/BSD-2-clause equivalent)
/* eslint-disable prefer-template */

/**
 * Stringifies a GeoJSON object into WKT
 */
function encodeWKT(gj) {
  if (gj.type === 'Feature') {
    gj = gj.geometry;
  }

  function pairWKT(c) {
    return c.join(' ');
  }

  function ringWKT(r) {
    return r.map(pairWKT).join(', ');
  }

  function ringsWKT(r) {
    return r
      .map(ringWKT)
      .map(wrapParens)
      .join(', ');
  }

  function multiRingsWKT(r) {
    return r
      .map(ringsWKT)
      .map(wrapParens)
      .join(', ');
  }

  function wrapParens(s) {
    return '(' + s + ')';
  }

  switch (gj.type) {
    case 'Point':
      return 'POINT (' + pairWKT(gj.coordinates) + ')';
    case 'LineString':
      return 'LINESTRING (' + ringWKT(gj.coordinates) + ')';
    case 'Polygon':
      return 'POLYGON (' + ringsWKT(gj.coordinates) + ')';
    case 'MultiPoint':
      return 'MULTIPOINT (' + ringWKT(gj.coordinates) + ')';
    case 'MultiPolygon':
      return 'MULTIPOLYGON (' + multiRingsWKT(gj.coordinates) + ')';
    case 'MultiLineString':
      return 'MULTILINESTRING (' + ringsWKT(gj.coordinates) + ')';
    case 'GeometryCollection':
      return 'GEOMETRYCOLLECTION (' + gj.geometries.map(encodeWKT).join(', ') + ')';
    default:
      throw new Error('stringify requires a valid GeoJSON Feature or geometry object as input');
  }
}


/***/ }),

/***/ "./src/lib/parse-wkb.js":
/*!******************************!*\
  !*** ./src/lib/parse-wkb.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return parseWKB; });
const NUM_DIMENSIONS = {
  0: 2, // 2D
  1: 3, // 3D (Z)
  2: 3, // 3D (M)
  3: 4 // 4D (ZM)
};

function parseWKB(buffer) {
  const view = new DataView(buffer);
  let offset = 0;

  // Check endianness of data
  const littleEndian = view.getUint8(offset) === 1;
  offset++;

  // 4-digit code representing dimension and type of geometry
  const geometryCode = view.getUint32(offset, littleEndian);
  offset += 4;

  const geometryType = geometryCode % 1000;
  const dimension = NUM_DIMENSIONS[(geometryCode - geometryType) / 1000];

  switch (geometryType) {
    case 1:
      const point = parsePoint(view, offset, dimension, littleEndian);
      delete point.offset;
      point.type = 'Point';
      return point;
    case 2:
      const line = parseLineString(view, offset, dimension, littleEndian);
      delete line.offset;
      line.type = 'LineString';
      return line;
    case 3:
      const polygon = parsePolygon(view, offset, dimension, littleEndian);
      delete polygon.offset;
      polygon.type = 'Polygon';
      return polygon;
    case 4:
      const multiPoint = parseMultiPoint(view, offset, dimension, littleEndian);
      multiPoint.type = 'Point';
      return multiPoint;
    case 5:
      const multiLine = parseMultiLineString(view, offset, dimension, littleEndian);
      multiLine.type = 'LineString';
      return multiLine;
    case 6:
      const multiPolygon = parseMultiPolygon(view, offset, dimension, littleEndian);
      multiPolygon.type = 'Polygon';
      return multiPolygon;
    // case 7:
    // TODO: handle GeometryCollections
    // return parseGeometryCollection(view, offset, dimension, littleEndian);
    default:
      assert(false, `Unsupported geometry type: ${geometryType}`);
  }

  return null;
}

// Primitives; parse point and linear ring
function parsePoint(view, offset, dimension, littleEndian) {
  const positions = new Float64Array(dimension);
  for (let i = 0; i < dimension; i++) {
    positions[i] = view.getFloat64(offset, littleEndian);
    offset += 8;
  }

  return {positions: {value: positions, size: dimension}, offset};
}

function parseLineString(view, offset, dimension, littleEndian) {
  const nPoints = view.getUint32(offset, littleEndian);
  offset += 4;

  // Instantiate array
  const positions = new Float64Array(nPoints * dimension);
  for (let i = 0; i < nPoints * dimension; i++) {
    positions[i] = view.getFloat64(offset, littleEndian);
    offset += 8;
  }

  const pathIndices = [0];
  if (nPoints > 0) {
    pathIndices.push(nPoints);
  }

  return {
    positions: {value: positions, size: dimension},
    pathIndices: {value: new Uint16Array(pathIndices), size: 1},
    offset
  };
}

// https://stackoverflow.com/a/55261098
const cumulativeSum = sum => value => (sum += value);

function parsePolygon(view, offset, dimension, littleEndian) {
  const nRings = view.getUint32(offset, littleEndian);
  offset += 4;

  const rings = [];
  for (let i = 0; i < nRings; i++) {
    const parsed = parseLineString(view, offset, dimension, littleEndian);
    const {positions} = parsed;
    offset = parsed.offset;
    rings.push(positions.value);
  }

  const concatenatedPositions = new Float64Array(concatTypedArrays(rings).buffer);
  const polygonIndices = [0];
  if (concatenatedPositions.length > 0) {
    polygonIndices.push(concatenatedPositions.length / dimension);
  }
  const primitivePolygonIndices = rings.map(l => l.length / dimension).map(cumulativeSum(0));
  primitivePolygonIndices.unshift(0);

  return {
    positions: {value: concatenatedPositions, size: dimension},
    polygonIndices: {
      value: new Uint16Array(polygonIndices),
      size: 1
    },
    primitivePolygonIndices: {value: new Uint16Array(primitivePolygonIndices), size: 1},
    offset
  };
}

function parseMultiPoint(view, offset, dimension, littleEndian) {
  const nPoints = view.getUint32(offset, littleEndian);
  offset += 4;

  const points = [];
  for (let i = 0; i < nPoints; i++) {
    // Byte order for point
    const littleEndianPoint = view.getUint8(offset) === 1;
    offset++;

    // Assert point type
    assert(
      view.getUint32(offset, littleEndianPoint) % 1000 === 1,
      'Inner geometries of MultiPoint not of type Point'
    );
    offset += 4;

    const parsed = parsePoint(view, offset, dimension, littleEndianPoint);
    const {positions} = parsed;
    offset = parsed.offset;
    points.push(positions.value);
  }

  const concatenatedPositions = new Float64Array(concatTypedArrays(points).buffer);

  return {
    positions: {value: concatenatedPositions, size: dimension}
  };
}

function parseMultiLineString(view, offset, dimension, littleEndian) {
  const nLines = view.getUint32(offset, littleEndian);
  offset += 4;

  const lines = [];
  for (let i = 0; i < nLines; i++) {
    // Byte order for line
    const littleEndianLine = view.getUint8(offset) === 1;
    offset++;

    // Assert type LineString
    assert(
      view.getUint32(offset, littleEndianLine) % 1000 === 2,
      'Inner geometries of MultiLineString not of type LineString'
    );
    offset += 4;

    const parsed = parseLineString(view, offset, dimension, littleEndianLine);
    const {positions} = parsed;
    offset = parsed.offset;
    lines.push(positions.value);
  }

  const concatenatedPositions = new Float64Array(concatTypedArrays(lines).buffer);
  const pathIndices = lines.map(l => l.length / dimension).map(cumulativeSum(0));
  pathIndices.unshift(0);

  return {
    positions: {value: concatenatedPositions, size: dimension},
    pathIndices: {value: new Uint16Array(pathIndices), size: 1}
  };
}

function parseMultiPolygon(view, offset, dimension, littleEndian) {
  const nPolygons = view.getUint32(offset, littleEndian);
  offset += 4;

  const polygons = [];
  const primitivePolygons = [];
  for (let i = 0; i < nPolygons; i++) {
    // Byte order for polygon
    const littleEndianPolygon = view.getUint8(offset) === 1;
    offset++;

    // Assert type Polygon
    assert(
      view.getUint32(offset, littleEndianPolygon) % 1000 === 3,
      'Inner geometries of MultiPolygon not of type Polygon'
    );
    offset += 4;

    const parsed = parsePolygon(view, offset, dimension, littleEndianPolygon);
    const {positions, primitivePolygonIndices} = parsed;
    offset = parsed.offset;
    polygons.push(positions.value);
    primitivePolygons.push(primitivePolygonIndices.value);
  }

  const concatenatedPositions = new Float64Array(concatTypedArrays(polygons).buffer);
  const polygonIndices = polygons.map(p => p.length / dimension).map(cumulativeSum(0));
  polygonIndices.unshift(0);

  // Combine primitivePolygonIndices from each individual polygon
  const primitivePolygonIndices = [0];
  for (const primitivePolygon of primitivePolygons) {
    primitivePolygonIndices.push(
      ...primitivePolygon
        .filter(x => x > 0)
        .map(x => x + primitivePolygonIndices[primitivePolygonIndices.length - 1])
    );
  }

  return {
    positions: {value: concatenatedPositions, size: dimension},
    polygonIndices: {value: new Uint16Array(polygonIndices), size: 1},
    primitivePolygonIndices: {value: new Uint16Array(primitivePolygonIndices), size: 1}
  };
}

// TODO: remove copy; import from typed-array-utils
// modules/math/src/geometry/typed-arrays/typed-array-utils.js
function concatTypedArrays(arrays) {
  let byteLength = 0;
  for (let i = 0; i < arrays.length; ++i) {
    byteLength += arrays[i].byteLength;
  }
  const buffer = new Uint8Array(byteLength);

  let byteOffset = 0;
  for (let i = 0; i < arrays.length; ++i) {
    const data = new Uint8Array(arrays[i].buffer);
    byteLength = data.length;
    for (let j = 0; j < byteLength; ++j) {
      buffer[byteOffset++] = data[j];
    }
  }
  return buffer;
}

function assert(condition, message) {
  if (!condition) {
    throw new Error(`Error parsing Well-Known Binary. ${message}`);
  }
}


/***/ }),

/***/ "./src/lib/parse-wkt.js":
/*!******************************!*\
  !*** ./src/lib/parse-wkt.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return parseWKT; });
// Fork of https://github.com/mapbox/wellknown under ISC license (MIT/BSD-2-clause equivalent)
/* eslint-disable */

const numberRegexp = /[-+]?([0-9]*\.[0-9]+|[0-9]+)([eE][-+]?[0-9]+)?/;
// Matches sequences like '100 100' or '100 100 100'.
const tuples = new RegExp('^' + numberRegexp.source + '(\\s' + numberRegexp.source + '){1,}');

/*
  * Parse WKT and return GeoJSON.
  *
  * @param {string} _ A WKT geometry
  * @return {?Object} A GeoJSON geometry object
  */
function parseWKT(input) {
  var parts = input.split(';');
  var _ = parts.pop();
  var srid = (parts.shift() || '').split('=').pop();

  var i = 0;

  function $(re) {
    var match = _.substring(i).match(re);
    if (!match) return null;
    else {
      i += match[0].length;
      return match[0];
    }
  }

  function crs(obj) {
    if (obj && srid.match(/\d+/)) {
      obj.crs = {
        type: 'name',
        properties: {
          name: 'urn:ogc:def:crs:EPSG::' + srid
        }
      };
    }

    return obj;
  }

  function white() {
    $(/^\s*/);
  }

  function multicoords() {
    white();
    var depth = 0;
    var rings = [];
    var stack = [rings];
    var pointer = rings;
    var elem;

    while ((elem = $(/^(\()/) || $(/^(\))/) || $(/^(,)/) || $(tuples))) {
      if (elem === '(') {
        stack.push(pointer);
        pointer = [];
        stack[stack.length - 1].push(pointer);
        depth++;
      } else if (elem === ')') {
        // For the case: Polygon(), ...
        if (pointer.length === 0) return null;

        // @ts-ignore
        pointer = stack.pop();
        // the stack was empty, input was malformed
        if (!pointer) return null;
        depth--;
        if (depth === 0) break;
      } else if (elem === ',') {
        pointer = [];
        stack[stack.length - 1].push(pointer);
      } else if (!elem.split(/\s/g).some(isNaN)) {
        Array.prototype.push.apply(pointer, elem.split(/\s/g).map(parseFloat));
      } else {
        return null;
      }
      white();
    }

    if (depth !== 0) return null;

    return rings;
  }

  function coords() {
    var list = [];
    var item;
    var pt;
    while ((pt = $(tuples) || $(/^(,)/))) {
      if (pt === ',') {
        list.push(item);
        item = [];
      } else if (!pt.split(/\s/g).some(isNaN)) {
        if (!item) item = [];
        Array.prototype.push.apply(item, pt.split(/\s/g).map(parseFloat));
      }
      white();
    }

    if (item) list.push(item);
    else return null;

    return list.length ? list : null;
  }

  function point() {
    if (!$(/^(point(\sz)?)/i)) return null;
    white();
    if (!$(/^(\()/)) return null;
    var c = coords();
    if (!c) return null;
    white();
    if (!$(/^(\))/)) return null;
    return {
      type: 'Point',
      coordinates: c[0]
    };
  }

  function multipoint() {
    if (!$(/^(multipoint)/i)) return null;
    white();
    var newCoordsFormat = _.substring(_.indexOf('(') + 1, _.length - 1)
      .replace(/\(/g, '')
      .replace(/\)/g, '');
    _ = 'MULTIPOINT (' + newCoordsFormat + ')';
    var c = multicoords();
    if (!c) return null;
    white();
    return {
      type: 'MultiPoint',
      coordinates: c
    };
  }

  function multilinestring() {
    if (!$(/^(multilinestring)/i)) return null;
    white();
    var c = multicoords();
    if (!c) return null;
    white();
    return {
      type: 'MultiLineString',
      coordinates: c
    };
  }

  function linestring() {
    if (!$(/^(linestring(\sz)?)/i)) return null;
    white();
    if (!$(/^(\()/)) return null;
    var c = coords();
    if (!c) return null;
    if (!$(/^(\))/)) return null;
    return {
      type: 'LineString',
      coordinates: c
    };
  }

  function polygon() {
    if (!$(/^(polygon(\sz)?)/i)) return null;
    white();
    var c = multicoords();
    if (!c) return null;
    return {
      type: 'Polygon',
      coordinates: c
    };
  }

  function multipolygon() {
    if (!$(/^(multipolygon)/i)) return null;
    white();
    var c = multicoords();
    if (!c) return null;
    return {
      type: 'MultiPolygon',
      coordinates: c
    };
  }

  function geometrycollection() {
    var geometries = [];
    var geometry;

    if (!$(/^(geometrycollection)/i)) return null;
    white();

    if (!$(/^(\()/)) return null;
    while ((geometry = root())) {
      geometries.push(geometry);
      white();
      $(/^(,)/);
      white();
    }
    if (!$(/^(\))/)) return null;

    return {
      type: 'GeometryCollection',
      geometries: geometries
    };
  }

  function root() {
    return (
      point() ||
      linestring() ||
      polygon() ||
      multipoint() ||
      multilinestring() ||
      multipolygon() ||
      geometrycollection()
    );
  }

  return crs(root());
}


/***/ }),

/***/ "./src/wkb-loader.js":
/*!***************************!*\
  !*** ./src/wkb-loader.js ***!
  \***************************/
/*! exports provided: WKBWorkerLoader, WKBLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WKBWorkerLoader", function() { return WKBWorkerLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WKBLoader", function() { return WKBLoader; });
/* harmony import */ var _lib_parse_wkb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/parse-wkb */ "./src/lib/parse-wkb.js");
/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */
/** @typedef {import('@loaders.gl/loader-utils').WorkerLoaderObject} WorkerLoaderObject */


// __VERSION__ is injected by babel-plugin-version-inline
// @ts-ignore TS2304: Cannot find name '__VERSION__'.
const VERSION =  true ? "2.3.9" : undefined;

/** @type {WorkerLoaderObject} */
const WKBWorkerLoader = {
  id: 'wkb',
  name: 'WKB',
  category: 'geometry',
  version: VERSION,
  extensions: ['wkb'],
  mimeTypes: [],
  options: {
    wkb: {
      workerUrl: `https://unpkg.com/@loaders.gl/wkb@${VERSION}/dist/wkb-loader.worker.js`
    }
  }
};

/** @type {LoaderObject} */
const WKBLoader = {
  ...WKBWorkerLoader,
  parse: async (arrayBuffer, options) => Object(_lib_parse_wkb__WEBPACK_IMPORTED_MODULE_0__["default"])(arrayBuffer),
  parseSync: _lib_parse_wkb__WEBPACK_IMPORTED_MODULE_0__["default"]
};


/***/ }),

/***/ "./src/wkt-loader.js":
/*!***************************!*\
  !*** ./src/wkt-loader.js ***!
  \***************************/
/*! exports provided: WKTWorkerLoader, WKTLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WKTWorkerLoader", function() { return WKTWorkerLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WKTLoader", function() { return WKTLoader; });
/* harmony import */ var _lib_parse_wkt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/parse-wkt */ "./src/lib/parse-wkt.js");
/* global TextDecoder */
/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */
/** @typedef {import('@loaders.gl/loader-utils').WorkerLoaderObject} WorkerLoaderObject */


// __VERSION__ is injected by babel-plugin-version-inline
// @ts-ignore TS2304: Cannot find name '__VERSION__'.
const VERSION =  true ? "2.3.9" : undefined;

/** @type {WorkerLoaderObject} */
const WKTWorkerLoader = {
  id: 'wkt',
  name: 'WKT',
  version: VERSION,
  extensions: ['wkt'],
  mimeTypes: ['text/plain'],
  category: 'geometry',
  text: true,
  options: {
    wkt: {
      workerUrl: `https://unpkg.com/@loaders.gl/wkt@${VERSION}/dist/wkt-loader.worker.js`
    }
  }
};

/** @type {LoaderObject} */
const WKTLoader = {
  ...WKTWorkerLoader,
  parse: async (arrayBuffer, options) => Object(_lib_parse_wkt__WEBPACK_IMPORTED_MODULE_0__["default"])(new TextDecoder().decode(arrayBuffer)),
  parseTextSync: _lib_parse_wkt__WEBPACK_IMPORTED_MODULE_0__["default"]
};


/***/ }),

/***/ "./src/wkt-writer.js":
/*!***************************!*\
  !*** ./src/wkt-writer.js ***!
  \***************************/
/*! exports provided: WKTWriter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WKTWriter", function() { return WKTWriter; });
/* harmony import */ var _lib_encode_wkt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/encode-wkt */ "./src/lib/encode-wkt.js");


const WKTWriter = {
  id: 'wkt',
  name: 'WKT (Well Known Text)',
  extensions: ['wkt'],
  encode: _lib_encode_wkt__WEBPACK_IMPORTED_MODULE_0__["default"],
  options: {
    wkt: {}
  }
};


/***/ })

/******/ });
});