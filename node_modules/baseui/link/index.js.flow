function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
/*
Copyright (c) 2018-2020 Uber Technologies, Inc.
This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.
*/
// @flow
// Styled elements
import * as React from 'react';
import { Link } from './styled-components.js';
import { isFocusVisible, forkFocus, forkBlur } from '../utils/focusVisible.js'; // $FlowFixMe
export const StyledLink: React.AbstractComponent = React.forwardRef((props, ref) => {
  const [focusVisible, setFocusVisible] = React.useState(false);
  const handleFocus = (event: SyntheticEvent<>) => {
    if (isFocusVisible(event)) {
      setFocusVisible(true);
    }
  };
  const handleBlur = (event: SyntheticEvent<>) => {
    if (focusVisible !== false) {
      setFocusVisible(false);
    }
  };
  return React.createElement(Link, _extends({
    "data-baseweb": "link",
    $isFocusVisible: focusVisible
  }, props, {
    onFocus: forkFocus(props, handleFocus),
    onBlur: forkBlur(props, handleBlur),
    ref: ref
  }));
});
StyledLink.__STYLETRON__ = Link.__STYLETRON__;