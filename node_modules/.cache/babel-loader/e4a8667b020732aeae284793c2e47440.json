{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { treemap } from '../../utils/hierarchy/treemap';\nexport function transformData(options) {\n  var data = options.data,\n      colorField = options.colorField,\n      hierarchyConfig = options.hierarchyConfig;\n  var nodes = treemap(data, __assign(__assign({}, hierarchyConfig), {\n    // @ts-ignore\n    type: 'hierarchy.treemap',\n    field: 'value',\n    as: ['x', 'y']\n  }));\n  var result = [];\n  nodes.forEach(function (node) {\n    if (!node.children) {\n      var eachNode = Object.assign({}, node.data, {\n        x: node.x,\n        y: node.y,\n        depth: node.depth,\n        value: node.value\n      });\n\n      if (!node.data[colorField] && node.parent) {\n        var ancestorNode = node.ancestors().find(function (n) {\n          return n.data[colorField];\n        });\n        eachNode[colorField] = ancestorNode === null || ancestorNode === void 0 ? void 0 : ancestorNode.data[colorField];\n      } else {\n        eachNode[colorField] = node.data[colorField];\n      }\n\n      result.push(eachNode);\n    }\n  });\n  return result;\n}","map":{"version":3,"sources":["../../../src/plots/treemap/utils.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,QAAwB,+BAAxB;AAGA,OAAM,SAAU,aAAV,CAAwB,OAAxB,EAA+C;AAC3C,MAAA,IAAI,GAAkC,OAAO,CAAzC,IAAJ;AAAA,MAAM,UAAU,GAAsB,OAAO,CAA7B,UAAhB;AAAA,MAAkB,eAAe,GAAK,OAAO,CAAZ,eAAjC;AAER,MAAM,KAAK,GAAG,OAAO,CAAC,IAAD,EAAK,QAAA,CAAA,QAAA,CAAA,EAAA,EACrB,eADqB,CAAA,EACN;AAClB;AACA,IAAA,IAAI,EAAE,mBAFY;AAGlB,IAAA,KAAK,EAAE,OAHW;AAIlB,IAAA,EAAE,EAAE,CAAC,GAAD,EAAM,GAAN;AAJc,GADM,CAAL,CAArB;AAQA,MAAM,MAAM,GAAG,EAAf;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,UAAC,IAAD,EAAK;AACjB,QAAI,CAAC,IAAI,CAAC,QAAV,EAAoB;AAClB,UAAM,QAAQ,GAAG,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,IAAI,CAAC,IAAvB,EAA6B;AAC5C,QAAA,CAAC,EAAE,IAAI,CAAC,CADoC;AAE5C,QAAA,CAAC,EAAE,IAAI,CAAC,CAFoC;AAG5C,QAAA,KAAK,EAAE,IAAI,CAAC,KAHgC;AAI5C,QAAA,KAAK,EAAE,IAAI,CAAC;AAJgC,OAA7B,CAAjB;;AAMA,UAAI,CAAC,IAAI,CAAC,IAAL,CAAU,UAAV,CAAD,IAA0B,IAAI,CAAC,MAAnC,EAA2C;AACzC,YAAM,YAAY,GAAG,IAAI,CAAC,SAAL,GAAiB,IAAjB,CAAsB,UAAC,CAAD,EAAE;AAAK,iBAAA,CAAC,CAAC,IAAF,CAAA,UAAA,CAAA;AAAkB,SAA/C,CAArB;AACA,QAAA,QAAQ,CAAC,UAAD,CAAR,GAAuB,YAAY,KAAA,IAAZ,IAAA,YAAY,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAA,YAAY,CAAE,IAAd,CAAmB,UAAnB,CAAvB;AACD,OAHD,MAGO;AACL,QAAA,QAAQ,CAAC,UAAD,CAAR,GAAuB,IAAI,CAAC,IAAL,CAAU,UAAV,CAAvB;AACD;;AAED,MAAA,MAAM,CAAC,IAAP,CAAY,QAAZ;AACD;AACF,GAjBD;AAkBA,SAAO,MAAP;AACD","sourcesContent":["import { treemap } from '../../utils/hierarchy/treemap';\nimport { TreemapOptions } from './types';\n\nexport function transformData(options: TreemapOptions) {\n  const { data, colorField, hierarchyConfig } = options;\n\n  const nodes = treemap(data, {\n    ...hierarchyConfig,\n    // @ts-ignore\n    type: 'hierarchy.treemap',\n    field: 'value',\n    as: ['x', 'y'],\n  });\n\n  const result = [];\n  nodes.forEach((node) => {\n    if (!node.children) {\n      const eachNode = Object.assign({}, node.data, {\n        x: node.x,\n        y: node.y,\n        depth: node.depth,\n        value: node.value,\n      });\n      if (!node.data[colorField] && node.parent) {\n        const ancestorNode = node.ancestors().find((n) => n.data[colorField]);\n        eachNode[colorField] = ancestorNode?.data[colorField];\n      } else {\n        eachNode[colorField] = node.data[colorField];\n      }\n\n      result.push(eachNode);\n    }\n  });\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}