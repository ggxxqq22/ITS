{"ast":null,"code":"import { __extends, __spreadArrays } from \"tslib\";\nimport { indexOf, isNil, isNumber } from '@antv/util';\nimport Base from '../base';\n/**\n * 分类度量\n * @class\n */\n\nvar Category =\n/** @class */\nfunction (_super) {\n  __extends(Category, _super);\n\n  function Category() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'cat';\n    _this.isCategory = true; // 用于缓存 translate 函数\n\n    _this.cache = new Map();\n    return _this;\n  }\n\n  Category.prototype.translate = function (value) {\n    if (this.cache.has(value)) {\n      return this.cache.get(value);\n    }\n\n    var index = indexOf(this.values, value);\n\n    if (index === -1) {\n      index = isNumber(value) ? value : NaN;\n    }\n\n    this.cache.set(value, index);\n    return index;\n  };\n\n  Category.prototype.scale = function (value) {\n    var order = this.translate(value); // 分类数据允许 0.5 范围内调整\n    // if (order < this.min - 0.5 || order > this.max + 0.5) {\n    //   return NaN;\n    // }\n\n    var percent = this.calcPercent(order, this.min, this.max);\n    return this.calcValue(percent, this.rangeMin(), this.rangeMax());\n  };\n\n  Category.prototype.invert = function (scaledValue) {\n    var domainRange = this.max - this.min;\n    var percent = this.calcPercent(scaledValue, this.rangeMin(), this.rangeMax());\n    var idx = Math.round(domainRange * percent) + this.min;\n\n    if (idx < this.min || idx > this.max) {\n      return NaN;\n    }\n\n    return this.values[idx];\n  };\n\n  Category.prototype.getText = function (value) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var v = value; // value为index\n\n    if (isNumber(value) && !this.values.includes(value)) {\n      v = this.values[v];\n    }\n\n    return _super.prototype.getText.apply(this, __spreadArrays([v], args));\n  }; // 复写属性\n\n\n  Category.prototype.initCfg = function () {\n    this.tickMethod = 'cat';\n  }; // 设置 min, max\n\n\n  Category.prototype.setDomain = function () {\n    // 用户有可能设置 min\n    if (isNil(this.getConfig('min'))) {\n      this.min = 0;\n    }\n\n    if (isNil(this.getConfig('max'))) {\n      var size = this.values.length;\n      this.max = size > 1 ? size - 1 : size;\n    } // domain 改变时清除缓存\n\n\n    if (this.cache) {\n      this.cache.clear();\n    }\n  };\n\n  return Category;\n}(Base);\n\nexport default Category;","map":{"version":3,"sources":["../../src/category/base.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { __extends, __spreadArrays } from \"tslib\";\nimport { indexOf, isNil, isNumber } from '@antv/util';\nimport Base from '../base';\n/**\n * 分类度量\n * @class\n */\nvar Category = /** @class */ (function (_super) {\n    __extends(Category, _super);\n    function Category() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'cat';\n        _this.isCategory = true;\n        // 用于缓存 translate 函数\n        _this.cache = new Map();\n        return _this;\n    }\n    Category.prototype.translate = function (value) {\n        if (this.cache.has(value)) {\n            return this.cache.get(value);\n        }\n        var index = indexOf(this.values, value);\n        if (index === -1) {\n            index = isNumber(value) ? value : NaN;\n        }\n        this.cache.set(value, index);\n        return index;\n    };\n    Category.prototype.scale = function (value) {\n        var order = this.translate(value);\n        // 分类数据允许 0.5 范围内调整\n        // if (order < this.min - 0.5 || order > this.max + 0.5) {\n        //   return NaN;\n        // }\n        var percent = this.calcPercent(order, this.min, this.max);\n        return this.calcValue(percent, this.rangeMin(), this.rangeMax());\n    };\n    Category.prototype.invert = function (scaledValue) {\n        var domainRange = this.max - this.min;\n        var percent = this.calcPercent(scaledValue, this.rangeMin(), this.rangeMax());\n        var idx = Math.round(domainRange * percent) + this.min;\n        if (idx < this.min || idx > this.max) {\n            return NaN;\n        }\n        return this.values[idx];\n    };\n    Category.prototype.getText = function (value) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var v = value;\n        // value为index\n        if (isNumber(value) && !this.values.includes(value)) {\n            v = this.values[v];\n        }\n        return _super.prototype.getText.apply(this, __spreadArrays([v], args));\n    };\n    // 复写属性\n    Category.prototype.initCfg = function () {\n        this.tickMethod = 'cat';\n    };\n    // 设置 min, max\n    Category.prototype.setDomain = function () {\n        // 用户有可能设置 min\n        if (isNil(this.getConfig('min'))) {\n            this.min = 0;\n        }\n        if (isNil(this.getConfig('max'))) {\n            var size = this.values.length;\n            this.max = size > 1 ? size - 1 : size;\n        }\n        // domain 改变时清除缓存\n        if (this.cache) {\n            this.cache.clear();\n        }\n    };\n    return Category;\n}(Base));\nexport default Category;\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}