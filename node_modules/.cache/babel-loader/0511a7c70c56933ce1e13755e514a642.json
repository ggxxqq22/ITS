{"ast":null,"code":"var _jsxFileName = \"/home/zhiguangda/ITS/deckgl/src/components/lineChart/main.js\";\nimport * as d3 from 'd3';\nimport React, { useState, useCallback, useEffect, Fragment, Component } from 'react';\nimport { ColorLegend } from \"./ColorLegend\";\nimport './line.css';\nconst width = 960;\nconst height = 500;\nconst margin = {\n  top: 20,\n  right: 200,\n  bottom: 65,\n  left: 150\n};\nvar innerWidth = width - margin.right - margin.left;\nvar innerHeight = height - margin.top - margin.bottom;\nconst colorLegendLabel = 'country';\nconst circleRadius = 5;\nconst colorScale = d3.scaleOrdinal();\nconst countrylist = ['China', 'US', 'Japan', 'Italy', 'France', 'United Kingdom'];\nconst colorTable = ['#E25A42', '#F2DA57', '#42A5B3', '#A0B700', '#193556', '#137B80'];\ncolorScale.domain(countrylist).range(colorTable);\nconst totalTime = 10000; // let currentTime=new Date(2020,1,22);\n\nconst yScale = d3.scaleLinear().domain([0, 100000]).range([innerHeight, 0]);\nconst yAxisGenerator = d3.axisLeft(); // .tickValues(d3.range(0, 3, 5));\n\nlet xdomain = [new Date(2020, 0, 22), new Date()];\nlet xScale = d3.scaleTime().domain(xdomain).range([0, innerWidth]);\nconst xAxisGenerator = d3.axisBottom();\nlet covidMap = new Map(); //数据格式\n//{\n//  {\n//  {\n//  'country':{\n//      time1:\n//      time2:\n//      ...\n//  }\n//\n//  }\n//}\n\nlet dateKey = [];\nlet sorted = new Map();\nlet dataFlow = [];\nlet lineData = [];\n\nfunction getCovid() {\n  return new Promise(resolve => {\n    d3.csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv').then(d => {\n      d.map((i, index) => {\n        for (let k in i) {\n          let t = new Date(k);\n\n          if (t.getDate()) {\n            i[k] = parseInt(i[k]);\n          }\n        }\n\n        if (!covidMap.has(i['Country/Region'])) {\n          covidMap.set(i['Country/Region'], i);\n        } else {\n          let tmp = covidMap.get(i['Country/Region']);\n\n          for (let k in tmp) {\n            // console.log(k)\n            let d = new Date(k);\n\n            if (d.getDate()) {\n              if (dateKey.indexOf(k) === -1) {\n                dateKey.push(k);\n              } // console.log(tmp[k])\n\n\n              tmp[k] = tmp[k] + i[k]; // console.log(tmp)\n            }\n          }\n        }\n      }); //这么做好像没有什么用，曲线图是将每天的数据\n\n      console.log(covidMap); // dateKey.forEach(d=>{\n      //     console.log(new Date(d))\n      // })\n\n      countrylist.map((d, index) => {\n        let c = {\n          color: colorTable[index],\n          country: d,\n          path: []\n        };\n\n        for (let k in covidMap.get(d)) {\n          let tmp = new Date(k);\n\n          if (tmp.getDate()) {\n            // console.log('k',k)\n            let t = new Date(tmp.getFullYear(), tmp.getMonth(), tmp.getDate());\n            c.path.push([tmp, covidMap.get(d)[k]]);\n          }\n        }\n\n        lineData.push(c);\n      });\n      console.log(lineData);\n      resolve(); // dateKey.forEach(k=>{\n      //     let arrayMap=Array.from(covidMap)\n      //     console.log('arrayMap',arrayMap);\n      //     let tmp=[]\n      //     arrayMap.forEach(d=>{\n      //         if(countrylist.indexOf(d[0])!==-1){\n      //             // tmp.push({\n      //             //     Country:d[0]\n      //             //     Value:\n      //             // })\n      //         }\n      //     })\n      //\n      //     sorted[k]= arrayMap.sort((a,b)=>{\n      //         if(a[1][k]>b[1][k]){\n      //             return -1\n      //         }\n      //         else return 1\n      //     })\n      //     // console.log(sorted[k])\n      // })\n      // console.log(sorted)\n      // for(let i in sorted){\n      //\n      // }\n    });\n  });\n}\n\nlet last = array => array[array.length - 1]; // var xAxisMajor = d3.axisBottom().scale(xScale);\n// var xAxisMinor = d3.axisBottom().scale(xScale).ticks(50);\n// const circleRadius = 7;\n// const colorLegendLabel='city'\n// const colorScale = d3.scaleOrdinal()\n// let range=[];\n// if(keys){\n//     keys.forEach((d,i)=>{\n//             range.push(d3.interpolateSpectral(i/8))\n//         }\n//     )\n//     colorScale.domain(keys)\n//         .range(range)\n// }\n//\n// }\n\n\nfunction setData(day) {\n  let data = [];\n  lineData.map(x => {\n    let tmp = [];\n    x.path.map((i, index) => {\n      if (index > day) {\n        tmp.push(x.path[day]);\n      } else {\n        tmp.push(i);\n      }\n    });\n    data.push({\n      color: x.color,\n      country: x.country,\n      path: tmp\n    });\n  });\n  return data;\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      day: 0,\n      linedata: [],\n      yScale: d3.scaleLinear().domain([0, 10000]).range([innerHeight, 0]).nice(),\n      lineGenerator: d3.line() // .curve(d3.curveCatmullRom)\n      .x(d => xScale(d[0])).y(d => this.state.yScale(d[1]))\n    };\n  }\n\n  componentDidMount() {\n    let testData = []; //     [{\n    //     path:[[new Date(2020,0,22),1000],[new Date(2020,1,10),10000]]\n    // }]\n\n    let p1 = getCovid();\n    p1.then(result => {\n      let svg = d3.select('svg');\n      const g = svg.append(\"g\").attr('id', 'Axis').attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n      let gx = g.append(\"g\") // .call(xAxisGenerator)\n      .attr(\"transform\", `translate(0, ${innerHeight})`);\n      let gy = g.append(\"g\").attr('id', 'yAxis');\n      gy.call(yAxisGenerator.scale(this.state.yScale));\n      let p = gx.transition().duration(2000).call(xAxisGenerator.scale(xScale)).end();\n      p.then();\n      svg.append('g').attr('id', 'line').attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n      svg.append('g').attr('id', 'text').attr(\"transform\", `translate(${margin.left}, ${margin.top})`); // let lineg=svg.append('g');\n      //\n      // let line=lineg.selectAll('path')\n      //     .data(this.state.linedata)\n      //     .join('path')\n      //\n      // line\n      //     .attr(\"fill\", \"none\")\n      //     .attr(\"stroke\", \"black\")\n      //     .attr(\"stroke-width\", 2.5)\n      //     .attr(\"stroke-linejoin\", \"round\")\n      //     .attr(\"stroke-linecap\", \"round\")\n      //     .attr(\"d\",lineGenerator(this.state.linedata))\n      // let lineg=d3.select('#line');\n      // let line=lineg.selectAll('path')\n      //     .data(testData)\n      //     .join('path')\n      //     .attr(\"fill\", \"none\")\n      //     .attr(\"stroke\", \"black\")\n      //     .attr(\"stroke-width\", 2.5)\n      //     .attr(\"stroke-linejoin\", \"round\")\n      //     .attr(\"stroke-linecap\", \"round\")\n      //     // .attr(\"d\",lineGenerator(this.state.linedata[0].path))\n      //     .attr(\"d\",d=>{\n      //         console.log('d',lineGenerator(d.path))\n      //         return lineGenerator(d.path)\n      //     });\n      // setTimeout(function () {\n      //\n      //     this.setState({\n      //         linedata: newData\n      //     })\n      // },1000)\n\n      this._animate();\n    });\n  }\n\n  _animate() {\n    let newData = setData(this.state.day);\n    console.log('newData', newData);\n    let max = -1;\n    newData.map(x => {\n      x.path.map(t => {\n        if (t[1] > max) {\n          max = t[1];\n        }\n      });\n    });\n\n    if (this.state.yScale.domain()[1] < max) {\n      this.state.yScale.domain([0, max]);\n      let gy = d3.select('#yAxis');\n      gy.transition().duration(500).call(yAxisGenerator.scale(this.state.yScale));\n    }\n\n    this.setState({\n      linedata: newData\n    });\n    let text = d3.select('#text');\n    text.selectAll('text').data(this.state.linedata).join('text').property('_next', function (d) {\n      console.log(d);\n      return d.path[this.state.day][1];\n    }.bind(this)).property('_current', function (d) {\n      if (this.state.day !== 0) {\n        return d.path[this.state.day - 1][1];\n      } else return d.path[this.state.day][1];\n    }.bind(this)).transition().duration(500).ease(d3.easeLinear).textTween(function (d) {\n      // console.log('d',d);\n      // console.log('day',this.state.day)\n      const i = d3.interpolate(this._current, this._next);\n      return function (t) {\n        return this._cuurent = i(t).toFixed(0);\n      };\n    }) // .text(d=>d.path[this.state.day][1])\n    .attr('transform', d => `translate(${xScale(d.path[this.state.day][0])}, ${this.state.yScale(d.path[this.state.day][1])})`).style(\"font-family\", \"monospace\").style(\"fill\", d => d.color);\n    let lineg = d3.select('#line');\n    let line = lineg.selectAll('path').data(this.state.linedata).join('path');\n    let p = line.attr(\"fill\", \"none\").attr(\"stroke\", d => d.color).attr(\"stroke-width\", 2.5).attr(\"stroke-linejoin\", \"round\").attr(\"stroke-linecap\", \"round\").transition().ease(d3.easeLinear).duration(500).attr(\"d\", d => this.state.lineGenerator(d.path)).end();\n    p.then(() => {\n      if (this.state.day < this.state.linedata[0].path.length - 1) {\n        // let y = d3.scaleLinear()\n        //     .domain([0, 1000])\n        //     .range([innerHeight, 0]);\n        // let gy=d3.select('#yAxis');\n        // gy.transition().duration(500).call(yAxisGenerator.scale(y))\n        xdomain = [new Date(2020, 0, 22), new Date(2020, 3, 1)];\n        this.state.day += 1;\n        this._animationFrame = window.requestAnimationFrame(this._animate.bind(this));\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    if (this._animationFrame) {\n      window.cancelAnimationFrame(this._animationFrame);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: 'line',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"svg\", {\n      width: width,\n      height: height,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 14\n      }\n    }, /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${margin.left},${margin.top})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${innerWidth + 60}, 60)`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 22\n      }\n    }, /*#__PURE__*/React.createElement(\"text\", {\n      x: 35,\n      y: -25,\n      className: \"axis-label\",\n      textAnchor: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 26\n      }\n    }, colorLegendLabel), /*#__PURE__*/React.createElement(ColorLegend, {\n      tickSpacing: 22,\n      tickSize: 10,\n      tickTextOffset: 12,\n      tickSize: circleRadius,\n      colorScale: colorScale // onHover={setHoveredValue}\n      // hoveredValue={hoveredValue}\n      // fadeOpacity={fadeOpacity}\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 26\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/home/zhiguangda/ITS/deckgl/src/components/lineChart/main.js"],"names":["d3","React","useState","useCallback","useEffect","Fragment","Component","ColorLegend","width","height","margin","top","right","bottom","left","innerWidth","innerHeight","colorLegendLabel","circleRadius","colorScale","scaleOrdinal","countrylist","colorTable","domain","range","totalTime","yScale","scaleLinear","yAxisGenerator","axisLeft","xdomain","Date","xScale","scaleTime","xAxisGenerator","axisBottom","covidMap","Map","dateKey","sorted","dataFlow","lineData","getCovid","Promise","resolve","csv","then","d","map","i","index","k","t","getDate","parseInt","has","set","tmp","get","indexOf","push","console","log","c","color","country","path","getFullYear","getMonth","last","array","length","setData","day","data","x","App","constructor","props","state","linedata","nice","lineGenerator","line","y","componentDidMount","testData","p1","result","svg","select","g","append","attr","gx","gy","call","scale","p","transition","duration","end","_animate","newData","max","setState","text","selectAll","join","property","bind","ease","easeLinear","textTween","interpolate","_current","_next","_cuurent","toFixed","style","lineg","_animationFrame","window","requestAnimationFrame","componentWillUnmount","cancelAnimationFrame","render"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAOC,KAAP,IAAeC,QAAf,EAAyBC,WAAzB,EAAsCC,SAAtC,EAAiDC,QAAjD,EAA2DC,SAA3D,QAA2E,OAA3E;AAEA,SAAQC,WAAR,QAA0B,eAA1B;AACA,OAAO,YAAP;AACA,MAAMC,KAAK,GAAG,GAAd;AACA,MAAMC,MAAM,GAAG,GAAf;AACA,MAAMC,MAAM,GAAG;AAAEC,EAAAA,GAAG,EAAE,EAAP;AAAWC,EAAAA,KAAK,EAAE,GAAlB;AAAuBC,EAAAA,MAAM,EAAE,EAA/B;AAAmCC,EAAAA,IAAI,EAAE;AAAzC,CAAf;AACA,IAAIC,UAAU,GAAGP,KAAK,GAAGE,MAAM,CAACE,KAAf,GAAuBF,MAAM,CAACI,IAA/C;AACA,IAAIE,WAAW,GAAGP,MAAM,GAAGC,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACG,MAA/C;AACA,MAAMI,gBAAgB,GAAC,SAAvB;AACA,MAAMC,YAAY,GAAC,CAAnB;AACA,MAAMC,UAAU,GAAGnB,EAAE,CAACoB,YAAH,EAAnB;AACA,MAAMC,WAAW,GAAC,CAAC,OAAD,EAAS,IAAT,EAAc,OAAd,EAAsB,OAAtB,EAA8B,QAA9B,EAAuC,gBAAvC,CAAlB;AACA,MAAMC,UAAU,GAAC,CAAC,SAAD,EAAW,SAAX,EAAqB,SAArB,EAA+B,SAA/B,EAAyC,SAAzC,EAAmD,SAAnD,CAAjB;AACAH,UAAU,CAACI,MAAX,CAAkBF,WAAlB,EACKG,KADL,CACWF,UADX;AAGA,MAAMG,SAAS,GAAC,KAAhB,C,CACA;;AAEA,MAAMC,MAAM,GAAG1B,EAAE,CAAC2B,WAAH,GACVJ,MADU,CACH,CAAC,CAAD,EAAI,MAAJ,CADG,EAEVC,KAFU,CAEJ,CAACR,WAAD,EAAc,CAAd,CAFI,CAAf;AAGA,MAAMY,cAAc,GAAG5B,EAAE,CAAC6B,QAAH,EAAvB,C,CACI;;AACA,IAAIC,OAAO,GAAC,CAAC,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAAD,EAAwB,IAAIA,IAAJ,EAAxB,CAAZ;AACA,IAAIC,MAAM,GAAChC,EAAE,CAACiC,SAAH,GACNV,MADM,CACCO,OADD,EAENN,KAFM,CAEA,CAAC,CAAD,EAAIT,UAAJ,CAFA,CAAX;AAGA,MAAMmB,cAAc,GAAGlC,EAAE,CAACmC,UAAH,EAAvB;AAGA,IAAIC,QAAQ,GAAC,IAAIC,GAAJ,EAAb,C,CACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACI,IAAIC,OAAO,GAAC,EAAZ;AACA,IAAIC,MAAM,GAAC,IAAIF,GAAJ,EAAX;AACA,IAAIG,QAAQ,GAAC,EAAb;AAEA,IAAIC,QAAQ,GAAC,EAAb;;AACA,SAASC,QAAT,GAAoB;AAChB,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC1B5C,IAAAA,EAAE,CAAC6C,GAAH,CAAO,wJAAP,EAAiKC,IAAjK,CAAsKC,CAAC,IAAE;AACzKA,MAAAA,CAAC,CAACC,GAAF,CAAM,CAACC,CAAD,EAAGC,KAAH,KAAW;AACb,aAAI,IAAIC,CAAR,IAAaF,CAAb,EAAe;AACX,cAAIG,CAAC,GAAC,IAAIrB,IAAJ,CAASoB,CAAT,CAAN;;AACA,cAAGC,CAAC,CAACC,OAAF,EAAH,EAAe;AACXJ,YAAAA,CAAC,CAACE,CAAD,CAAD,GAAKG,QAAQ,CAACL,CAAC,CAACE,CAAD,CAAF,CAAb;AACH;AACJ;;AACD,YAAG,CAACf,QAAQ,CAACmB,GAAT,CAAaN,CAAC,CAAC,gBAAD,CAAd,CAAJ,EAAsC;AAClCb,UAAAA,QAAQ,CAACoB,GAAT,CAAaP,CAAC,CAAC,gBAAD,CAAd,EAAiCA,CAAjC;AACH,SAFD,MAGI;AACA,cAAIQ,GAAG,GAACrB,QAAQ,CAACsB,GAAT,CAAaT,CAAC,CAAC,gBAAD,CAAd,CAAR;;AACA,eAAI,IAAIE,CAAR,IAAaM,GAAb,EAAiB;AACb;AACA,gBAAIV,CAAC,GAAC,IAAIhB,IAAJ,CAASoB,CAAT,CAAN;;AACA,gBAAGJ,CAAC,CAACM,OAAF,EAAH,EAAe;AACX,kBAAGf,OAAO,CAACqB,OAAR,CAAgBR,CAAhB,MAAqB,CAAC,CAAzB,EAA2B;AACvBb,gBAAAA,OAAO,CAACsB,IAAR,CAAaT,CAAb;AACH,eAHU,CAIX;;;AACAM,cAAAA,GAAG,CAACN,CAAD,CAAH,GAAQM,GAAG,CAACN,CAAD,CAAH,GAAOF,CAAC,CAACE,CAAD,CAAhB,CALW,CAMX;AACH;AACJ;AACJ;AACA,OAzBL,EADyK,CA4BrK;;AACAU,MAAAA,OAAO,CAACC,GAAR,CAAY1B,QAAZ,EA7BqK,CA8BrK;AACA;AACA;;AACAf,MAAAA,WAAW,CAAC2B,GAAZ,CAAgB,CAACD,CAAD,EAAGG,KAAH,KAAW;AACvB,YAAIa,CAAC,GAAC;AACFC,UAAAA,KAAK,EAAC1C,UAAU,CAAC4B,KAAD,CADd;AAEFe,UAAAA,OAAO,EAAElB,CAFP;AAGFmB,UAAAA,IAAI,EAAC;AAHH,SAAN;;AAKA,aAAI,IAAIf,CAAR,IAAaf,QAAQ,CAACsB,GAAT,CAAaX,CAAb,CAAb,EAA6B;AACzB,cAAIU,GAAG,GAAC,IAAI1B,IAAJ,CAASoB,CAAT,CAAR;;AACA,cAAGM,GAAG,CAACJ,OAAJ,EAAH,EAAiB;AACb;AACA,gBAAID,CAAC,GAAC,IAAIrB,IAAJ,CAAS0B,GAAG,CAACU,WAAJ,EAAT,EAA2BV,GAAG,CAACW,QAAJ,EAA3B,EAA0CX,GAAG,CAACJ,OAAJ,EAA1C,CAAN;AACLU,YAAAA,CAAC,CAACG,IAAF,CAAON,IAAP,CAAY,CAACH,GAAD,EAAKrB,QAAQ,CAACsB,GAAT,CAAaX,CAAb,EAAgBI,CAAhB,CAAL,CAAZ;AACE;AACJ;;AACDV,QAAAA,QAAQ,CAACmB,IAAT,CAAcG,CAAd;AACH,OAfD;AAgBAF,MAAAA,OAAO,CAACC,GAAR,CAAYrB,QAAZ;AACAG,MAAAA,OAAO,GAlD8J,CAoDrK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH,KA9ED;AA+EH,GAhFM,CAAP;AAiFH;;AAEL,IAAIyB,IAAI,GAAGC,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAAzB,C,CAKI;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AACA;;;AAIA,SAASC,OAAT,CAAiBC,GAAjB,EAAsB;AAClB,MAAIC,IAAI,GAAC,EAAT;AACAjC,EAAAA,QAAQ,CAACO,GAAT,CAAc2B,CAAD,IAAK;AACd,QAAIlB,GAAG,GAAC,EAAR;AACAkB,IAAAA,CAAC,CAACT,IAAF,CAAOlB,GAAP,CAAW,CAACC,CAAD,EAAGC,KAAH,KAAW;AAClB,UAAGA,KAAK,GAACuB,GAAT,EAAa;AACThB,QAAAA,GAAG,CAACG,IAAJ,CAASe,CAAC,CAACT,IAAF,CAAOO,GAAP,CAAT;AACH,OAFD,MAGI;AACAhB,QAAAA,GAAG,CAACG,IAAJ,CAASX,CAAT;AACH;AACJ,KAPD;AAQAyB,IAAAA,IAAI,CAACd,IAAL,CAAU;AACNI,MAAAA,KAAK,EAACW,CAAC,CAACX,KADF;AAENC,MAAAA,OAAO,EAACU,CAAC,CAACV,OAFJ;AAGNC,MAAAA,IAAI,EAACT;AAHC,KAAV;AAKH,GAfD;AAgBA,SAAOiB,IAAP;AACH;;AAED,eAAe,MAAME,GAAN,SAAkBtE,SAAlB,CAA2B;AAEtCuE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAW;AACPN,MAAAA,GAAG,EAAC,CADG;AAEPO,MAAAA,QAAQ,EAAC,EAFF;AAGPtD,MAAAA,MAAM,EAAC1B,EAAE,CAAC2B,WAAH,GACFJ,MADE,CACK,CAAC,CAAD,EAAI,KAAJ,CADL,EAEFC,KAFE,CAEI,CAACR,WAAD,EAAc,CAAd,CAFJ,EAGFiE,IAHE,EAHA;AAOPC,MAAAA,aAAa,EAAGlF,EAAE,CAACmF,IAAH,GAChB;AADgB,OAEXR,CAFW,CAET5B,CAAC,IAAIf,MAAM,CAACe,CAAC,CAAC,CAAD,CAAF,CAFF,EAGXqC,CAHW,CAGTrC,CAAC,IAAI,KAAKgC,KAAL,CAAWrD,MAAX,CAAkBqB,CAAC,CAAC,CAAD,CAAnB,CAHI;AAPT,KAAX;AAaH;;AAEDsC,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,QAAQ,GACR,EADJ,CADgB,CAGhB;AACA;AACA;;AACA,QAAIC,EAAE,GAAC7C,QAAQ,EAAf;AACA6C,IAAAA,EAAE,CAACzC,IAAH,CAAQ0C,MAAM,IAAE;AACZ,UAAIC,GAAG,GAACzF,EAAE,CAAC0F,MAAH,CAAU,KAAV,CAAR;AACA,YAAMC,CAAC,GAAGF,GAAG,CAACG,MAAJ,CAAW,GAAX,EACLC,IADK,CACA,IADA,EACK,MADL,EAELA,IAFK,CAEA,WAFA,EAEc,aAAYnF,MAAM,CAACI,IAAK,KAAIJ,MAAM,CAACC,GAAI,GAFrD,CAAV;AAIA,UAAImF,EAAE,GAACH,CAAC,CAACC,MAAF,CAAS,GAAT,EACP;AADO,OAEFC,IAFE,CAEG,WAFH,EAEiB,gBAAe7E,WAAY,GAF5C,CAAP;AAGA,UAAI+E,EAAE,GAACJ,CAAC,CAACC,MAAF,CAAS,GAAT,EAAcC,IAAd,CAAmB,IAAnB,EAAwB,OAAxB,CAAP;AACIE,MAAAA,EAAE,CAACC,IAAH,CAAQpE,cAAc,CAACqE,KAAf,CAAqB,KAAKlB,KAAL,CAAWrD,MAAhC,CAAR;AACJ,UAAIwE,CAAC,GAACJ,EAAE,CAACK,UAAH,GAAgBC,QAAhB,CAAyB,IAAzB,EACDJ,IADC,CACI9D,cAAc,CAAC+D,KAAf,CAAqBjE,MAArB,CADJ,EAEDqE,GAFC,EAAN;AAGAH,MAAAA,CAAC,CAACpD,IAAF;AASA2C,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,IAArB,EAA0B,MAA1B,EACKA,IADL,CACU,WADV,EACwB,aAAYnF,MAAM,CAACI,IAAK,KAAIJ,MAAM,CAACC,GAAI,GAD/D;AAGA8E,MAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,IAArB,EAA0B,MAA1B,EACKA,IADL,CACU,WADV,EACwB,aAAYnF,MAAM,CAACI,IAAK,KAAIJ,MAAM,CAACC,GAAI,GAD/D,EA1BY,CA4BZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAK2F,QAAL;AACH,KA/DD;AAgEH;;AACDA,EAAAA,QAAQ,GAAE;AAGF,QAAIC,OAAO,GAAC/B,OAAO,CAAC,KAAKO,KAAL,CAAWN,GAAZ,CAAnB;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsByC,OAAtB;AACA,QAAIC,GAAG,GAAC,CAAC,CAAT;AACAD,IAAAA,OAAO,CAACvD,GAAR,CAAY2B,CAAC,IAAE;AACXA,MAAAA,CAAC,CAACT,IAAF,CAAOlB,GAAP,CAAWI,CAAC,IAAE;AACV,YAAGA,CAAC,CAAC,CAAD,CAAD,GAAKoD,GAAR,EAAY;AACRA,UAAAA,GAAG,GAACpD,CAAC,CAAC,CAAD,CAAL;AACH;AACJ,OAJD;AAKH,KAND;;AAOA,QAAG,KAAK2B,KAAL,CAAWrD,MAAX,CAAkBH,MAAlB,GAA2B,CAA3B,IAA8BiF,GAAjC,EAAqC;AACjC,WAAKzB,KAAL,CAAWrD,MAAX,CAAkBH,MAAlB,CAAyB,CAAC,CAAD,EAAGiF,GAAH,CAAzB;AACA,UAAIT,EAAE,GAAC/F,EAAE,CAAC0F,MAAH,CAAU,QAAV,CAAP;AACAK,MAAAA,EAAE,CAACI,UAAH,GAAgBC,QAAhB,CAAyB,GAAzB,EAA8BJ,IAA9B,CAAmCpE,cAAc,CAACqE,KAAf,CAAqB,KAAKlB,KAAL,CAAWrD,MAAhC,CAAnC;AACH;;AAED,SAAK+E,QAAL,CAAc;AACFzB,MAAAA,QAAQ,EAAEuB;AADR,KAAd;AAIJ,QAAIG,IAAI,GAAC1G,EAAE,CAAC0F,MAAH,CAAU,OAAV,CAAT;AACIgB,IAAAA,IAAI,CAACC,SAAL,CAAe,MAAf,EACKjC,IADL,CACU,KAAKK,KAAL,CAAWC,QADrB,EAEK4B,IAFL,CAEU,MAFV,EAGKC,QAHL,CAGc,OAHd,EAGsB,UAAS9D,CAAT,EAAW;AACzBc,MAAAA,OAAO,CAACC,GAAR,CAAYf,CAAZ;AACA,aAAOA,CAAC,CAACmB,IAAF,CAAO,KAAKa,KAAL,CAAWN,GAAlB,EAAuB,CAAvB,CAAP;AACH,KAHiB,CAGhBqC,IAHgB,CAGX,IAHW,CAHtB,EAOKD,QAPL,CAOc,UAPd,EAOyB,UAAU9D,CAAV,EAAa;AAC9B,UAAG,KAAKgC,KAAL,CAAWN,GAAX,KAAiB,CAApB,EAAsB;AAClB,eAAO1B,CAAC,CAACmB,IAAF,CAAO,KAAKa,KAAL,CAAWN,GAAX,GAAe,CAAtB,EAAyB,CAAzB,CAAP;AACH,OAFD,MAGK,OAAO1B,CAAC,CAACmB,IAAF,CAAO,KAAKa,KAAL,CAAWN,GAAlB,EAAuB,CAAvB,CAAP;AAER,KANoB,CAMnBqC,IANmB,CAMd,IANc,CAPzB,EAcKX,UAdL,GAeKC,QAfL,CAec,GAfd,EAgBKW,IAhBL,CAgBU/G,EAAE,CAACgH,UAhBb,EAiBKC,SAjBL,CAiBe,UAASlE,CAAT,EAAY;AACnB;AACA;AACA,YAAME,CAAC,GAAGjD,EAAE,CAACkH,WAAH,CAAe,KAAKC,QAApB,EAA8B,KAAKC,KAAnC,CAAV;AACA,aAAO,UAAShE,CAAT,EAAY;AAAE,eAAO,KAAKiE,QAAL,GAAcpE,CAAC,CAACG,CAAD,CAAD,CAAKkE,OAAL,CAAa,CAAb,CAArB;AAAuC,OAA5D;AACH,KAtBL,EAuBI;AAvBJ,KAwBKzB,IAxBL,CAwBU,WAxBV,EAwBsB9C,CAAC,IAAI,aAAYf,MAAM,CAACe,CAAC,CAACmB,IAAF,CAAO,KAAKa,KAAL,CAAWN,GAAlB,EAAuB,CAAvB,CAAD,CAA4B,KAAI,KAAKM,KAAL,CAAWrD,MAAX,CAAkBqB,CAAC,CAACmB,IAAF,CAAO,KAAKa,KAAL,CAAWN,GAAlB,EAAuB,CAAvB,CAAlB,CAA6C,GAxB1H,EAyBK8C,KAzBL,CAyBW,aAzBX,EAyB0B,WAzB1B,EA0BKA,KA1BL,CA0BW,MA1BX,EA0BmBxE,CAAC,IAAIA,CAAC,CAACiB,KA1B1B;AA4BA,QAAIwD,KAAK,GAACxH,EAAE,CAAC0F,MAAH,CAAU,OAAV,CAAV;AACA,QAAIP,IAAI,GAACqC,KAAK,CAACb,SAAN,CAAgB,MAAhB,EACJjC,IADI,CACC,KAAKK,KAAL,CAAWC,QADZ,EAEJ4B,IAFI,CAEC,MAFD,CAAT;AAGA,QAAIV,CAAC,GAACf,IAAI,CACLU,IADC,CACI,MADJ,EACY,MADZ,EAEDA,IAFC,CAEI,QAFJ,EAEc9C,CAAC,IAAEA,CAAC,CAACiB,KAFnB,EAGD6B,IAHC,CAGI,cAHJ,EAGoB,GAHpB,EAIDA,IAJC,CAII,iBAJJ,EAIuB,OAJvB,EAKDA,IALC,CAKI,gBALJ,EAKsB,OALtB,EAMDM,UANC,GAODY,IAPC,CAOI/G,EAAE,CAACgH,UAPP,EAQDZ,QARC,CAQQ,GARR,EASDP,IATC,CASI,GATJ,EASQ9C,CAAC,IAAE,KAAKgC,KAAL,CAAWG,aAAX,CAAyBnC,CAAC,CAACmB,IAA3B,CATX,EAUDmC,GAVC,EAAN;AAWAH,IAAAA,CAAC,CAACpD,IAAF,CAAO,MAAI;AACP,UAAG,KAAKiC,KAAL,CAAWN,GAAX,GAAe,KAAKM,KAAL,CAAWC,QAAX,CAAoB,CAApB,EAAuBd,IAAvB,CAA4BK,MAA5B,GAAmC,CAArD,EAAuD;AACnD;AACA;AACA;AACA;AACA;AACAzC,QAAAA,OAAO,GAAC,CAAC,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB,CAAD,EAAwB,IAAIA,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAAxB,CAAR;AACA,aAAKgD,KAAL,CAAWN,GAAX,IAAgB,CAAhB;AACA,aAAKgD,eAAL,GAAuBC,MAAM,CAACC,qBAAP,CAA6B,KAAKrB,QAAL,CAAcQ,IAAd,CAAmB,IAAnB,CAA7B,CAAvB;AACH;AACJ,KAXD;AAcP;;AACDc,EAAAA,oBAAoB,GAAG;AACnB,QAAI,KAAKH,eAAT,EAA0B;AACtBC,MAAAA,MAAM,CAACG,oBAAP,CAA4B,KAAKJ,eAAjC;AACH;AACJ;;AAEAK,EAAAA,MAAM,GAAG;AAKL,wBAAO;AAAK,MAAA,SAAS,EAAE,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACH;AAAK,MAAA,KAAK,EAAEtH,KAAZ;AAAmB,MAAA,MAAM,EAAEC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAG,MAAA,SAAS,EAAG,aAAYC,MAAM,CAACI,IAAK,IAAGJ,MAAM,CAACC,GAAI,GAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAG,MAAA,SAAS,EAAG,aAAYI,UAAU,GAAG,EAAG,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAM,MAAA,CAAC,EAAE,EAAT;AAAa,MAAA,CAAC,EAAE,CAAC,EAAjB;AAAqB,MAAA,SAAS,EAAC,YAA/B;AAA4C,MAAA,UAAU,EAAC,QAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKE,gBADL,CADJ,eAII,oBAAC,WAAD;AACI,MAAA,WAAW,EAAE,EADjB;AAEI,MAAA,QAAQ,EAAE,EAFd;AAGI,MAAA,cAAc,EAAE,EAHpB;AAII,MAAA,QAAQ,EAAEC,YAJd;AAKI,MAAA,UAAU,EAAEC,UALhB,CAMI;AACA;AACA;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ,CADJ,CADG,CAAP;AAsBH;;AA9MoC","sourcesContent":["import * as d3 from 'd3'\nimport React, {useState, useCallback, useEffect, Fragment, Component} from 'react';\n\nimport {ColorLegend} from \"./ColorLegend\";\nimport './line.css'\nconst width = 960;\nconst height = 500;\nconst margin = { top: 20, right: 200, bottom: 65, left: 150 };\nvar innerWidth = width - margin.right - margin.left;\nvar innerHeight = height - margin.top - margin.bottom;\nconst colorLegendLabel='country';\nconst circleRadius=5;\nconst colorScale = d3.scaleOrdinal()\nconst countrylist=['China','US','Japan','Italy','France','United Kingdom'];\nconst colorTable=['#E25A42','#F2DA57','#42A5B3','#A0B700','#193556','#137B80'];\ncolorScale.domain(countrylist)\n    .range(colorTable)\n\nconst totalTime=10000;\n// let currentTime=new Date(2020,1,22);\n\nconst yScale = d3.scaleLinear()\n    .domain([0, 100000])\n    .range([innerHeight, 0]);\nconst yAxisGenerator = d3.axisLeft()\n    // .tickValues(d3.range(0, 3, 5));\n    let xdomain=[new Date(2020, 0, 22), new Date()];\n    let xScale=d3.scaleTime()\n        .domain(xdomain)\n        .range([0, innerWidth]);\n    const xAxisGenerator = d3.axisBottom()\n\n\n    let covidMap=new Map();\n    //数据格式\n//{\n//  {\n//  {\n//  'country':{\n//      time1:\n//      time2:\n//      ...\n//  }\n//\n//  }\n//}\n    let dateKey=[];\n    let sorted=new Map();\n    let dataFlow=[];\n\n    let lineData=[]\n    function getCovid() {\n        return new Promise(resolve => {\n            d3.csv('https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv').then(d=>{\n            d.map((i,index)=>{\n                for(let k in i){\n                    let t=new Date(k)\n                    if(t.getDate()){\n                        i[k]=parseInt(i[k])\n                    }\n                }\n                if(!covidMap.has(i['Country/Region'])){\n                    covidMap.set(i['Country/Region'],i)\n                }\n                else{\n                    let tmp=covidMap.get(i['Country/Region'])\n                    for(let k in tmp){\n                        // console.log(k)\n                        let d=new Date(k);\n                        if(d.getDate()){\n                            if(dateKey.indexOf(k)===-1){\n                                dateKey.push(k)\n                            }\n                            // console.log(tmp[k])\n                            tmp[k]=(tmp[k]+i[k])\n                            // console.log(tmp)\n                        }\n                    }\n                }\n                }\n            )\n                //这么做好像没有什么用，曲线图是将每天的数据\n                console.log(covidMap)\n                // dateKey.forEach(d=>{\n                //     console.log(new Date(d))\n                // })\n                countrylist.map((d,index)=>{\n                    let c={\n                        color:colorTable[index],\n                        country: d,\n                        path:[]\n                    }\n                    for(let k in covidMap.get(d)){\n                        let tmp=new Date(k);\n                        if(tmp.getDate()){\n                            // console.log('k',k)\n                            let t=new Date(tmp.getFullYear(),tmp.getMonth(),tmp.getDate())\n                       c.path.push([tmp,covidMap.get(d)[k]])\n                        }\n                    }\n                    lineData.push(c)\n                })\n                console.log(lineData)\n                resolve()\n\n                // dateKey.forEach(k=>{\n                //     let arrayMap=Array.from(covidMap)\n                //     console.log('arrayMap',arrayMap);\n                //     let tmp=[]\n                //     arrayMap.forEach(d=>{\n                //         if(countrylist.indexOf(d[0])!==-1){\n                //             // tmp.push({\n                //             //     Country:d[0]\n                //             //     Value:\n                //             // })\n                //         }\n                //     })\n                //\n                //     sorted[k]= arrayMap.sort((a,b)=>{\n                //         if(a[1][k]>b[1][k]){\n                //             return -1\n                //         }\n                //         else return 1\n                //     })\n                //     // console.log(sorted[k])\n                // })\n                // console.log(sorted)\n                // for(let i in sorted){\n                //\n                // }\n\n            })\n        })\n    }\n\nlet last = array => array[array.length - 1];\n\n\n\n\n    // var xAxisMajor = d3.axisBottom().scale(xScale);\n    // var xAxisMinor = d3.axisBottom().scale(xScale).ticks(50);\n\n    // const circleRadius = 7;\n    // const colorLegendLabel='city'\n    // const colorScale = d3.scaleOrdinal()\n    // let range=[];\n    // if(keys){\n    //     keys.forEach((d,i)=>{\n    //             range.push(d3.interpolateSpectral(i/8))\n    //         }\n    //     )\n    //     colorScale.domain(keys)\n    //         .range(range)\n    // }\n//\n// }\n\n\n\nfunction setData(day) {\n    let data=[]\n    lineData.map((x)=>{\n        let tmp=[];\n        x.path.map((i,index)=>{\n            if(index>day){\n                tmp.push(x.path[day])\n            }\n            else{\n                tmp.push(i)\n            }\n        })\n        data.push({\n            color:x.color,\n            country:x.country,\n            path:tmp\n        })\n    })\n    return data\n}\n\nexport default class App extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state={\n            day:0,\n            linedata:[],\n            yScale:d3.scaleLinear()\n                .domain([0, 10000])\n                .range([innerHeight, 0])\n                .nice(),\n            lineGenerator : d3.line()\n            // .curve(d3.curveCatmullRom)\n                .x(d => xScale(d[0]))\n                .y(d => this.state.yScale(d[1]))\n        }\n\n    }\n\n    componentDidMount() {\n        let testData=\n            []\n        //     [{\n        //     path:[[new Date(2020,0,22),1000],[new Date(2020,1,10),10000]]\n        // }]\n        let p1=getCovid();\n        p1.then(result=>{\n            let svg=d3.select('svg');\n            const g = svg.append(\"g\")\n                .attr('id','Axis')\n                .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n            let gx=g.append(\"g\")\n            // .call(xAxisGenerator)\n                .attr(\"transform\", `translate(0, ${innerHeight})`);\n            let gy=g.append(\"g\").attr('id','yAxis')\n                gy.call(yAxisGenerator.scale(this.state.yScale));\n            let p=gx.transition().duration(2000)\n                .call(xAxisGenerator.scale(xScale))\n                .end()\n            p.then(\n                // ()=>{\n                //     let x=d3.scaleTime()\n                //         .domain([new Date(2010, 0, 1), new Date(2010, 10, 1)])\n                //         .range([0, innerWidth])\n                //     gx.transition().duration(2000)\n                //         .call(xAxisGenerator.scale(x))\n                // }\n            )\n            svg.append('g').attr('id','line')\n                .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n            svg.append('g').attr('id','text')\n                .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n            // let lineg=svg.append('g');\n            //\n            // let line=lineg.selectAll('path')\n            //     .data(this.state.linedata)\n            //     .join('path')\n            //\n            // line\n            //     .attr(\"fill\", \"none\")\n            //     .attr(\"stroke\", \"black\")\n            //     .attr(\"stroke-width\", 2.5)\n            //     .attr(\"stroke-linejoin\", \"round\")\n            //     .attr(\"stroke-linecap\", \"round\")\n            //     .attr(\"d\",lineGenerator(this.state.linedata))\n\n            // let lineg=d3.select('#line');\n            // let line=lineg.selectAll('path')\n            //     .data(testData)\n            //     .join('path')\n            //     .attr(\"fill\", \"none\")\n            //     .attr(\"stroke\", \"black\")\n            //     .attr(\"stroke-width\", 2.5)\n            //     .attr(\"stroke-linejoin\", \"round\")\n            //     .attr(\"stroke-linecap\", \"round\")\n            //     // .attr(\"d\",lineGenerator(this.state.linedata[0].path))\n            //     .attr(\"d\",d=>{\n            //         console.log('d',lineGenerator(d.path))\n            //         return lineGenerator(d.path)\n            //     });\n            // setTimeout(function () {\n            //\n            //     this.setState({\n            //         linedata: newData\n            //     })\n            // },1000)\n            this._animate()\n        });\n    }\n    _animate(){\n\n\n            let newData=setData(this.state.day)\n            console.log('newData',newData);\n            let max=-1;\n            newData.map(x=>{\n                x.path.map(t=>{\n                    if(t[1]>max){\n                        max=t[1]\n                    }\n                })\n            })\n            if(this.state.yScale.domain()[1]<max){\n                this.state.yScale.domain([0,max])\n                let gy=d3.select('#yAxis');\n                gy.transition().duration(500).call(yAxisGenerator.scale(this.state.yScale))\n            }\n\n            this.setState({\n                        linedata: newData\n                    })\n\n        let text=d3.select('#text');\n            text.selectAll('text')\n                .data(this.state.linedata)\n                .join('text')\n                .property('_next',function(d){\n                    console.log(d)\n                    return d.path[this.state.day][1]\n                }.bind(this))\n                .property('_current',function (d) {\n                    if(this.state.day!==0){\n                        return d.path[this.state.day-1][1]\n                    }\n                    else return d.path[this.state.day][1]\n\n                }.bind(this))\n                .transition()\n                .duration(500)\n                .ease(d3.easeLinear)\n                .textTween(function(d) {\n                    // console.log('d',d);\n                    // console.log('day',this.state.day)\n                    const i = d3.interpolate(this._current, this._next);\n                    return function(t) { return this._cuurent=i(t).toFixed(0); };\n                })\n                // .text(d=>d.path[this.state.day][1])\n                .attr('transform',d=> `translate(${xScale(d.path[this.state.day][0])}, ${this.state.yScale(d.path[this.state.day][1])})`)\n                .style(\"font-family\", \"monospace\")\n                .style(\"fill\", d => d.color);\n\n            let lineg=d3.select('#line');\n            let line=lineg.selectAll('path')\n                .data(this.state.linedata)\n                .join('path')\n            let p=line\n                .attr(\"fill\", \"none\")\n                .attr(\"stroke\", d=>d.color)\n                .attr(\"stroke-width\", 2.5)\n                .attr(\"stroke-linejoin\", \"round\")\n                .attr(\"stroke-linecap\", \"round\")\n                .transition()\n                .ease(d3.easeLinear)\n                .duration(500)\n                .attr(\"d\",d=>this.state.lineGenerator(d.path))\n                .end()\n            p.then(()=>{\n                if(this.state.day<this.state.linedata[0].path.length-1){\n                    // let y = d3.scaleLinear()\n                    //     .domain([0, 1000])\n                    //     .range([innerHeight, 0]);\n                    // let gy=d3.select('#yAxis');\n                    // gy.transition().duration(500).call(yAxisGenerator.scale(y))\n                    xdomain=[new Date(2020, 0, 22), new Date(2020, 3, 1)]\n                    this.state.day+=1;\n                    this._animationFrame = window.requestAnimationFrame(this._animate.bind(this));\n                }\n            })\n\n\n    }\n    componentWillUnmount() {\n        if (this._animationFrame) {\n            window.cancelAnimationFrame(this._animationFrame);\n        }\n    }\n\n     render() {\n\n\n\n\n         return <div className={'line'}>\n             <svg width={width} height={height}>\n                 <g transform={`translate(${margin.left},${margin.top})`}>\n                     <g transform={`translate(${innerWidth + 60}, 60)`}>\n                         <text x={35} y={-25} className=\"axis-label\" textAnchor=\"middle\" >\n                             {colorLegendLabel}\n                         </text>\n                         <ColorLegend\n                             tickSpacing={22}\n                             tickSize={10}\n                             tickTextOffset={12}\n                             tickSize={circleRadius}\n                             colorScale={colorScale}\n                             // onHover={setHoveredValue}\n                             // hoveredValue={hoveredValue}\n                             // fadeOpacity={fadeOpacity}\n                         />\n                     </g>\n                 </g>\n\n             </svg>\n         </div>\n     }\n}\n"]},"metadata":{},"sourceType":"module"}