{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/zhiguangda/ITS/deckgl/src/components/city/city.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useEffect, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { csv, scaleLinear, scaleOrdinal, max, format, extent } from 'd3';\nimport { useData } from './useData';\nimport { AxisBottom } from './AxisBottom';\nimport { AxisLeft } from './AxisLeft';\nimport { Marks } from './Marks';\nimport { ColorLegend } from './ColorLegend';\nimport * as d3 from 'd3';\nimport './city.css';\nconst width = 960;\nconst height = 500;\nconst margin = {\n  top: 20,\n  right: 200,\n  bottom: 65,\n  left: 90\n};\nconst xAxisLabelOffset = 50;\nconst yAxisLabelOffset = 45;\nconst innerHeight = height - margin.top - margin.bottom;\nconst innerWidth = width - margin.left - margin.right;\nconst xAxisLabel = 'Satisfaction';\nconst yAxisLabel = 'Worthwhile';\nconst colorLegendLabel = 'Area';\nconst siFormat = format('.2s');\n\nconst xAxisTickFormat = tickValue => siFormat(tickValue).replace('G', 'B');\n\nlet tmp = [];\n\nfunction getData() {\n  return new Promise(resolve => {\n    d3.csv('./happy.csv').then(d => {\n      d.map((l, index) => {\n        let pro = Object.getOwnPropertyNames(l); // console.log(l['Area']);\n\n        pro.map((n, index) => {\n          if (index > 1) {\n            if (tmp[n] === undefined) {\n              tmp[n] = {};\n            }\n\n            if (tmp[n][l['Area']] === undefined) {\n              tmp[n][l['Area']] = {};\n            }\n\n            tmp[n][l['Area']].happy = l[n];\n          }\n        }); // l.map((t,i)=>{\n        //     if(i>1){\n        //         if(data[i]===undefined){\n        //             data[i]=[]\n        //         }\n        //         // data[i].happy=\n        //         console.log(Object.getOwnPropertyNames(t))\n        //     }\n        //\n        // })\n      });\n      d3.csv('./worthwhile.csv').then(d => {\n        d.map((l, index) => {\n          let pro = Object.getOwnPropertyNames(l);\n          pro.map((n, index) => {\n            if (index > 1) {\n              if (tmp[n] === undefined) {\n                tmp[n] = {};\n              }\n\n              if (tmp[n][l['Area']] === undefined) {\n                tmp[n][l['Area']] = {};\n              }\n\n              tmp[n][l['Area']].worth = l[n];\n            }\n          });\n        });\n        console.log('data:', tmp);\n        resolve();\n      });\n    });\n  });\n}\n\nexport function City() {\n  _s();\n\n  // const [data, setData] = useState(null);\n  const data = useData(); // console.log('dataini:',data);\n\n  const [year, setYear] = useState(2011); // useEffect(function init(){\n  //     console.log('start');\n  //     console.log('data2:',data);\n  //     if(data['2011/12']){\n  //         console.log('in');\n  //         let svg=d3.select('svg');\n  //         // console.log(svg);\n  //         let k=dataAt('2011/12');\n  //         console.log('k',k)\n  //         //这里并不能马上赋值成功，hook调用时异步的\n  //         // setCurrentData(k);\n  //         // console.log('currentData',currentData);\n  //         svg.selectAll('circle')\n  //             .data(k,d=>['city'])\n  //             .join('circle')\n  //             .attr(\"stroke\", \"black\")\n  //             .attr(\"r\", d =>{\n  //                 if(!(parseFloat(d.data['happy'])&&parseFloat(d.data['worth']))) return 0;\n  //                 else return 5\n  //             })\n  //             .attr(\"cx\", d => {if(parseFloat(d.data['happy'])){\n  //                 console.log(d.data['happy'])\n  //                 return xScale(d.data['happy'])\n  //             }})\n  //             .attr(\"cy\", d => {if(d.data['worth']){\n  //                 return yScale(d.data['worth'])\n  //             }\n  //             })\n  //             .attr(\"fill\", d => 'blue');\n  //         setYear(2012)\n  //         console.log(year)\n  //     }\n  // },[data]);\n  // useEffect(function update() {\n  //\n  //         if(year){\n  //             let currentData=dataAt(year+'/'+(year-2000+1));\n  //             let svg=d3.select('svg');\n  //             let c=svg.selectAll(\"circle\")\n  //                 .data(currentData,d=>d['city'])\n  //                 .join('circle')\n  //                 .attr(\"stroke\", \"black\")\n  //                 .attr(\"r\", d =>{\n  //                     if(!(parseFloat(d.data['happy'])&&parseFloat(d.data['worth']))) return 0;\n  //                     else return 5\n  //                 })\n  //                 .transition()\n  //                 // .on('end',function repeat(){\n  //                 //     console.log('end')\n  //                 // })\n  //                 .duration(1000)\n  //                 .attr(\"cx\", d => {if(parseFloat(d.data['happy'])){\n  //                     // console.log(d.data['happy'])\n  //                     return xScale(d.data['happy'])\n  //                 }})\n  //                 .attr(\"cy\", d => {if(d.data['worth']){\n  //                     return yScale(d.data['worth'])\n  //                 }\n  //                 })\n  //                 .attr(\"fill\", d => 'blue')\n  //                 .end();\n  //             c.then(result=>{\n  //                 if(year<2016){\n  //                     setYear(year+1)\n  //                     // updateCircle()\n  //                 }\n  //                 else {\n  //                     setYear(2011)\n  //                     // console.log('year:',year)\n  //                     // year=2011;\n  //                     // updateCircle()\n  //                 }\n  //                 console.log('done')\n  //             })\n  //         }\n  // },[year])\n  // function dataAt(year){\n  //     console.log('data:',data)\n  //     let results=[];\n  //     let pro=Object.getOwnPropertyNames(data[year]);\n  //     pro.forEach(d=>{\n  //         results.push({\n  //             city:d,\n  //             data:data[year][d],\n  //         })\n  //     })\n  //     return results\n  // }\n  // const [hoveredValue, setHoveredValue] = useState(null);\n  // if (!data) {\n  //     return <pre>Loading...</pre>;\n  // }\n\n  const xValue = d => d.data['happy'];\n\n  const yValue = d => d.data['worth'];\n\n  const colorValue = d => d.species;\n\n  const circleRadius = 7;\n  const xScale = scaleLinear() // .domain(extent(data, xValue))\n  .domain([6.8, 8.5]).range([0, innerWidth]);\n  const yScale = scaleLinear() // .domain(extent(data, yValue))\n  .domain([8.5, 6.8]).range([0, innerHeight]);\n  const colorScale = scaleOrdinal().domain(['InnerLondon', 'OuterLondon']).range(['#E6842A', '#137B80']);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: [\"time:\", /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"Time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: width,\n      height: height,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(${margin.left},${margin.top})`,\n        children: [/*#__PURE__*/_jsxDEV(AxisBottom, {\n          xScale: xScale,\n          innerHeight: innerHeight,\n          tickFormat: xAxisTickFormat,\n          tickOffset: 5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          className: \"axis-label\",\n          textAnchor: \"middle\",\n          transform: `translate(${-yAxisLabelOffset},${innerHeight / 2}) rotate(-90)`,\n          children: yAxisLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AxisLeft, {\n          yScale: yScale,\n          innerWidth: innerWidth,\n          tickOffset: 5\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n          className: \"axis-label\",\n          x: innerWidth / 2,\n          y: innerHeight + xAxisLabelOffset,\n          textAnchor: \"middle\",\n          children: xAxisLabel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          transform: `translate(${innerWidth + 60}, 60)`,\n          children: [/*#__PURE__*/_jsxDEV(\"text\", {\n            x: 35,\n            y: -25,\n            className: \"axis-label\",\n            textAnchor: \"middle\",\n            children: colorLegendLabel\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ColorLegend, {\n            tickSpacing: 22,\n            tickSize: 10,\n            tickTextOffset: 12,\n            tickSize: circleRadius,\n            colorScale: colorScale // onHover={setHoveredValue}\n            // hoveredValue={hoveredValue}\n            // fadeOpacity={fadeOpacity}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n          children: /*#__PURE__*/_jsxDEV(Marks, {\n            data: data //参数变了，组件就会自动刷新\n            ,\n            xScale: xScale,\n            xValue: xValue,\n            yScale: yScale,\n            yValue: yValue,\n            colorScale: colorScale,\n            colorValue: colorValue,\n            tooltipFormat: xAxisTickFormat,\n            circleRadius: circleRadius,\n            year: year,\n            margin: margin,\n            callback: () => {\n              if (year < 2016) {\n                setYear(year + 1);\n              } else {\n                setYear(2011);\n              }\n\n              document.getElementById('Time').innerHTML = year + '/' + (year - 2000 + 1);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 9\n  }, this);\n}\n\n_s(City, \"xayFnXCgFm9TOa1OKnCb+ZMnf8A=\", false, function () {\n  return [useData];\n});\n\n_c = City;\n;\n\nvar _c;\n\n$RefreshReg$(_c, \"City\");","map":{"version":3,"sources":["/home/zhiguangda/ITS/deckgl/src/components/city/city.js"],"names":["React","useState","useCallback","useEffect","Fragment","ReactDOM","csv","scaleLinear","scaleOrdinal","max","format","extent","useData","AxisBottom","AxisLeft","Marks","ColorLegend","d3","width","height","margin","top","right","bottom","left","xAxisLabelOffset","yAxisLabelOffset","innerHeight","innerWidth","xAxisLabel","yAxisLabel","colorLegendLabel","siFormat","xAxisTickFormat","tickValue","replace","tmp","getData","Promise","resolve","then","d","map","l","index","pro","Object","getOwnPropertyNames","n","undefined","happy","worth","console","log","City","data","year","setYear","xValue","yValue","colorValue","species","circleRadius","xScale","domain","range","yScale","colorScale","document","getElementById","innerHTML"],"mappings":"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AH,CAAOL,CAAC,CAAC,MAAD,CAAR,EAAkBQ,KAAlB,GAAwBR,CAAC,CAACK,CAAD,CAAzB;AACH;AACJ,WAVD;AAWH,SAbD;AAcAI,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBjB,GAApB;AACAG,QAAAA,OAAO;AACV,OAjBD;AAmBH,KA/CD;AAgDH,GAjDM,CAAP;AAoDH;;AAED,OAAO,SAASe,IAAT,GAAgB;AAAA;;AAEnB;AACA,QAAMC,IAAI,GAAC3C,OAAO,EAAlB,CAHmB,CAInB;;AACA,QAAM,CAAC4C,IAAD,EAAMC,OAAN,IAAexD,QAAQ,CAAC,IAAD,CAA7B,CALmB,CAMnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,QAAMyD,MAAM,GAAGjB,CAAC,IAAIA,CAAC,CAACc,IAAF,CAAO,OAAP,CAApB;;AACA,QAAMI,MAAM,GAAGlB,CAAC,IAAIA,CAAC,CAACc,IAAF,CAAO,OAAP,CAApB;;AACA,QAAMK,UAAU,GAAGnB,CAAC,IAAIA,CAAC,CAACoB,OAA1B;;AACA,QAAMC,YAAY,GAAG,CAArB;AAGA,QAAMC,MAAM,GAAGxD,WAAW,GACtB;AADsB,GAErByD,MAFU,CAEH,CAAC,GAAD,EAAK,GAAL,CAFG,EAGVC,KAHU,CAGJ,CAAC,CAAD,EAAIrC,UAAJ,CAHI,CAAf;AAKA,QAAMsC,MAAM,GAAG3D,WAA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","sourcesContent":["import React, { useState, useCallback, useEffect,Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport { csv, scaleLinear, scaleOrdinal, max, format, extent } from 'd3';\nimport { useData } from './useData';\nimport { AxisBottom } from './AxisBottom';\nimport { AxisLeft } from './AxisLeft';\nimport { Marks } from './Marks';\nimport { ColorLegend } from './ColorLegend';\nimport * as d3 from 'd3'\nimport './city.css'\nconst width = 960;\nconst height = 500;\nconst margin = { top: 20, right: 200, bottom: 65, left: 90 };\nconst xAxisLabelOffset = 50;\nconst yAxisLabelOffset = 45;\nconst innerHeight = height - margin.top - margin.bottom;\nconst innerWidth = width - margin.left - margin.right;\nconst xAxisLabel = 'Satisfaction';\nconst yAxisLabel = 'Worthwhile';\nconst colorLegendLabel = 'Area';\nconst siFormat = format('.2s');\nconst xAxisTickFormat = tickValue => siFormat(tickValue).replace('G', 'B');\nlet tmp=[];\nfunction getData() {\n\n    return new Promise(resolve => {\n        d3.csv('./happy.csv').then(d=>{\n            d.map((l,index)=>{\n                let pro=Object.getOwnPropertyNames(l);\n                // console.log(l['Area']);\n                pro.map((n,index)=>{\n                    if(index>1){\n                        if(tmp[n]===undefined){\n                            tmp[n]={}\n                        }\n                        if(tmp[n][l['Area']]===undefined){\n                            tmp[n][l['Area']]={};\n                        }\n                        tmp[n][l['Area']].happy=l[n];\n                    }\n                })\n                // l.map((t,i)=>{\n                //     if(i>1){\n                //         if(data[i]===undefined){\n                //             data[i]=[]\n                //         }\n                //         // data[i].happy=\n                //         console.log(Object.getOwnPropertyNames(t))\n                //     }\n                //\n                // })\n            })\n\n\n            d3.csv('./worthwhile.csv').then(d=>{\n                d.map((l,index)=>{\n                    let pro=Object.getOwnPropertyNames(l);\n                    pro.map((n,index)=>{\n                        if(index>1){\n                            if(tmp[n]===undefined){\n                                tmp[n]={}\n                            }\n                            if(tmp[n][l['Area']]===undefined){\n                                tmp[n][l['Area']]={};\n                            }\n                            tmp[n][l['Area']].worth=l[n];\n                        }\n                    })\n                })\n                console.log('data:',tmp)\n                resolve();\n            });\n\n        });\n    })\n\n\n}\n\nexport function City() {\n\n    // const [data, setData] = useState(null);\n    const data=useData();\n    // console.log('dataini:',data);\n    const [year,setYear]=useState(2011);\n    // useEffect(function init(){\n    //     console.log('start');\n    //     console.log('data2:',data);\n    //     if(data['2011/12']){\n    //         console.log('in');\n    //         let svg=d3.select('svg');\n    //         // console.log(svg);\n    //         let k=dataAt('2011/12');\n    //         console.log('k',k)\n    //         //这里并不能马上赋值成功，hook调用时异步的\n    //         // setCurrentData(k);\n    //         // console.log('currentData',currentData);\n    //         svg.selectAll('circle')\n    //             .data(k,d=>['city'])\n    //             .join('circle')\n    //             .attr(\"stroke\", \"black\")\n    //             .attr(\"r\", d =>{\n    //                 if(!(parseFloat(d.data['happy'])&&parseFloat(d.data['worth']))) return 0;\n    //                 else return 5\n    //             })\n    //             .attr(\"cx\", d => {if(parseFloat(d.data['happy'])){\n    //                 console.log(d.data['happy'])\n    //                 return xScale(d.data['happy'])\n    //             }})\n    //             .attr(\"cy\", d => {if(d.data['worth']){\n    //                 return yScale(d.data['worth'])\n    //             }\n    //             })\n    //             .attr(\"fill\", d => 'blue');\n    //         setYear(2012)\n    //         console.log(year)\n    //     }\n    // },[data]);\n    // useEffect(function update() {\n    //\n    //         if(year){\n    //             let currentData=dataAt(year+'/'+(year-2000+1));\n    //             let svg=d3.select('svg');\n    //             let c=svg.selectAll(\"circle\")\n    //                 .data(currentData,d=>d['city'])\n    //                 .join('circle')\n    //                 .attr(\"stroke\", \"black\")\n    //                 .attr(\"r\", d =>{\n    //                     if(!(parseFloat(d.data['happy'])&&parseFloat(d.data['worth']))) return 0;\n    //                     else return 5\n    //                 })\n    //                 .transition()\n    //                 // .on('end',function repeat(){\n    //                 //     console.log('end')\n    //                 // })\n    //                 .duration(1000)\n    //                 .attr(\"cx\", d => {if(parseFloat(d.data['happy'])){\n    //                     // console.log(d.data['happy'])\n    //                     return xScale(d.data['happy'])\n    //                 }})\n    //                 .attr(\"cy\", d => {if(d.data['worth']){\n    //                     return yScale(d.data['worth'])\n    //                 }\n    //                 })\n    //                 .attr(\"fill\", d => 'blue')\n    //                 .end();\n    //             c.then(result=>{\n    //                 if(year<2016){\n    //                     setYear(year+1)\n    //                     // updateCircle()\n    //                 }\n    //                 else {\n    //                     setYear(2011)\n    //                     // console.log('year:',year)\n    //                     // year=2011;\n    //                     // updateCircle()\n    //                 }\n    //                 console.log('done')\n    //             })\n    //         }\n    // },[year])\n    // function dataAt(year){\n    //     console.log('data:',data)\n    //     let results=[];\n    //     let pro=Object.getOwnPropertyNames(data[year]);\n    //     pro.forEach(d=>{\n    //         results.push({\n    //             city:d,\n    //             data:data[year][d],\n    //         })\n    //     })\n    //     return results\n    // }\n    // const [hoveredValue, setHoveredValue] = useState(null);\n    // if (!data) {\n    //     return <pre>Loading...</pre>;\n    // }\n    const xValue = d => d.data['happy'];\n    const yValue = d => d.data['worth'];\n    const colorValue = d => d.species;\n    const circleRadius = 7;\n\n\n    const xScale = scaleLinear()\n        // .domain(extent(data, xValue))\n        .domain([6.8,8.5])\n        .range([0, innerWidth])\n\n    const yScale = scaleLinear()\n        // .domain(extent(data, yValue))\n        .domain([8.5,6.8])\n        .range([0, innerHeight]);\n\n    const colorScale = scaleOrdinal()\n        .domain(['InnerLondon','OuterLondon'])\n        .range(['#E6842A', '#137B80']);\n\n    return (\n        <Fragment>\n            <b >time:<span id=\"Time\"></span>\n            </b>\n            <svg width={width} height={height}>\n                <g transform={`translate(${margin.left},${margin.top})`}>\n                    <AxisBottom\n                        xScale={xScale}\n                        innerHeight={innerHeight}\n                        tickFormat={xAxisTickFormat}\n                        tickOffset={5}\n                    />\n                    <text\n                        className=\"axis-label\"\n                        textAnchor=\"middle\"\n                        transform={`translate(${-yAxisLabelOffset},${innerHeight /\n                        2}) rotate(-90)`}\n                    >\n                        {yAxisLabel}\n                    </text>\n                    <AxisLeft yScale={yScale} innerWidth={innerWidth} tickOffset={5} />\n                    <text\n                        className=\"axis-label\"\n                        x={innerWidth / 2}\n                        y={innerHeight + xAxisLabelOffset}\n                        textAnchor=\"middle\"\n                    >\n                        {xAxisLabel}\n                    </text>\n                    <g transform={`translate(${innerWidth + 60}, 60)`}>\n                        <text x={35} y={-25} className=\"axis-label\" textAnchor=\"middle\">\n                            {colorLegendLabel}\n                        </text>\n                        <ColorLegend\n                            tickSpacing={22}\n                            tickSize={10}\n                            tickTextOffset={12}\n                            tickSize={circleRadius}\n                            colorScale={colorScale}\n                            // onHover={setHoveredValue}\n                            // hoveredValue={hoveredValue}\n                            // fadeOpacity={fadeOpacity}\n                        />\n                    </g>\n                    <g >\n                        <Marks\n                            data={data}//参数变了，组件就会自动刷新\n                            xScale={xScale}\n                            xValue={xValue}\n                            yScale={yScale}\n                            yValue={yValue}\n                            colorScale={colorScale}\n                            colorValue={colorValue}\n                            tooltipFormat={xAxisTickFormat}\n                            circleRadius={circleRadius}\n                            year={year}\n                            margin={margin}\n                            callback={()=>{\n                                if(year<2016){\n                                    setYear(year+1)\n                                }\n                                else{\n                                    setYear(2011)\n                                }\n                                document.getElementById('Time').innerHTML=year+'/'+(year-2000+1)\n\n                            }}\n                        />\n                    </g>\n                </g>\n            </svg>\n\n        </Fragment>\n\n    );\n};\n"]},"metadata":{},"sourceType":"module"}