{"ast":null,"code":"import React from 'react';\nimport * as d3 from \"d3\";\nexport const Marks = ({\n  data,\n  xScale,\n  xValue,\n  yScale,\n  innerHeight,\n  innerWidth,\n  margin,\n  keys,\n  start,\n  callback\n}) => {\n  const svg = d3.select('svg');\n  let stack = d3.stack() //\n  .offset(d3.stackOffsetWiggle).order(d3.stackOrderNone);\n  var colorScale = d3.scaleOrdinal().range(d3.schemeCategory10);\n  var area = d3.area().x(d => xScale(xValue(d.data)) + margin.left).y0(d => yScale(d[0]) + margin.top).y1(d => yScale(d[1]) + margin.top).curve(d3.curveBasis);\n\n  if (data) {\n    data = data.slice(start, start + 24); // console.log(keys)\n\n    stack.keys(keys); // console.log('data',data);\n\n    let stacked = stack(data); // console.log('stack',stacked);\n\n    colorScale.domain(d3.range(keys.length));\n    xScale.domain(d3.extent(data, xValue)).range([0, innerWidth]);\n    yScale.domain([d3.min(stacked, function (series) {\n      return d3.min(series, function (d) {\n        return d[0];\n      });\n    }), d3.max(stacked, function (series) {\n      return d3.max(series, function (d) {\n        return d[1];\n      });\n    })]).range([innerHeight, 0]);\n    let p = svg.selectAll('path').data(stacked).join('path').attr('fill', function (d) {\n      // console.log('d',d)\n      // console.log(d[0].data[d.index]);\n      return d3.interpolateSpectral(keys.indexOf(d.key) / 8);\n    }).attr('stroke', function (d) {\n      return d3.interpolateSpectral(keys.indexOf(d[0].data[d.index] / 8));\n    }).transition().duration(2000).attr('d', area).end();\n    p.then(r => {\n      callback();\n    });\n  }\n\n  return null;\n};","map":{"version":3,"sources":["/home/zhiguangda/ITS/deckgl/src/components/streamgraph/Marks.js"],"names":["React","d3","Marks","data","xScale","xValue","yScale","innerHeight","innerWidth","margin","keys","start","callback","svg","select","stack","offset","stackOffsetWiggle","order","stackOrderNone","colorScale","scaleOrdinal","range","schemeCategory10","area","x","d","left","y0","top","y1","curve","curveBasis","slice","stacked","domain","length","extent","min","series","max","p","selectAll","join","attr","interpolateSpectral","indexOf","key","index","transition","duration","end","then","r"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as d3 from \"d3\";\n\nexport const Marks = ({\n                          data,\n                          xScale,\n                          xValue,\n                          yScale,\n                          innerHeight,\n                          innerWidth,\n                          margin,\n                          keys,\n                            start,\n                          callback\n                      }) =>{\n\n    const svg=d3.select('svg');\n\n    let stack = d3.stack()//\n        .offset(d3.stackOffsetWiggle)\n        .order(d3.stackOrderNone);\n\n\n    var colorScale = d3.scaleOrdinal()\n        .range(d3.schemeCategory10);\n\n    var area = d3.area()\n        .x(d => xScale(xValue(d.data))+margin.left)\n        .y0(d => (yScale(d[0])+margin.top))\n        .y1(d => (yScale(d[1])+margin.top))\n        .curve(d3.curveBasis);\n\n\n    if(data){\n        data=data.slice(start,start+24);\n        // console.log(keys)\n        stack.keys(keys);\n        // console.log('data',data);\n        let stacked=stack(data);\n        // console.log('stack',stacked);\n\n        colorScale.domain(d3.range(keys.length));\n\n        xScale\n            .domain(d3.extent(data, xValue))\n            .range([0, innerWidth]);\n        yScale\n            .domain([\n                d3.min(stacked, function (series) {\n                    return d3.min(series, function (d) { return d[0]; });\n                }),\n                d3.max(stacked, function (series) {\n                    return d3.max(series, function (d) { return d[1]; });\n                })\n            ])\n            .range([ innerHeight,0]);\n\n        let p=svg.selectAll('path')\n            .data(stacked)\n            .join('path')\n            .attr('fill', function (d) {\n                // console.log('d',d)\n                // console.log(d[0].data[d.index]);\n                return d3.interpolateSpectral(keys.indexOf(d.key)/8);\n            })\n            .attr('stroke', function (d) { return d3.interpolateSpectral(keys.indexOf(d[0].data[d.index]/8)); })\n            .transition()\n            .duration(2000)\n            .attr('d', area)\n            .end();\n\n        p.then(r=>{\n            callback()\n        })\n    }\n\n    return null;\n\n}\n"]},"metadata":{},"sourceType":"module"}