{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MeasureDistanceMode = void 0;\n\nvar _distance = _interopRequireDefault(require(\"@turf/distance\"));\n\nvar _memoize = _interopRequireDefault(require(\"../memoize\"));\n\nvar _geojsonEditMode = require(\"./geojson-edit-mode\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar DEFAULT_TOOLTIPS = [];\n\nvar MeasureDistanceMode = /*#__PURE__*/function (_GeoJsonEditMode) {\n  _inherits(MeasureDistanceMode, _GeoJsonEditMode);\n\n  var _super = _createSuper(MeasureDistanceMode);\n\n  function MeasureDistanceMode() {\n    var _this;\n\n    _classCallCheck(this, MeasureDistanceMode);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"startingPoint\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"endingPoint\", null);\n\n    _defineProperty(_assertThisInitialized(_this), \"endingPointLocked\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"_getTooltips\", (0, _memoize[\"default\"])(function (_ref) {\n      var modeConfig = _ref.modeConfig,\n          startingPoint = _ref.startingPoint,\n          endingPoint = _ref.endingPoint;\n      var tooltips = DEFAULT_TOOLTIPS;\n\n      if (startingPoint && endingPoint) {\n        var _ref2 = modeConfig || {},\n            formatTooltip = _ref2.formatTooltip,\n            turfOptions = _ref2.turfOptions,\n            measurementCallback = _ref2.measurementCallback;\n\n        var units = turfOptions && turfOptions.units || 'kilometers';\n        var distance = (0, _distance[\"default\"])(startingPoint, endingPoint, turfOptions);\n        var text;\n\n        if (formatTooltip) {\n          text = formatTooltip(distance);\n        } else {\n          // By default, round to 2 decimal places and append units\n          text = \"\".concat(parseFloat(distance).toFixed(2), \" \").concat(units);\n        }\n\n        if (measurementCallback) {\n          measurementCallback(distance);\n        }\n\n        tooltips = [{\n          position: endingPoint.geometry.coordinates,\n          text: text\n        }];\n      }\n\n      return tooltips;\n    }));\n\n    return _this;\n  }\n\n  _createClass(MeasureDistanceMode, [{\n    key: \"_setEndingPoint\",\n    value: function _setEndingPoint(mapCoords) {\n      this.endingPoint = {\n        type: 'Feature',\n        properties: {\n          guideType: 'editHandle',\n          editHandleType: 'existing',\n          featureIndex: -1,\n          positionIndexes: []\n        },\n        geometry: {\n          type: 'Point',\n          coordinates: mapCoords\n        }\n      };\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(event, props) {\n      if (!this.startingPoint || this.endingPointLocked) {\n        this.startingPoint = {\n          type: 'Feature',\n          properties: {\n            guideType: 'editHandle',\n            editHandleType: 'existing',\n            featureIndex: -1,\n            positionIndexes: []\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: event.mapCoords\n          }\n        };\n        this.endingPoint = null;\n        this.endingPointLocked = false;\n      } else if (this.startingPoint) {\n        this._setEndingPoint(event.mapCoords);\n\n        this.endingPointLocked = true;\n      }\n    } // Called when the pointer moved, regardless of whether the pointer is down, up, and whether something was picked\n\n  }, {\n    key: \"handlePointerMove\",\n    value: function handlePointerMove(event, props) {\n      if (this.startingPoint && !this.endingPointLocked) {\n        this._setEndingPoint(event.mapCoords);\n      }\n\n      props.onUpdateCursor('cell');\n    } // Return features that can be used as a guide for editing the data\n\n  }, {\n    key: \"getGuides\",\n    value: function getGuides(props) {\n      var guides = {\n        type: 'FeatureCollection',\n        features: []\n      };\n      var features = guides.features;\n\n      if (this.startingPoint) {\n        features.push(this.startingPoint);\n      }\n\n      if (this.endingPoint) {\n        features.push(this.endingPoint);\n      }\n\n      if (this.startingPoint && this.endingPoint) {\n        features.push({\n          type: 'Feature',\n          properties: {\n            guideType: 'tentative'\n          },\n          geometry: {\n            type: 'LineString',\n            coordinates: [this.startingPoint.geometry.coordinates, this.endingPoint.geometry.coordinates]\n          }\n        });\n      }\n\n      return guides;\n    }\n  }, {\n    key: \"getTooltips\",\n    value: function getTooltips(props) {\n      return this._getTooltips({\n        modeConfig: props.modeConfig,\n        startingPoint: this.startingPoint,\n        endingPoint: this.endingPoint\n      });\n    }\n  }]);\n\n  return MeasureDistanceMode;\n}(_geojsonEditMode.GeoJsonEditMode);\n\nexports.MeasureDistanceMode = MeasureDistanceMode;","map":{"version":3,"sources":["../../src/lib/measure-distance-mode.ts"],"names":["DEFAULT_TOOLTIPS","MeasureDistanceMode","GeoJsonEditMode","mapCoords","type","properties","guideType","editHandleType","featureIndex","positionIndexes","geometry","coordinates","modeConfig","startingPoint","endingPoint","tooltips","formatTooltip","turfOptions","measurementCallback","units","distance","text","parseFloat","position","event","props","guides","features"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport turfDistance from '@turf/distance';\n// @ts-ignore\nimport memoize from '../memoize';\nimport {\n  ClickEvent,\n  PointerMoveEvent,\n  Tooltip,\n  ModeProps,\n  GuideFeatureCollection,\n  EditHandleFeature,\n} from '../types';\nimport { FeatureCollection, Position } from '../geojson-types';\nimport { GeoJsonEditMode } from './geojson-edit-mode';\n\nconst DEFAULT_TOOLTIPS = [];\n\nexport class MeasureDistanceMode extends GeoJsonEditMode {\n  startingPoint: Readonly<EditHandleFeature> | null | undefined = null;\n  endingPoint: Readonly<EditHandleFeature> | null | undefined = null;\n  endingPointLocked = false;\n\n  _setEndingPoint(mapCoords: Position) {\n    this.endingPoint = {\n      type: 'Feature',\n      properties: {\n        guideType: 'editHandle',\n        editHandleType: 'existing',\n        featureIndex: -1,\n        positionIndexes: [],\n      },\n      geometry: {\n        type: 'Point',\n        coordinates: mapCoords,\n      },\n    };\n  }\n\n  _getTooltips = memoize(({ modeConfig, startingPoint, endingPoint }) => {\n    let tooltips = DEFAULT_TOOLTIPS;\n\n    if (startingPoint && endingPoint) {\n      const { formatTooltip, turfOptions, measurementCallback } = modeConfig || {};\n      const units = (turfOptions && turfOptions.units) || 'kilometers';\n\n      const distance = turfDistance(startingPoint, endingPoint, turfOptions);\n\n      let text;\n      if (formatTooltip) {\n        text = formatTooltip(distance);\n      } else {\n        // By default, round to 2 decimal places and append units\n        text = `${parseFloat(distance).toFixed(2)} ${units}`;\n      }\n\n      if (measurementCallback) {\n        measurementCallback(distance);\n      }\n\n      tooltips = [\n        {\n          position: endingPoint.geometry.coordinates,\n          text,\n        },\n      ];\n    }\n\n    return tooltips;\n  });\n\n  handleClick(event: ClickEvent, props: ModeProps<FeatureCollection>): void {\n    if (!this.startingPoint || this.endingPointLocked) {\n      this.startingPoint = {\n        type: 'Feature',\n        properties: {\n          guideType: 'editHandle',\n          editHandleType: 'existing',\n          featureIndex: -1,\n          positionIndexes: [],\n        },\n        geometry: {\n          type: 'Point',\n          coordinates: event.mapCoords,\n        },\n      };\n      this.endingPoint = null;\n      this.endingPointLocked = false;\n    } else if (this.startingPoint) {\n      this._setEndingPoint(event.mapCoords);\n      this.endingPointLocked = true;\n    }\n  }\n\n  // Called when the pointer moved, regardless of whether the pointer is down, up, and whether something was picked\n  handlePointerMove(event: PointerMoveEvent, props: ModeProps<FeatureCollection>): void {\n    if (this.startingPoint && !this.endingPointLocked) {\n      this._setEndingPoint(event.mapCoords);\n    }\n\n    props.onUpdateCursor('cell');\n  }\n\n  // Return features that can be used as a guide for editing the data\n  getGuides(props: ModeProps<FeatureCollection>): GuideFeatureCollection {\n    const guides: GuideFeatureCollection = { type: 'FeatureCollection', features: [] };\n    const { features } = guides;\n\n    if (this.startingPoint) {\n      features.push(this.startingPoint);\n    }\n    if (this.endingPoint) {\n      features.push(this.endingPoint);\n    }\n    if (this.startingPoint && this.endingPoint) {\n      features.push({\n        type: 'Feature',\n        properties: { guideType: 'tentative' },\n        geometry: {\n          type: 'LineString',\n          coordinates: [\n            this.startingPoint.geometry.coordinates,\n            this.endingPoint.geometry.coordinates,\n          ],\n        },\n      });\n    }\n    return guides;\n  }\n\n  getTooltips(props: ModeProps<FeatureCollection>): Tooltip[] {\n    return this._getTooltips({\n      modeConfig: props.modeConfig,\n      startingPoint: this.startingPoint,\n      endingPoint: this.endingPoint,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}