{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _DEFAULT_TEXTURE_PARA;\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { LayerExtension } from '@deck.gl/core';\nimport { Texture2D } from '@luma.gl/core';\nimport { patternShaders } from './shaders.glsl';\nvar defaultProps = {\n  fillPatternEnabled: true,\n  fillPatternAtlas: null,\n  fillPatternMapping: null,\n  fillPatternMask: true,\n  getFillPattern: {\n    type: 'accessor',\n    value: function value(d) {\n      return d.pattern;\n    }\n  },\n  getFillPatternScale: {\n    type: 'accessor',\n    value: 1\n  },\n  getFillPatternOffset: {\n    type: 'accessor',\n    value: [0, 0]\n  }\n};\nvar DEFAULT_TEXTURE_PARAMETERS = (_DEFAULT_TEXTURE_PARA = {}, _defineProperty(_DEFAULT_TEXTURE_PARA, 10241, 9729), _defineProperty(_DEFAULT_TEXTURE_PARA, 10240, 9729), _defineProperty(_DEFAULT_TEXTURE_PARA, 10242, 33071), _defineProperty(_DEFAULT_TEXTURE_PARA, 10243, 33071), _DEFAULT_TEXTURE_PARA);\n\nvar FillStyleExtension = function (_LayerExtension) {\n  _inherits(FillStyleExtension, _LayerExtension);\n\n  var _super = _createSuper(FillStyleExtension);\n\n  function FillStyleExtension() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$pattern = _ref.pattern,\n        pattern = _ref$pattern === void 0 ? false : _ref$pattern;\n\n    _classCallCheck(this, FillStyleExtension);\n\n    return _super.call(this, {\n      pattern: pattern\n    });\n  }\n\n  _createClass(FillStyleExtension, [{\n    key: \"isEnabled\",\n    value: function isEnabled(layer) {\n      return layer.getAttributeManager() && !layer.state.pathTesselator;\n    }\n  }, {\n    key: \"getShaders\",\n    value: function getShaders(extension) {\n      if (!extension.isEnabled(this)) {\n        return null;\n      }\n\n      return {\n        modules: [extension.opts.pattern && patternShaders].filter(Boolean)\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState(context, extension) {\n      if (!extension.isEnabled(this)) {\n        return;\n      }\n\n      var attributeManager = this.getAttributeManager();\n\n      if (extension.opts.pattern) {\n        attributeManager.add({\n          fillPatternFrames: {\n            size: 4,\n            accessor: 'getFillPattern',\n            transform: extension.getPatternFrame.bind(this),\n            shaderAttributes: {\n              fillPatternFrames: {\n                divisor: 0\n              },\n              instanceFillPatternFrames: {\n                divisor: 1\n              }\n            }\n          },\n          fillPatternScales: {\n            size: 1,\n            accessor: 'getFillPatternScale',\n            defaultValue: 1,\n            shaderAttributes: {\n              fillPatternScales: {\n                divisor: 0\n              },\n              instanceFillPatternScales: {\n                divisor: 1\n              }\n            }\n          },\n          fillPatternOffsets: {\n            size: 2,\n            accessor: 'getFillPatternOffset',\n            shaderAttributes: {\n              fillPatternOffsets: {\n                divisor: 0\n              },\n              instanceFillPatternOffsets: {\n                divisor: 1\n              }\n            }\n          }\n        });\n      }\n\n      this.setState({\n        emptyTexture: new Texture2D(this.context.gl, {\n          data: new Uint8Array(4),\n          width: 1,\n          height: 1\n        })\n      });\n    }\n  }, {\n    key: \"updateState\",\n    value: function updateState(_ref2, extension) {\n      var props = _ref2.props,\n          oldProps = _ref2.oldProps;\n\n      if (!extension.isEnabled(this)) {\n        return;\n      }\n\n      if (props.fillPatternAtlas && props.fillPatternAtlas !== oldProps.fillPatternAtlas) {\n        extension.loadPatternAtlas.call(this, props);\n      }\n\n      if (props.fillPatternMapping && props.fillPatternMapping !== oldProps.fillPatternMapping) {\n        extension.loadPatternMapping.call(this, props);\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(params, extension) {\n      if (!extension.isEnabled(this)) {\n        return;\n      }\n\n      var patternTexture = this.state.patternTexture;\n      this.setModuleParameters({\n        fillPatternTexture: patternTexture || this.state.emptyTexture\n      });\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState() {\n      var _this$state = this.state,\n          patternTexture = _this$state.patternTexture,\n          emptyTexture = _this$state.emptyTexture;\n\n      if (patternTexture) {\n        patternTexture[\"delete\"]();\n      }\n\n      if (emptyTexture) {\n        emptyTexture[\"delete\"]();\n      }\n    }\n  }, {\n    key: \"loadPatternAtlas\",\n    value: function () {\n      var _loadPatternAtlas = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(_ref3) {\n        var fillPatternAtlas, fetch, image, patternTexture;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                fillPatternAtlas = _ref3.fillPatternAtlas, fetch = _ref3.fetch;\n\n                if (this.state.patternTexture) {\n                  this.state.patternTexture[\"delete\"]();\n                }\n\n                this.setState({\n                  patternTexture: null\n                });\n                image = fillPatternAtlas;\n\n                if (!(typeof image === 'string')) {\n                  _context.next = 8;\n                  break;\n                }\n\n                _context.next = 7;\n                return fetch(image, {\n                  propName: 'fillPatternAtlas',\n                  layer: this\n                });\n\n              case 7:\n                image = _context.sent;\n\n              case 8:\n                patternTexture = image instanceof Texture2D ? image : new Texture2D(this.context.gl, {\n                  data: image,\n                  parameters: DEFAULT_TEXTURE_PARAMETERS\n                });\n                this.setState({\n                  patternTexture: patternTexture\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function loadPatternAtlas(_x) {\n        return _loadPatternAtlas.apply(this, arguments);\n      }\n\n      return loadPatternAtlas;\n    }()\n  }, {\n    key: \"loadPatternMapping\",\n    value: function () {\n      var _loadPatternMapping = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(_ref4) {\n        var fillPatternMapping, fetch, patternMapping;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                fillPatternMapping = _ref4.fillPatternMapping, fetch = _ref4.fetch;\n                this.setState({\n                  patternMapping: null\n                });\n                patternMapping = fillPatternMapping;\n\n                if (!(typeof patternMapping === 'string')) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.next = 6;\n                return fetch(patternMapping, {\n                  propName: 'fillPatternMapping',\n                  layer: this\n                });\n\n              case 6:\n                patternMapping = _context2.sent;\n\n              case 7:\n                this.setState({\n                  patternMapping: patternMapping\n                });\n                this.getAttributeManager().invalidate('getFillPattern');\n                this.setNeedsUpdate();\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadPatternMapping(_x2) {\n        return _loadPatternMapping.apply(this, arguments);\n      }\n\n      return loadPatternMapping;\n    }()\n  }, {\n    key: \"getPatternFrame\",\n    value: function getPatternFrame(name) {\n      var patternMapping = this.state.patternMapping;\n      var def = patternMapping && patternMapping[name];\n      return def ? [def.x, def.y, def.width, def.height] : [0, 0, 0, 0];\n    }\n  }]);\n\n  return FillStyleExtension;\n}(LayerExtension);\n\nexport { FillStyleExtension as default };\nFillStyleExtension.extensionName = 'FillStyleExtension';\nFillStyleExtension.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/fill-style/fill-style.js"],"names":["defaultProps","fillPatternEnabled","fillPatternAtlas","fillPatternMapping","fillPatternMask","getFillPattern","type","value","d","getFillPatternScale","getFillPatternOffset","DEFAULT_TEXTURE_PARAMETERS","FillStyleExtension","LayerExtension","pattern","layer","extension","modules","context","attributeManager","fillPatternFrames","size","accessor","transform","shaderAttributes","divisor","instanceFillPatternFrames","fillPatternScales","defaultValue","instanceFillPatternScales","fillPatternOffsets","instanceFillPatternOffsets","emptyTexture","data","width","height","props","oldProps","params","patternTexture","fillPatternTexture","fetch","image","propName","parameters","patternMapping","name","def"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,cAAA,QAAA,eAAA;AACA,SAAA,SAAA,QAAA,eAAA;AAGA,SAAA,cAAA,QAAA,gBAAA;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,kBAAkB,EADC,IAAA;AAEnBC,EAAAA,gBAAgB,EAFG,IAAA;AAGnBC,EAAAA,kBAAkB,EAHC,IAAA;AAInBC,EAAAA,eAAe,EAJI,IAAA;AAKnBC,EAAAA,cAAc,EAAE;AAACC,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAE,SAAA,KAAA,CAAA,CAAA,EAAC;AAAA,aAAIC,CAAC,CAAL,OAAA;AAAA;AAA3B,GALG;AAMnBC,EAAAA,mBAAmB,EAAE;AAACH,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GANF;AAOnBG,EAAAA,oBAAoB,EAAE;AAACJ,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAE,CAAA,CAAA,EAAA,CAAA;AAA1B;AAPH,CAArB;AAUA,IAAMI,0BAA0B,IAAA,qBAAA,GAAA,EAAA,EAAA,eAAA,CAAA,qBAAA,EAAA,KAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,qBAAA,EAAA,KAAA,EAAA,IAAA,CAAA,EAAA,eAAA,CAAA,qBAAA,EAAA,KAAA,EAAA,KAAA,CAAA,EAAA,eAAA,CAAA,qBAAA,EAAA,KAAA,EAAA,KAAA,CAAA,EAAhC,qBAAgC,CAAhC;;IASqBC,kB;;;;;AACnB,WAAA,kBAAA,GAAoC;AAAA,QAAA,IAAA,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,EAAI;AAAA,QAAA,YAAA,GAAA,IAAA,CAAvBE,OAAuB;AAAA,QAAvBA,OAAuB,GAAA,YAAA,KAAA,KAAA,CAAA,GAAb,KAAa,GAAA,YAAA;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,CAAA;;AAAA,WAAA,MAAA,CAAA,IAAA,CAAA,IAAA,EAC5B;AAACA,MAAAA,OAAO,EAAPA;AAAD,KAD4B,CAAA;AAEnC;;;;8BAESC,K,EAAO;AACf,aAAOA,KAAK,CAALA,mBAAAA,MAA+B,CAACA,KAAK,CAALA,KAAAA,CAAvC,cAAA;AACD;;;+BAEUC,S,EAAW;AACpB,UAAI,CAACA,SAAS,CAATA,SAAAA,CAAL,IAAKA,CAAL,EAAgC;AAC9B,eAAA,IAAA;AACD;;AAED,aAAO;AACLC,QAAAA,OAAO,EAAE,CAACD,SAAS,CAATA,IAAAA,CAAAA,OAAAA,IAAD,cAAA,EAAA,MAAA,CAAA,OAAA;AADJ,OAAP;AAGD;;;oCAEeE,O,EAASF,S,EAAW;AAClC,UAAI,CAACA,SAAS,CAATA,SAAAA,CAAL,IAAKA,CAAL,EAAgC;AAC9B;AACD;;AAED,UAAMG,gBAAgB,GAAG,KAAzB,mBAAyB,EAAzB;;AAEA,UAAIH,SAAS,CAATA,IAAAA,CAAJ,OAAA,EAA4B;AAC1BG,QAAAA,gBAAgB,CAAhBA,GAAAA,CAAqB;AACnBC,UAAAA,iBAAiB,EAAE;AACjBC,YAAAA,IAAI,EADa,CAAA;AAEjBC,YAAAA,QAAQ,EAFS,gBAAA;AAGjBC,YAAAA,SAAS,EAAEP,SAAS,CAATA,eAAAA,CAAAA,IAAAA,CAHM,IAGNA,CAHM;AAIjBQ,YAAAA,gBAAgB,EAAE;AAChBJ,cAAAA,iBAAiB,EAAE;AACjBK,gBAAAA,OAAO,EAAE;AADQ,eADH;AAIhBC,cAAAA,yBAAyB,EAAE;AACzBD,gBAAAA,OAAO,EAAE;AADgB;AAJX;AAJD,WADA;AAcnBE,UAAAA,iBAAiB,EAAE;AACjBN,YAAAA,IAAI,EADa,CAAA;AAEjBC,YAAAA,QAAQ,EAFS,qBAAA;AAGjBM,YAAAA,YAAY,EAHK,CAAA;AAIjBJ,YAAAA,gBAAgB,EAAE;AAChBG,cAAAA,iBAAiB,EAAE;AACjBF,gBAAAA,OAAO,EAAE;AADQ,eADH;AAIhBI,cAAAA,yBAAyB,EAAE;AACzBJ,gBAAAA,OAAO,EAAE;AADgB;AAJX;AAJD,WAdA;AA2BnBK,UAAAA,kBAAkB,EAAE;AAClBT,YAAAA,IAAI,EADc,CAAA;AAElBC,YAAAA,QAAQ,EAFU,sBAAA;AAGlBE,YAAAA,gBAAgB,EAAE;AAChBM,cAAAA,kBAAkB,EAAE;AAClBL,gBAAAA,OAAO,EAAE;AADS,eADJ;AAIhBM,cAAAA,0BAA0B,EAAE;AAC1BN,gBAAAA,OAAO,EAAE;AADiB;AAJZ;AAHA;AA3BD,SAArBN;AAwCD;;AACD,WAAA,QAAA,CAAc;AACZa,QAAAA,YAAY,EAAE,IAAA,SAAA,CAAc,KAAA,OAAA,CAAd,EAAA,EAA+B;AAC3CC,UAAAA,IAAI,EAAE,IAAA,UAAA,CADqC,CACrC,CADqC;AAE3CC,UAAAA,KAAK,EAFsC,CAAA;AAG3CC,UAAAA,MAAM,EAAE;AAHmC,SAA/B;AADF,OAAd;AAOD;;;uCAE8BnB,S,EAAW;AAAA,UAA7BoB,KAA6B,GAAA,KAAA,CAA7BA,KAA6B;AAAA,UAAtBC,QAAsB,GAAA,KAAA,CAAtBA,QAAsB;;AACxC,UAAI,CAACrB,SAAS,CAATA,SAAAA,CAAL,IAAKA,CAAL,EAAgC;AAC9B;AACD;;AAED,UAAIoB,KAAK,CAALA,gBAAAA,IAA0BA,KAAK,CAALA,gBAAAA,KAA2BC,QAAQ,CAAjE,gBAAA,EAAoF;AAClFrB,QAAAA,SAAS,CAATA,gBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,KAAAA;AACD;;AACD,UAAIoB,KAAK,CAALA,kBAAAA,IAA4BA,KAAK,CAALA,kBAAAA,KAA6BC,QAAQ,CAArE,kBAAA,EAA0F;AACxFrB,QAAAA,SAAS,CAATA,kBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,KAAAA;AACD;AACF;;;yBAEIsB,M,EAAQtB,S,EAAW;AACtB,UAAI,CAACA,SAAS,CAATA,SAAAA,CAAL,IAAKA,CAAL,EAAgC;AAC9B;AACD;;AAHqB,UAKfuB,cALe,GAKG,KALH,KAKG,CALH,cAAA;AAMtB,WAAA,mBAAA,CAAyB;AACvBC,QAAAA,kBAAkB,EAAED,cAAc,IAAI,KAAA,KAAA,CAAWP;AAD1B,OAAzB;AAGD;;;oCAEe;AAAA,UAAA,WAAA,GACyB,KADzB,KAAA;AAAA,UACPO,cADO,GAAA,WAAA,CAAA,cAAA;AAAA,UACSP,YADT,GAAA,WAAA,CAAA,YAAA;;AAEd,UAAA,cAAA,EAAoB;AAClBO,QAAAA,cAAc,CAAdA,QAAc,CAAdA;AACD;;AACD,UAAA,YAAA,EAAkB;AAChBP,QAAAA,YAAY,CAAZA,QAAY,CAAZA;AACD;AACF;;;;;;;;;;AAEuB9B,gBAAAA,gB,SAAAA,gBAAAA,EAAkBuC,K,SAAAA,KAAlBvC;;AACtB,oBAAI,KAAA,KAAA,CAAJ,cAAA,EAA+B;AAC7B,uBAAA,KAAA,CAAA,cAAA,CAAA,QAAA;AACD;;AACD,qBAAA,QAAA,CAAc;AAACqC,kBAAAA,cAAc,EAAE;AAAjB,iBAAd;AACIG,gBAAAA,K,GAAQxC,gBAARwC;;sBACA,OAAA,KAAA,KAAiB,Q;;;;;;uBACLD,KAAK,CAAA,KAAA,EAAQ;AAACE,kBAAAA,QAAQ,EAAT,kBAAA;AAA+B5B,kBAAAA,KAAK,EAAE;AAAtC,iBAAR,C;;;AAAnB2B,gBAAAA,K,gBAAAA;;;AAEIH,gBAAAA,c,GACJG,KAAK,YAALA,SAAAA,GAAAA,KAAAA,GAEI,IAAA,SAAA,CAAc,KAAA,OAAA,CAAd,EAAA,EAA+B;AAC7BT,kBAAAA,IAAI,EADyB,KAAA;AAE7BW,kBAAAA,UAAU,EAAEjC;AAFiB,iBAA/B,CAHA4B;AAON,qBAAA,QAAA,CAAc;AAACA,kBAAAA,cAAc,EAAdA;AAAD,iBAAd;;;;;;;;;;;;;;;;;;;;;;;;;AAGwBpC,gBAAAA,kB,SAAAA,kBAAAA,EAAoBsC,K,SAAAA,KAApBtC;AACxB,qBAAA,QAAA,CAAc;AAAC0C,kBAAAA,cAAc,EAAE;AAAjB,iBAAd;AACIA,gBAAAA,c,GAAiB1C,kBAAjB0C;;sBACA,OAAA,cAAA,KAA0B,Q;;;;;;uBACLJ,KAAK,CAAA,cAAA,EAAiB;AAC3CE,kBAAAA,QAAQ,EADmC,oBAAA;AAE3C5B,kBAAAA,KAAK,EAAE;AAFoC,iBAAjB,C;;;AAA5B8B,gBAAAA,c,iBAAAA;;;AAKF,qBAAA,QAAA,CAAc;AAACA,kBAAAA,cAAc,EAAdA;AAAD,iBAAd;AACA,qBAAA,mBAAA,GAAA,UAAA,CAAA,gBAAA;AACA,qBAAA,cAAA;;;;;;;;;;;;;;;;;;oCAGcC,I,EAAM;AAAA,UACbD,cADa,GACK,KADL,KACK,CADL,cAAA;AAEpB,UAAME,GAAG,GAAGF,cAAc,IAAIA,cAAc,CAA5C,IAA4C,CAA5C;AACA,aAAOE,GAAG,GAAG,CAACA,GAAG,CAAJ,CAAA,EAAQA,GAAG,CAAX,CAAA,EAAeA,GAAG,CAAlB,KAAA,EAA0BA,GAAG,CAAhC,MAAG,CAAH,GAA2C,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAArD,CAAqD,CAArD;AACD;;;;EApJ6ClC,c;;SAA3BD,kB;AAuJrBA,kBAAkB,CAAlBA,aAAAA,GAAAA,oBAAAA;AACAA,kBAAkB,CAAlBA,YAAAA,GAAAA,YAAAA","sourcesContent":["import {LayerExtension} from '@deck.gl/core';\nimport {Texture2D} from '@luma.gl/core';\nimport GL from '@luma.gl/constants';\n\nimport {patternShaders} from './shaders.glsl';\n\nconst defaultProps = {\n  fillPatternEnabled: true,\n  fillPatternAtlas: null,\n  fillPatternMapping: null,\n  fillPatternMask: true,\n  getFillPattern: {type: 'accessor', value: d => d.pattern},\n  getFillPatternScale: {type: 'accessor', value: 1},\n  getFillPatternOffset: {type: 'accessor', value: [0, 0]}\n};\n\nconst DEFAULT_TEXTURE_PARAMETERS = {\n  [GL.TEXTURE_MIN_FILTER]: GL.LINEAR,\n  // GL.LINEAR is the default value but explicitly set it here\n  [GL.TEXTURE_MAG_FILTER]: GL.LINEAR,\n  // for texture boundary artifact\n  [GL.TEXTURE_WRAP_S]: GL.CLAMP_TO_EDGE,\n  [GL.TEXTURE_WRAP_T]: GL.CLAMP_TO_EDGE\n};\n\nexport default class FillStyleExtension extends LayerExtension {\n  constructor({pattern = false} = {}) {\n    super({pattern});\n  }\n\n  isEnabled(layer) {\n    return layer.getAttributeManager() && !layer.state.pathTesselator;\n  }\n\n  getShaders(extension) {\n    if (!extension.isEnabled(this)) {\n      return null;\n    }\n\n    return {\n      modules: [extension.opts.pattern && patternShaders].filter(Boolean)\n    };\n  }\n\n  initializeState(context, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const attributeManager = this.getAttributeManager();\n\n    if (extension.opts.pattern) {\n      attributeManager.add({\n        fillPatternFrames: {\n          size: 4,\n          accessor: 'getFillPattern',\n          transform: extension.getPatternFrame.bind(this),\n          shaderAttributes: {\n            fillPatternFrames: {\n              divisor: 0\n            },\n            instanceFillPatternFrames: {\n              divisor: 1\n            }\n          }\n        },\n        fillPatternScales: {\n          size: 1,\n          accessor: 'getFillPatternScale',\n          defaultValue: 1,\n          shaderAttributes: {\n            fillPatternScales: {\n              divisor: 0\n            },\n            instanceFillPatternScales: {\n              divisor: 1\n            }\n          }\n        },\n        fillPatternOffsets: {\n          size: 2,\n          accessor: 'getFillPatternOffset',\n          shaderAttributes: {\n            fillPatternOffsets: {\n              divisor: 0\n            },\n            instanceFillPatternOffsets: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n    this.setState({\n      emptyTexture: new Texture2D(this.context.gl, {\n        data: new Uint8Array(4),\n        width: 1,\n        height: 1\n      })\n    });\n  }\n\n  updateState({props, oldProps}, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    if (props.fillPatternAtlas && props.fillPatternAtlas !== oldProps.fillPatternAtlas) {\n      extension.loadPatternAtlas.call(this, props);\n    }\n    if (props.fillPatternMapping && props.fillPatternMapping !== oldProps.fillPatternMapping) {\n      extension.loadPatternMapping.call(this, props);\n    }\n  }\n\n  draw(params, extension) {\n    if (!extension.isEnabled(this)) {\n      return;\n    }\n\n    const {patternTexture} = this.state;\n    this.setModuleParameters({\n      fillPatternTexture: patternTexture || this.state.emptyTexture\n    });\n  }\n\n  finalizeState() {\n    const {patternTexture, emptyTexture} = this.state;\n    if (patternTexture) {\n      patternTexture.delete();\n    }\n    if (emptyTexture) {\n      emptyTexture.delete();\n    }\n  }\n\n  async loadPatternAtlas({fillPatternAtlas, fetch}) {\n    if (this.state.patternTexture) {\n      this.state.patternTexture.delete();\n    }\n    this.setState({patternTexture: null});\n    let image = fillPatternAtlas;\n    if (typeof image === 'string') {\n      image = await fetch(image, {propName: 'fillPatternAtlas', layer: this});\n    }\n    const patternTexture =\n      image instanceof Texture2D\n        ? image\n        : new Texture2D(this.context.gl, {\n            data: image,\n            parameters: DEFAULT_TEXTURE_PARAMETERS\n          });\n    this.setState({patternTexture});\n  }\n\n  async loadPatternMapping({fillPatternMapping, fetch}) {\n    this.setState({patternMapping: null});\n    let patternMapping = fillPatternMapping;\n    if (typeof patternMapping === 'string') {\n      patternMapping = await fetch(patternMapping, {\n        propName: 'fillPatternMapping',\n        layer: this\n      });\n    }\n    this.setState({patternMapping});\n    this.getAttributeManager().invalidate('getFillPattern');\n    this.setNeedsUpdate();\n  }\n\n  getPatternFrame(name) {\n    const {patternMapping} = this.state;\n    const def = patternMapping && patternMapping[name];\n    return def ? [def.x, def.y, def.width, def.height] : [0, 0, 0, 0];\n  }\n}\n\nFillStyleExtension.extensionName = 'FillStyleExtension';\nFillStyleExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}