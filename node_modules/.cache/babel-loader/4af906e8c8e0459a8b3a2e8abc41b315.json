{"ast":null,"code":"var _jsxFileName = \"/home/zhiguangda/ITS/deckgl/src/components/test/selectionlayer.js\";\n\n/* global document */\nimport React, { Component } from \"react\";\nimport ReactDom from \"react-dom\";\nimport MapGL from \"react-map-gl\";\nimport { Editor, EditingMode, DrawLineStringMode, DrawPolygonMode } from \"react-map-gl-draw\";\nconst MAPBOX_TOKEN = \"pk.eyJ1IjoidWJlcmRhdGEiLCJhIjoiY2pwY3owbGFxMDVwNTNxcXdwMms2OWtzbiJ9.1PPVl0VLUQgqrosrI2nUhg\";\nconst MODES = [{\n  id: \"drawPolyline\",\n  text: \"Draw Polyline\",\n  handler: DrawLineStringMode\n}, {\n  id: \"drawPolygon\",\n  text: \"Draw Polygon\",\n  handler: DrawPolygonMode\n}, {\n  id: \"editing\",\n  text: \"Edit Feature\",\n  handler: EditingMode\n}];\nconst DEFAULT_VIEWPORT = {\n  width: 800,\n  height: 600,\n  longitude: -122.45,\n  latitude: 37.78,\n  zoom: 14\n};\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this._switchMode = evt => {\n      const modeId = evt.target.value === this.state.modeId ? null : evt.target.value;\n      const mode = MODES.find(m => m.id === modeId);\n      const modeHandler = mode ? new mode.handler() : null;\n      this.setState({\n        modeId,\n        modeHandler\n      });\n    };\n\n    this._renderToolbar = () => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: 0,\n          right: 0,\n          maxWidth: \"320px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"select\", {\n        onChange: this._switchMode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"option\", {\n        value: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }\n      }, \"--Please choose a draw mode--\"), MODES.map(mode => /*#__PURE__*/React.createElement(\"option\", {\n        key: mode.id,\n        value: mode.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }\n      }, mode.text))));\n    };\n\n    this._updateViewport = viewport => {\n      this.setState({\n        viewport\n      });\n    };\n\n    this.state = {\n      viewport: DEFAULT_VIEWPORT,\n      modeId: null,\n      modeHandler: null\n    };\n  }\n\n  render() {\n    const {\n      viewport,\n      modeHandler\n    } = this.state;\n    return /*#__PURE__*/React.createElement(MapGL, Object.assign({}, viewport, {\n      width: \"100%\",\n      height: \"100%\",\n      mapboxApiAccessToken: MAPBOX_TOKEN,\n      mapStyle: \"mapbox://styles/mapbox/dark-v9\",\n      onViewportChange: this._updateViewport,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Editor // to make the lines/vertices easier to interact with\n    , {\n      clickRadius: 12,\n      mode: modeHandler,\n      onSelect: _ => {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }), this._renderToolbar());\n  }\n\n}","map":{"version":3,"sources":["/home/zhiguangda/ITS/deckgl/src/components/test/selectionlayer.js"],"names":["React","Component","ReactDom","MapGL","Editor","EditingMode","DrawLineStringMode","DrawPolygonMode","MAPBOX_TOKEN","MODES","id","text","handler","DEFAULT_VIEWPORT","width","height","longitude","latitude","zoom","App","constructor","props","_switchMode","evt","modeId","target","value","state","mode","find","m","modeHandler","setState","_renderToolbar","position","top","right","maxWidth","map","_updateViewport","viewport","render","_"],"mappings":"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","sourcesContent":["/* global document */\nimport React, { Component } from \"react\";\nimport ReactDom from \"react-dom\";\nimport MapGL from \"react-map-gl\";\nimport {\n    Editor,\n    EditingMode,\n    DrawLineStringMode,\n    DrawPolygonMode,\n} from \"react-map-gl-draw\";\n\nconst MAPBOX_TOKEN =\n    \"pk.eyJ1IjoidWJlcmRhdGEiLCJhIjoiY2pwY3owbGFxMDVwNTNxcXdwMms2OWtzbiJ9.1PPVl0VLUQgqrosrI2nUhg\";\n\nconst MODES = [\n    { id: \"drawPolyline\", text: \"Draw Polyline\", handler: DrawLineStringMode },\n    { id: \"drawPolygon\", text: \"Draw Polygon\", handler: DrawPolygonMode },\n    { id: \"editing\", text: \"Edit Feature\", handler: EditingMode },\n];\n\nconst DEFAULT_VIEWPORT = {\n    width: 800,\n    height: 600,\n    longitude: -122.45,\n    latitude: 37.78,\n    zoom: 14,\n};\n\nexport class App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            viewport: DEFAULT_VIEWPORT,\n            modeId: null,\n            modeHandler: null,\n        };\n    }\n\n    _switchMode = (evt) => {\n        const modeId =\n            evt.target.value === this.state.modeId ? null : evt.target.value;\n        const mode = MODES.find((m) => m.id === modeId);\n        const modeHandler = mode ? new mode.handler() : null;\n        this.setState({ modeId, modeHandler });\n    };\n\n    _renderToolbar = () => {\n        return (\n            <div\n                style={{ position: \"absolute\", top: 0, right: 0, maxWidth: \"320px\" }}\n            >\n                <select onChange={this._switchMode}>\n                    <option value=\"\">--Please choose a draw mode--</option>\n                    {MODES.map((mode) => (\n                        <option key={mode.id} value={mode.id}>\n                            {mode.text}\n                        </option>\n                    ))}\n                </select>\n            </div>\n        );\n    };\n\n    _updateViewport = (viewport) => {\n        this.setState({ viewport });\n    };\n\n    render() {\n        const { viewport, modeHandler } = this.state;\n        return (\n            <MapGL\n                {...viewport}\n                width=\"100%\"\n                height=\"100%\"\n                mapboxApiAccessToken={MAPBOX_TOKEN}\n                mapStyle={\"mapbox://styles/mapbox/dark-v9\"}\n                onViewportChange={this._updateViewport}\n            >\n                <Editor\n                    // to make the lines/vertices easier to interact with\n                    clickRadius={12}\n                    mode={modeHandler}\n                    onSelect={(_) => {}}\n                />\n                {this._renderToolbar()}\n            </MapGL>\n        );\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}