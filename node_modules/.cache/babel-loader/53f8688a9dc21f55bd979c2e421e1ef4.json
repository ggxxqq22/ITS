{"ast":null,"code":"var _jsxFileName = \"/home/zhiguangda/ITS/deckgl/src/components/covid-19.jsx\";\nimport React, { Component, Fragment } from 'react';\nimport { render } from 'react-dom';\nimport { StaticMap } from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport { ScatterplotLayer } from '@deck.gl/layers';\nimport { DataFilterExtension } from '@deck.gl/extensions';\nimport { MapView } from '@deck.gl/core';\nimport SliderCovid from './sliderCovid';\nimport { HeatmapLayer } from '@deck.gl/aggregation-layers';\nimport * as d3 from 'd3'; // Set your mapbox token here\n\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\nconst MAP_VIEW = new MapView({\n  // 1 is the distance between the camera and the ground\n  farZMultiplier: 100\n});\nlet days = 39;\nlet flag = -1; //read data\n\nlet dateMap = new Map();\n\nfunction getData() {\n  return new Promise(resolve => {\n    d3.csv(\"./COVID19_open_line_list.csv\").then(function (data) {\n      data.forEach(d => {\n        let tmp = d.date_confirmation.split('.');\n        let tmpstr = tmp[2] + '-' + tmp[1] + '-' + tmp[0];\n\n        if (dateMap.has(tmpstr)) {\n          dateMap.get(tmpstr).push([d.longitude, d.latitude]);\n        } else {\n          dateMap.set(tmpstr, []);\n        }\n      });\n      resolve('done');\n    });\n  });\n}\n\nconst INITIAL_VIEW_STATE = {\n  longitude: 120.207057,\n  latitude: 30.225901,\n  zoom: 3,\n  pitch: 0,\n  bearing: 0\n};\nconst MS_PER_DAY = 8.64e7; // milliseconds in a day\n\nconst dataFilter = new DataFilterExtension({\n  filterSize: 1\n});\nexport default class Covid extends Component {\n  // constructor(props) {\n  //     super(props);\n  //\n  //     const timeRange = this._getTimeRange(props.data);\n  //\n  //     this.state = {\n  //         timeRange,\n  //         filterValue: timeRange,\n  //         hoveredObject: null\n  //     };\n  //     this._onHover = this._onHover.bind(this);\n  //     this._renderTooltip = this._renderTooltip.bind(this);\n  // }\n  constructor(props) {\n    super(props); // const [value, setValue] = React.useState([0]);\n\n    this.state = {\n      pointData: [],\n      days: days,\n      dayCount: 0\n    };\n  } // componentWillReceiveProps(nextProps) {\n  //     if (nextProps.data !== this.props.data) {\n  //         const timeRange = this._getTimeRange(nextProps.data);\n  //         this.setState({timeRange, filterValue: timeRange});\n  //     }\n  // }\n  // _getTimeRange(data) {\n  //     if (!data) {\n  //         return null;\n  //     }\n  //     return data.reduce(\n  //         (range, d) => {\n  //             const t = d.timestamp / MS_PER_DAY;\n  //             range[0] = Math.min(range[0], t);\n  //             range[1] = Math.max(range[1], t);\n  //             return range;\n  //         },\n  //         [Infinity, -Infinity]\n  //     );\n  // }\n  // _onHover({x, y, object}) {\n  //     this.setState({x, y, hoveredObject: object});\n  // }\n\n\n  _renderLayers() {\n    return [// new ScatterplotLayer({\n    //     id: 'covid',\n    //     data:this.state.pointData,\n    //     opacity: 0.8,\n    //     radiusScale: 100,\n    //     radiusMinPixels: 1,\n    //     wrapLongitude: true,\n    //\n    //     getPosition: d =>d.coordinate,\n    //     getRadius: 500,\n    //     // getFillColor: d => {\n    //     //     const r = Math.sqrt(Math.max(d.depth, 0));\n    //     //     return [255 - r * 15, r * 5, r * 10];\n    //     // },\n    //\n    //     getFillColor:[255,0,0,255],\n    //\n    //     // getFilterValue: d => d.timestamp / MS_PER_DAY, // in days\n    //     // filterRange: [filterValue[0], filterValue[1]],\n    //     // filterSoftRange: [\n    //     //     filterValue[0] * 0.9 + filterValue[1] * 0.1,\n    //     //     filterValue[0] * 0.1 + filterValue[1] * 0.9\n    //     // ],\n    //     // extensions: [dataFilter],\n    //\n    //     pickable: true,\n    //     // onHover: this._onHover\n    // }),\n    new HeatmapLayer({\n      id: 'heatmap',\n      data: this.state.pointData,\n      getPosition: d => d.coordinate,\n      getWeight: 10,\n      radiusPixels: 20\n    })];\n  } // _renderTooltip() {\n  //     const {x, y, hoveredObject} = this.state;\n  //     return (\n  //         hoveredObject && (\n  //             <div className=\"tooltip\" style={{top: y, left: x}}>\n  //                 <div>\n  //                     <b>Time: </b>\n  //                     <span>{new Date(hoveredObject.timestamp).toUTCString()}</span>\n  //                 </div>\n  //                 <div>\n  //                     <b>Magnitude: </b>\n  //                     <span>{hoveredObject.magnitude}</span>\n  //                 </div>\n  //                 <div>\n  //                     <b>Depth: </b>\n  //                     <span>{hoveredObject.depth} km</span>\n  //                 </div>\n  //             </div>\n  //         )\n  //     );\n  // }\n\n\n  _formatLabel(t) {\n    const date = new Date('2020-01-22');\n    date.setDate(date.getDate() + t);\n    return `${date.getFullYear()}/${date.getMonth() + 1}/${date.getDate()}`;\n  }\n\n  render() {\n    const {\n      mapStyle = 'mapbox://styles/mapbox/light-v9'\n    } = this.props; // const {timeRange, filterValue} = this.state;\n\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DeckGL, {\n      views: MAP_VIEW,\n      layers: this._renderLayers(),\n      initialViewState: INITIAL_VIEW_STATE,\n      controller: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(StaticMap, {\n      reuseMaps: true,\n      mapStyle: mapStyle,\n      preventStyleDiffing: true,\n      mapboxApiAccessToken: MAPBOX_TOKEN,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(SliderCovid, {\n      min: 0,\n      max: this.state.days,\n      value: [0, this.state.dayCount],\n      formatLabel: this._formatLabel,\n      onChange: ({\n        date,\n        value\n      }) => {\n        console.log('value:', value);\n\n        if (flag === -1) {\n          let p = getData();\n          console.log(dateMap);\n          p.then(result => {\n            let pointData = [];\n\n            if (dateMap.has(date)) {\n              dateMap.get(date).forEach(d => {\n                console.log(d);\n                pointData.push({\n                  coordinate: [parseFloat(d[0]), parseFloat(d[1])]\n                });\n              });\n              this.setState({\n                pointData: pointData,\n                dayCount: value[1]\n              });\n            }\n\n            flag = 0;\n          });\n        } else {\n          let pointData = [];\n\n          if (dateMap.has(date)) {\n            dateMap.get(date).forEach(d => {\n              pointData.push({\n                coordinate: [parseFloat(d[0]), parseFloat(d[1])]\n              });\n            });\n            this.setState({\n              pointData: pointData // dayCount:this.state.dayCount+1\n\n            });\n          }\n\n          this.setState({\n            dayCount: value[1]\n          });\n          console.log(this.state.pointData);\n        } // let nowTime=value[1];\n        // // console.log('nowTime:',nowTime);\n        // if(Math.floor(nowTime/3600)!==this.state.hour){\n        //     this.setState({hour:Math.floor(nowTime/3600)})\n        //     console.log('nowztime:',nowTime);\n        //     var hour=(nowTime/3600).toFixed(0);\n        //     console.log('hour:',hour);\n        //     var p=getRoute(hour);\n        //     p.then(function() {\n        //         this.setState({\n        //             Route:Routes,\n        //             depPolygon:depPolygon,\n        //             desPolygon:desPolygon\n        //         })\n        //     }.bind(this))\n        // }\n        // this.setState({time: nowTime})\n        // //console.log(this.state)\n        // //console.log('value:',value)\n\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }));\n  }\n\n} // export function renderToDOM(container) {\n//     render(<App />, container);\n//     require('d3-request').csv(DATA_URL, (error, response) => {\n//         if (!error) {\n//             const data = response.map(row => ({\n//                 timestamp: new Date(`${row.DateTime} UTC`).getTime(),\n//                 latitude: Number(row.Latitude),\n//                 longitude: Number(row.Longitude),\n//                 depth: Number(row.Depth),\n//                 magnitude: Number(row.Magnitude)\n//             }));\n//             render(<App data={data} />, container);\n//         }\n//     });\n// }","map":{"version":3,"sources":["/home/zhiguangda/ITS/deckgl/src/components/covid-19.jsx"],"names":["React","Component","Fragment","render","StaticMap","DeckGL","ScatterplotLayer","DataFilterExtension","MapView","SliderCovid","HeatmapLayer","d3","MAPBOX_TOKEN","MAP_VIEW","farZMultiplier","days","flag","dateMap","Map","getData","Promise","resolve","csv","then","data","forEach","d","tmp","date_confirmation","split","tmpstr","has","get","push","longitude","latitude","set","INITIAL_VIEW_STATE","zoom","pitch","bearing","MS_PER_DAY","dataFilter","filterSize","Covid","constructor","props","state","pointData","dayCount","_renderLayers","id","getPosition","coordinate","getWeight","radiusPixels","_formatLabel","t","date","Date","setDate","getDate","getFullYear","getMonth","mapStyle","value","console","log","p","result","parseFloat","setState"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport {render} from 'react-dom';\nimport {StaticMap} from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport {ScatterplotLayer} from '@deck.gl/layers';\nimport {DataFilterExtension} from '@deck.gl/extensions';\nimport {MapView} from '@deck.gl/core';\nimport SliderCovid from './sliderCovid'\nimport {HeatmapLayer} from '@deck.gl/aggregation-layers';\nimport * as d3 from 'd3'\n\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\n\n\nconst MAP_VIEW = new MapView({\n    // 1 is the distance between the camera and the ground\n    farZMultiplier: 100\n});\n\n\nlet days=39;\n\nlet flag=-1;\n\n//read data\n\nlet dateMap=new Map();\nfunction getData(){\n    return new Promise(resolve => {\n        d3.csv(\"./COVID19_open_line_list.csv\").then(function (data) {\n            data.forEach(d=>{\n                let tmp=d.date_confirmation.split('.');\n                let tmpstr=tmp[2]+'-'+tmp[1]+'-'+tmp[0];\n                if(dateMap.has(tmpstr)){\n                    dateMap.get(tmpstr).push([d.longitude,d.latitude])\n                }\n                else{\n                    dateMap.set(tmpstr,[]);\n                }\n            })\n            resolve('done');\n        })\n    })\n}\n\n\n\n\n\nconst INITIAL_VIEW_STATE = {\n    longitude:  120.207057,\n    latitude: 30.225901,\n    zoom: 3,\n    pitch: 0,\n    bearing: 0\n};\n\nconst MS_PER_DAY = 8.64e7; // milliseconds in a day\n\nconst dataFilter = new DataFilterExtension({filterSize: 1});\n\nexport default class Covid extends Component {\n    // constructor(props) {\n    //     super(props);\n    //\n    //     const timeRange = this._getTimeRange(props.data);\n    //\n    //     this.state = {\n    //         timeRange,\n    //         filterValue: timeRange,\n    //         hoveredObject: null\n    //     };\n    //     this._onHover = this._onHover.bind(this);\n    //     this._renderTooltip = this._renderTooltip.bind(this);\n    // }\n    constructor(props) {\n        super(props);\n        // const [value, setValue] = React.useState([0]);\n        this.state = {\n            pointData:[],\n            days:days,\n            dayCount:0\n        };\n    }\n\n    // componentWillReceiveProps(nextProps) {\n    //     if (nextProps.data !== this.props.data) {\n    //         const timeRange = this._getTimeRange(nextProps.data);\n    //         this.setState({timeRange, filterValue: timeRange});\n    //     }\n    // }\n\n    // _getTimeRange(data) {\n    //     if (!data) {\n    //         return null;\n    //     }\n    //     return data.reduce(\n    //         (range, d) => {\n    //             const t = d.timestamp / MS_PER_DAY;\n    //             range[0] = Math.min(range[0], t);\n    //             range[1] = Math.max(range[1], t);\n    //             return range;\n    //         },\n    //         [Infinity, -Infinity]\n    //     );\n    // }\n\n    // _onHover({x, y, object}) {\n    //     this.setState({x, y, hoveredObject: object});\n    // }\n    _renderLayers() {\n\n        return [\n            // new ScatterplotLayer({\n            //     id: 'covid',\n            //     data:this.state.pointData,\n            //     opacity: 0.8,\n            //     radiusScale: 100,\n            //     radiusMinPixels: 1,\n            //     wrapLongitude: true,\n            //\n            //     getPosition: d =>d.coordinate,\n            //     getRadius: 500,\n            //     // getFillColor: d => {\n            //     //     const r = Math.sqrt(Math.max(d.depth, 0));\n            //     //     return [255 - r * 15, r * 5, r * 10];\n            //     // },\n            //\n            //     getFillColor:[255,0,0,255],\n            //\n            //     // getFilterValue: d => d.timestamp / MS_PER_DAY, // in days\n            //     // filterRange: [filterValue[0], filterValue[1]],\n            //     // filterSoftRange: [\n            //     //     filterValue[0] * 0.9 + filterValue[1] * 0.1,\n            //     //     filterValue[0] * 0.1 + filterValue[1] * 0.9\n            //     // ],\n            //     // extensions: [dataFilter],\n            //\n            //     pickable: true,\n            //     // onHover: this._onHover\n            // }),\n            new HeatmapLayer({\n                id:'heatmap',\n                data:this.state.pointData,\n                getPosition:d=>d.coordinate,\n                getWeight:10,\n                radiusPixels:20\n\n            })\n        ];\n    }\n\n    // _renderTooltip() {\n    //     const {x, y, hoveredObject} = this.state;\n    //     return (\n    //         hoveredObject && (\n    //             <div className=\"tooltip\" style={{top: y, left: x}}>\n    //                 <div>\n    //                     <b>Time: </b>\n    //                     <span>{new Date(hoveredObject.timestamp).toUTCString()}</span>\n    //                 </div>\n    //                 <div>\n    //                     <b>Magnitude: </b>\n    //                     <span>{hoveredObject.magnitude}</span>\n    //                 </div>\n    //                 <div>\n    //                     <b>Depth: </b>\n    //                     <span>{hoveredObject.depth} km</span>\n    //                 </div>\n    //             </div>\n    //         )\n    //     );\n    // }\n\n    _formatLabel(t) {\n        const date = new Date('2020-01-22');\n        date.setDate(date.getDate()+t);\n        return `${date.getFullYear()}/${date.getMonth()+1}/${date.getDate()}`;\n    }\n\n    render() {\n        const {mapStyle = 'mapbox://styles/mapbox/light-v9'} = this.props;\n        // const {timeRange, filterValue} = this.state;\n\n        return (\n            <Fragment>\n                <DeckGL\n                    views={MAP_VIEW}\n                    layers={this._renderLayers()}\n                    initialViewState={INITIAL_VIEW_STATE}\n                    controller={true}\n                >\n                    <StaticMap\n                        reuseMaps\n                        mapStyle={mapStyle}\n                        preventStyleDiffing={true}\n                        mapboxApiAccessToken={MAPBOX_TOKEN}\n                    />\n\n                    {/*{this._renderTooltip}*/}\n                </DeckGL>\n\n                <SliderCovid\n                    min={0}\n                    max={this.state.days}\n                    value={[0,this.state.dayCount]}\n                    formatLabel={this._formatLabel}\n\n                    onChange={({date,value}) => {\n                        console.log('value:',value)\n\n                        if(flag===-1){\n                            let p=getData();\n                            console.log(dateMap);\n                            p.then(result=>{\n                                let pointData=[];\n                                if(dateMap.has(date)){\n                                    dateMap.get(date).forEach(d=>{\n                                        console.log(d)\n                                        pointData.push({\n                                            coordinate:[parseFloat(d[0]),parseFloat(d[1])]\n                                        })\n                                    })\n                                    this.setState({\n                                        pointData:pointData,\n                                        dayCount:value[1]\n                                    })\n                                }\n\n                                flag=0;\n\n                            });\n\n                        }\n                        else{\n                            let pointData=[];\n\n                            if(dateMap.has(date)){\n                                dateMap.get(date).forEach(d=>{\n                                    pointData.push({\n                                        coordinate:[parseFloat(d[0]),parseFloat(d[1])]\n                                    })\n                                });\n                                this.setState({\n                                    pointData:pointData,\n                                    // dayCount:this.state.dayCount+1\n                                });\n                            }\n\n                            this.setState({\n                                dayCount:value[1]\n                            })\n                            console.log(this.state.pointData);\n                        }\n\n\n\n\n                        // let nowTime=value[1];\n                        // // console.log('nowTime:',nowTime);\n                        // if(Math.floor(nowTime/3600)!==this.state.hour){\n                        //     this.setState({hour:Math.floor(nowTime/3600)})\n                        //     console.log('nowztime:',nowTime);\n                        //     var hour=(nowTime/3600).toFixed(0);\n                        //     console.log('hour:',hour);\n                        //     var p=getRoute(hour);\n                        //     p.then(function() {\n                        //         this.setState({\n                        //             Route:Routes,\n                        //             depPolygon:depPolygon,\n                        //             desPolygon:desPolygon\n                        //         })\n                        //     }.bind(this))\n                        // }\n                        // this.setState({time: nowTime})\n                        // //console.log(this.state)\n                        // //console.log('value:',value)\n                    }}\n                />\n            </Fragment>\n        );\n    }\n}\n\n// export function renderToDOM(container) {\n//     render(<App />, container);\n//     require('d3-request').csv(DATA_URL, (error, response) => {\n//         if (!error) {\n//             const data = response.map(row => ({\n//                 timestamp: new Date(`${row.DateTime} UTC`).getTime(),\n//                 latitude: Number(row.Latitude),\n//                 longitude: Number(row.Longitude),\n//                 depth: Number(row.Depth),\n//                 magnitude: Number(row.Magnitude)\n//             }));\n//             render(<App data={data} />, container);\n//         }\n//     });\n// }\n"]},"metadata":{},"sourceType":"module"}