{"ast":null,"code":"\"use strict\";\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nvar types_1 = require(\"./types\");\n\nexports.getStepDecimals = function (step) {\n  var decimals = step.toString().split('.')[1];\n  return decimals ? decimals.length : 0;\n};\n\nfunction isTouchEvent(event) {\n  return event.touches && event.touches.length || event.changedTouches && event.changedTouches.length;\n}\n\nexports.isTouchEvent = isTouchEvent;\n\nfunction isStepDivisible(min, max, step) {\n  var res = (max - min) / step;\n  return parseInt(res.toString(), 10) === res;\n}\n\nexports.isStepDivisible = isStepDivisible;\n\nfunction normalizeValue(value, index, min, max, step, allowOverlap, values) {\n  var BIG_NUM = 10e10;\n  value = Math.round(value * BIG_NUM) / BIG_NUM;\n\n  if (!allowOverlap) {\n    var prev = values[index - 1];\n    var next = values[index + 1];\n    if (prev && prev > value) return prev;\n    if (next && next < value) return next;\n  }\n\n  if (value > max) return max;\n  if (value < min) return min; // `remainder` is a difference between the given value and a full step value\n  // that is closest lower to the given value and is in the range between the min value\n  // and the given value\n\n  var remainder = Math.floor(value * BIG_NUM - min * BIG_NUM) % Math.floor(step * BIG_NUM);\n  var closestLowerNum = Math.floor(value * BIG_NUM - Math.abs(remainder));\n  var rounded = remainder === 0 ? value : closestLowerNum / BIG_NUM; // Values with a remainder `< step/2` are rounded to the closest lower value\n  // while values with a remainder `= > step/2` are rounded to the closest bigger value\n\n  var res = Math.abs(remainder / BIG_NUM) < step / 2 ? rounded : rounded + step;\n  var decimalPlaces = exports.getStepDecimals(step);\n  return parseFloat(res.toFixed(decimalPlaces));\n}\n\nexports.normalizeValue = normalizeValue;\n\nfunction relativeValue(value, min, max) {\n  return (value - min) / (max - min);\n}\n\nexports.relativeValue = relativeValue;\n\nfunction isVertical(direction) {\n  return direction === types_1.Direction.Up || direction === types_1.Direction.Down;\n}\n\nexports.isVertical = isVertical;\n\nfunction checkBoundaries(value, min, max) {\n  if (min >= max) {\n    throw new RangeError(\"min (\" + min + \") is equal/bigger than max (\" + max + \")\");\n  }\n\n  if (value < min) {\n    throw new RangeError(\"value (\" + value + \") is smaller than min (\" + min + \")\");\n  }\n\n  if (value > max) {\n    throw new RangeError(\"value (\" + value + \") is bigger than max (\" + max + \")\");\n  }\n}\n\nexports.checkBoundaries = checkBoundaries;\n\nfunction checkInitialOverlap(values) {\n  if (values.length < 2) return;\n\n  if (!values.slice(1).every(function (item, i) {\n    return values[i] <= item;\n  })) {\n    throw new RangeError(\"values={[\" + values + \"]} needs to be sorted when allowOverlap={false}\");\n  }\n}\n\nexports.checkInitialOverlap = checkInitialOverlap;\n\nfunction getMargin(element) {\n  var style = window.getComputedStyle(element);\n  return {\n    top: parseInt(style['margin-top'], 10),\n    bottom: parseInt(style['margin-bottom'], 10),\n    left: parseInt(style['margin-left'], 10),\n    right: parseInt(style['margin-right'], 10)\n  };\n}\n\nexports.getMargin = getMargin;\n\nfunction getPaddingAndBorder(element) {\n  var style = window.getComputedStyle(element);\n  return {\n    top: parseInt(style['padding-top'], 10) + parseInt(style['border-top-width'], 10),\n    bottom: parseInt(style['padding-bottom'], 10) + parseInt(style['border-bottom-width'], 10),\n    left: parseInt(style['padding-left'], 10) + parseInt(style['border-left-width'], 10),\n    right: parseInt(style['padding-right'], 10) + parseInt(style['border-right-width'], 10)\n  };\n}\n\nexports.getPaddingAndBorder = getPaddingAndBorder;\n\nfunction translateThumbs(elements, offsets, rtl) {\n  var inverter = rtl ? -1 : 1;\n  elements.forEach(function (element, index) {\n    return translate(element, inverter * offsets[index].x, offsets[index].y);\n  });\n}\n\nexports.translateThumbs = translateThumbs;\n/**\n * Util function for calculating the index of the thumb that is closes to a given position\n * @param thumbs - array of Thumb element to calculate the distance from\n * @param clientX - target x position (mouse/touch)\n * @param clientY - target y position (mouse/touch)\n * @param direction - the direction of the track\n */\n\nfunction getClosestThumbIndex(thumbs, clientX, clientY, direction) {\n  var thumbIndex = 0;\n  var minThumbDistance = getThumbDistance(thumbs[0], clientX, clientY, direction);\n\n  for (var i = 1; i < thumbs.length; i++) {\n    var thumbDistance = getThumbDistance(thumbs[i], clientX, clientY, direction);\n\n    if (thumbDistance < minThumbDistance) {\n      minThumbDistance = thumbDistance;\n      thumbIndex = i;\n    }\n  }\n\n  return thumbIndex;\n}\n\nexports.getClosestThumbIndex = getClosestThumbIndex;\n\nfunction translate(element, x, y) {\n  element.style.transform = \"translate(\" + x + \"px, \" + y + \"px)\";\n}\n\nexports.translate = translate; // adapted from https://github.com/alexreardon/raf-schd\n\nexports.schd = function (fn) {\n  var lastArgs = [];\n  var frameId = null;\n\n  var wrapperFn = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    lastArgs = args;\n\n    if (frameId) {\n      return;\n    }\n\n    frameId = requestAnimationFrame(function () {\n      frameId = null;\n      fn.apply(void 0, lastArgs);\n    });\n  };\n\n  return wrapperFn;\n};\n\nfunction replaceAt(values, index, value) {\n  var ret = values.slice(0);\n  ret[index] = value;\n  return ret;\n}\n\nexports.replaceAt = replaceAt;\n\nfunction getTrackBackground(_a) {\n  var values = _a.values,\n      colors = _a.colors,\n      min = _a.min,\n      max = _a.max,\n      _b = _a.direction,\n      direction = _b === void 0 ? types_1.Direction.Right : _b,\n      _c = _a.rtl,\n      rtl = _c === void 0 ? false : _c;\n\n  if (rtl && direction === types_1.Direction.Right) {\n    direction = types_1.Direction.Left;\n  } else if (rtl && types_1.Direction.Left) {\n    direction = types_1.Direction.Right;\n  } // sort values ascending\n\n\n  var progress = values.slice(0).sort(function (a, b) {\n    return a - b;\n  }).map(function (value) {\n    return (value - min) / (max - min) * 100;\n  });\n  var middle = progress.reduce(function (acc, point, index) {\n    return acc + \", \" + colors[index] + \" \" + point + \"%, \" + colors[index + 1] + \" \" + point + \"%\";\n  }, '');\n  return \"linear-gradient(\" + direction + \", \" + colors[0] + \" 0%\" + middle + \", \" + colors[colors.length - 1] + \" 100%)\";\n}\n\nexports.getTrackBackground = getTrackBackground;\n\nfunction voidFn() {}\n\nexports.voidFn = voidFn;\n\nfunction assertUnreachable(x) {\n  throw new Error(\"Didn't expect to get here\");\n}\n\nexports.assertUnreachable = assertUnreachable;\n/**\n * Util function for grabbing the true largest width of a thumb\n * including the label\n * @param thumbEl - Thumb element to grab the largest width from\n * @param value - Thumb value, not label value\n * @param separator - Label separator value\n */\n\nvar getThumbWidth = function (thumbEl, value, separator, decimalPlaces, valueToLabel) {\n  if (valueToLabel === void 0) {\n    valueToLabel = function (value) {\n      return value;\n    };\n  }\n\n  var width = Math.ceil(__spreadArrays([thumbEl], Array.from(thumbEl.children)).reduce(function (width, el) {\n    var elWidth = Math.ceil(el.getBoundingClientRect().width);\n    /**\n     * If a label contains a merged label value, it won't return the true\n     * label width for that Thumb. Clone the label and change the value\n     * to that individual Thumb value in order to grab the true width.\n     */\n\n    if (el.innerText && el.innerText.includes(separator) && el.childElementCount === 0) {\n      var elClone = el.cloneNode(true);\n      elClone.innerHTML = valueToLabel(value.toFixed(decimalPlaces));\n      elClone.style.visibility = 'hidden';\n      document.body.appendChild(elClone);\n      elWidth = Math.ceil(elClone.getBoundingClientRect().width);\n      document.body.removeChild(elClone);\n    }\n\n    return elWidth > width ? elWidth : width;\n  }, thumbEl.getBoundingClientRect().width));\n  return width;\n};\n/**\n * Bulk of logic for thumb overlaps\n * Consider a scenario with 5 thumbs;\n * Thumb 1 overlaps with thumb 0 and thumb 2\n * Thumb 2 overlaps with thumb 3\n * We need an array that contains [0, 1, 2, 3]\n * The function needs to return the directly overlapping thumbs\n * and all thumbs overlapping linked to those and so on\n * @param index - Thumb index calculating overlaps for\n * @param offsets - Current Array of Thumb offsets for Range\n * @param thumbs - Array of Thumb elements\n * @param values - Array of Thumb values\n * @param separator - String separator for merged label values\n * @returns overlaps - Array of all overlapping thumbs from the index\n */\n\n\nvar getOverlaps = function (index, offsets, thumbs, values, separator, decimalPlaces, valueToLabel) {\n  if (valueToLabel === void 0) {\n    valueToLabel = function (value) {\n      return value;\n    };\n  }\n\n  var overlaps = [];\n  /**\n   * Recursive function for building the overlaps Array\n   * If an overlap is found, find the overlaps for that overlap\n   * @param thumbIndex current Thumb index to find overlaps from\n   */\n\n  var buildOverlaps = function (thumbIndex) {\n    var thumbXWidth = getThumbWidth(thumbs[thumbIndex], values[thumbIndex], separator, decimalPlaces, valueToLabel);\n    var thumbX = offsets[thumbIndex].x;\n    /**\n     * Iterate through the Thumb offsets, if there is a match\n     * add the thumbIndex and siblingIndex to the overlaps Array\n     *\n     * Then build overlaps from the overlapping siblingIndex\n     */\n\n    offsets.forEach(function (_a, siblingIndex) {\n      var siblingX = _a.x;\n      var siblingWidth = getThumbWidth(thumbs[siblingIndex], values[siblingIndex], separator, decimalPlaces, valueToLabel);\n\n      if (thumbIndex !== siblingIndex && (thumbX >= siblingX && thumbX <= siblingX + siblingWidth || thumbX + thumbXWidth >= siblingX && thumbX + thumbXWidth <= siblingX + siblingWidth)) {\n        if (!overlaps.includes(siblingIndex)) {\n          overlaps.push(thumbIndex);\n          overlaps.push(siblingIndex);\n          overlaps = __spreadArrays(overlaps, [thumbIndex, siblingIndex]);\n          buildOverlaps(siblingIndex);\n        }\n      }\n    });\n  };\n\n  buildOverlaps(index); // Sort and remove duplicates from the built overlaps\n\n  return Array.from(new Set(overlaps.sort()));\n};\n/**\n * A custom React Hook for calculating whether a thumb overlaps\n * another and whether labels could/should merge.\n * @param rangeRef - React ref value of Range component\n * @param values - current Range values Array\n * @param index - thumb index\n * @param step - step value, used to calculate the number of decimal places\n * @param separator - string to separate thumb values\n * @returns label value + styling for thumb label\n */\n\n\nexports.useThumbOverlap = function (rangeRef, values, index, step, separator, valueToLabel) {\n  if (step === void 0) {\n    step = 0.1;\n  }\n\n  if (separator === void 0) {\n    separator = ' - ';\n  }\n\n  if (valueToLabel === void 0) {\n    valueToLabel = function (value) {\n      return value;\n    };\n  }\n\n  var decimalPlaces = exports.getStepDecimals(step); // Create initial label style and value. Label value defaults to thumb value\n\n  var _a = react_1.useState({}),\n      labelStyle = _a[0],\n      setLabelStyle = _a[1];\n\n  var _b = react_1.useState(valueToLabel(values[index].toFixed(decimalPlaces))),\n      labelValue = _b[0],\n      setLabelValue = _b[1]; // When the rangeRef or values change, update the Thumb label values and styling\n\n\n  react_1.useEffect(function () {\n    if (rangeRef) {\n      var thumbs = rangeRef.getThumbs();\n      if (thumbs.length < 1) return;\n      var newStyle = {};\n      var offsets_1 = rangeRef.getOffsets();\n      /**\n       * Get any overlaps for the given Thumb index. This must return all linked\n       * Thumbs. So if there are 4 Thumbs and Thumbs 2, 3 and 4 overlap. If we are\n       * getting the overlaps for Thumb 1 and it overlaps only Thumb 2, we must get\n       * 2, 3 and 4 also.\n       */\n\n      var overlaps = getOverlaps(index, offsets_1, thumbs, values, separator, decimalPlaces, valueToLabel); // Set a default label value of the Thumb value\n\n      var labelValue_1 = valueToLabel(values[index].toFixed(decimalPlaces));\n      /**\n       * If there are overlaps for the Thumb, we need to calculate the correct\n       * Label value along with the relevant styling. We only want to show a Label\n       * for the left most Thumb in an overlapping set.\n       * All other Thumbs will be set to display: none.\n       */\n\n      if (overlaps.length) {\n        /**\n         * Get an Array of the offsets for the overlapping Thumbs\n         * This is so we can determine if the Thumb we are looking at\n         * is the left most thumb in an overlapping set\n         */\n        var offsetsX = overlaps.reduce(function (a, c, i, s) {\n          return a.length ? __spreadArrays(a, [offsets_1[s[i]].x]) : [offsets_1[s[i]].x];\n        }, []);\n        /**\n         * If our Thumb is the left most Thumb, we can build a Label value\n         * and set the style for that Label\n         */\n\n        if (Math.min.apply(Math, offsetsX) === offsets_1[index].x) {\n          /**\n           * First calculate the Label value. To do this,\n           * grab all the values for the Thumbs in our overlaps.\n           * Then convert that to a Set and sort it whilst removing duplicates.\n           */\n          var labelValues_1 = [];\n          overlaps.forEach(function (thumb) {\n            labelValues_1.push(values[thumb].toFixed(decimalPlaces));\n          });\n          /**\n           *  Update the labelValue with the resulting Array\n           *  joined by our defined separator\n           */\n\n          labelValue_1 = Array.from(new Set(labelValues_1.sort(function (a, b) {\n            return parseFloat(a) - parseFloat(b);\n          }))).map(valueToLabel).join(separator);\n          /**\n           * Lastly, build the label styling. The label styling will\n           * position the label and apply a transform so that it's centered.\n           * We want the center point between the left edge of the left most Thumb\n           * and the right edge of the right most Thumb.\n           */\n\n          var first = Math.min.apply(Math, offsetsX);\n          var last = Math.max.apply(Math, offsetsX);\n          var lastWidth = thumbs[overlaps[offsetsX.indexOf(last)]].getBoundingClientRect().width;\n          newStyle.left = Math.abs(first - (last + lastWidth)) / 2 + \"px\";\n          newStyle.transform = 'translate(-50%, 0)';\n        } else {\n          // If the Thumb isn't the left most Thumb, hide the Label!\n          newStyle.visibility = 'hidden';\n        }\n      } // Update the label value and style\n\n\n      setLabelValue(labelValue_1);\n      setLabelStyle(newStyle);\n    }\n  }, [rangeRef, values]);\n  return [labelValue, labelStyle];\n};\n/**\n * Util function for calculating the distance of the center of a thumb\n * form a given mouse/touch target's position\n * @param thumbEl - Thumb element to calculate the distance from\n * @param clientX - target x position (mouse/touch)\n * @param clientY - target y position (mouse/touch)\n * @param direction - the direction of the track\n */\n\n\nfunction getThumbDistance(thumbEl, clientX, clientY, direction) {\n  var _a = thumbEl.getBoundingClientRect(),\n      x = _a.x,\n      y = _a.y,\n      width = _a.width,\n      height = _a.height;\n\n  return isVertical(direction) ? Math.abs(clientY - (y + height / 2)) : Math.abs(clientX - (x + width / 2));\n}","map":{"version":3,"sources":["/home/zhiguangda/ITS/deckgl/node_modules/react-range/lib/utils.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","Object","defineProperty","exports","value","react_1","require","types_1","getStepDecimals","step","decimals","toString","split","isTouchEvent","event","touches","changedTouches","isStepDivisible","min","max","res","parseInt","normalizeValue","index","allowOverlap","values","BIG_NUM","Math","round","prev","next","remainder","floor","closestLowerNum","abs","rounded","decimalPlaces","parseFloat","toFixed","relativeValue","isVertical","direction","Direction","Up","Down","checkBoundaries","RangeError","checkInitialOverlap","slice","every","item","getMargin","element","style","window","getComputedStyle","top","bottom","left","right","getPaddingAndBorder","translateThumbs","elements","offsets","rtl","inverter","forEach","translate","x","y","getClosestThumbIndex","thumbs","clientX","clientY","thumbIndex","minThumbDistance","getThumbDistance","thumbDistance","transform","schd","fn","lastArgs","frameId","wrapperFn","args","_i","requestAnimationFrame","apply","replaceAt","ret","getTrackBackground","_a","colors","_b","Right","_c","Left","progress","sort","b","map","middle","reduce","acc","point","voidFn","assertUnreachable","Error","getThumbWidth","thumbEl","separator","valueToLabel","width","ceil","from","children","el","elWidth","getBoundingClientRect","innerText","includes","childElementCount","elClone","cloneNode","innerHTML","visibility","document","body","appendChild","removeChild","getOverlaps","overlaps","buildOverlaps","thumbXWidth","thumbX","siblingIndex","siblingX","siblingWidth","push","Set","useThumbOverlap","rangeRef","useState","labelStyle","setLabelStyle","labelValue","setLabelValue","useEffect","getThumbs","newStyle","offsets_1","getOffsets","labelValue_1","offsetsX","c","labelValues_1","thumb","join","first","last","lastWidth","indexOf","height"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nvar types_1 = require(\"./types\");\nexports.getStepDecimals = function (step) {\n    var decimals = step.toString().split('.')[1];\n    return decimals ? decimals.length : 0;\n};\nfunction isTouchEvent(event) {\n    return ((event.touches && event.touches.length) ||\n        (event.changedTouches && event.changedTouches.length));\n}\nexports.isTouchEvent = isTouchEvent;\nfunction isStepDivisible(min, max, step) {\n    var res = (max - min) / step;\n    return parseInt(res.toString(), 10) === res;\n}\nexports.isStepDivisible = isStepDivisible;\nfunction normalizeValue(value, index, min, max, step, allowOverlap, values) {\n    var BIG_NUM = 10e10;\n    value = Math.round(value * BIG_NUM) / BIG_NUM;\n    if (!allowOverlap) {\n        var prev = values[index - 1];\n        var next = values[index + 1];\n        if (prev && prev > value)\n            return prev;\n        if (next && next < value)\n            return next;\n    }\n    if (value > max)\n        return max;\n    if (value < min)\n        return min;\n    // `remainder` is a difference between the given value and a full step value\n    // that is closest lower to the given value and is in the range between the min value\n    // and the given value\n    var remainder = Math.floor(value * BIG_NUM - min * BIG_NUM) %\n        Math.floor(step * BIG_NUM);\n    var closestLowerNum = Math.floor(value * BIG_NUM - Math.abs(remainder));\n    var rounded = remainder === 0 ? value : closestLowerNum / BIG_NUM;\n    // Values with a remainder `< step/2` are rounded to the closest lower value\n    // while values with a remainder `= > step/2` are rounded to the closest bigger value\n    var res = Math.abs(remainder / BIG_NUM) < step / 2\n        ? rounded\n        : rounded + step;\n    var decimalPlaces = exports.getStepDecimals(step);\n    return parseFloat(res.toFixed(decimalPlaces));\n}\nexports.normalizeValue = normalizeValue;\nfunction relativeValue(value, min, max) {\n    return (value - min) / (max - min);\n}\nexports.relativeValue = relativeValue;\nfunction isVertical(direction) {\n    return direction === types_1.Direction.Up || direction === types_1.Direction.Down;\n}\nexports.isVertical = isVertical;\nfunction checkBoundaries(value, min, max) {\n    if (min >= max) {\n        throw new RangeError(\"min (\" + min + \") is equal/bigger than max (\" + max + \")\");\n    }\n    if (value < min) {\n        throw new RangeError(\"value (\" + value + \") is smaller than min (\" + min + \")\");\n    }\n    if (value > max) {\n        throw new RangeError(\"value (\" + value + \") is bigger than max (\" + max + \")\");\n    }\n}\nexports.checkBoundaries = checkBoundaries;\nfunction checkInitialOverlap(values) {\n    if (values.length < 2)\n        return;\n    if (!values.slice(1).every(function (item, i) { return values[i] <= item; })) {\n        throw new RangeError(\"values={[\" + values + \"]} needs to be sorted when allowOverlap={false}\");\n    }\n}\nexports.checkInitialOverlap = checkInitialOverlap;\nfunction getMargin(element) {\n    var style = window.getComputedStyle(element);\n    return {\n        top: parseInt(style['margin-top'], 10),\n        bottom: parseInt(style['margin-bottom'], 10),\n        left: parseInt(style['margin-left'], 10),\n        right: parseInt(style['margin-right'], 10)\n    };\n}\nexports.getMargin = getMargin;\nfunction getPaddingAndBorder(element) {\n    var style = window.getComputedStyle(element);\n    return {\n        top: parseInt(style['padding-top'], 10) + parseInt(style['border-top-width'], 10),\n        bottom: parseInt(style['padding-bottom'], 10) + parseInt(style['border-bottom-width'], 10),\n        left: parseInt(style['padding-left'], 10) + parseInt(style['border-left-width'], 10),\n        right: parseInt(style['padding-right'], 10) + parseInt(style['border-right-width'], 10),\n    };\n}\nexports.getPaddingAndBorder = getPaddingAndBorder;\nfunction translateThumbs(elements, offsets, rtl) {\n    var inverter = rtl ? -1 : 1;\n    elements.forEach(function (element, index) {\n        return translate(element, inverter * offsets[index].x, offsets[index].y);\n    });\n}\nexports.translateThumbs = translateThumbs;\n/**\n * Util function for calculating the index of the thumb that is closes to a given position\n * @param thumbs - array of Thumb element to calculate the distance from\n * @param clientX - target x position (mouse/touch)\n * @param clientY - target y position (mouse/touch)\n * @param direction - the direction of the track\n */\nfunction getClosestThumbIndex(thumbs, clientX, clientY, direction) {\n    var thumbIndex = 0;\n    var minThumbDistance = getThumbDistance(thumbs[0], clientX, clientY, direction);\n    for (var i = 1; i < thumbs.length; i++) {\n        var thumbDistance = getThumbDistance(thumbs[i], clientX, clientY, direction);\n        if (thumbDistance < minThumbDistance) {\n            minThumbDistance = thumbDistance;\n            thumbIndex = i;\n        }\n    }\n    return thumbIndex;\n}\nexports.getClosestThumbIndex = getClosestThumbIndex;\nfunction translate(element, x, y) {\n    element.style.transform = \"translate(\" + x + \"px, \" + y + \"px)\";\n}\nexports.translate = translate;\n// adapted from https://github.com/alexreardon/raf-schd\nexports.schd = function (fn) {\n    var lastArgs = [];\n    var frameId = null;\n    var wrapperFn = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        lastArgs = args;\n        if (frameId) {\n            return;\n        }\n        frameId = requestAnimationFrame(function () {\n            frameId = null;\n            fn.apply(void 0, lastArgs);\n        });\n    };\n    return wrapperFn;\n};\nfunction replaceAt(values, index, value) {\n    var ret = values.slice(0);\n    ret[index] = value;\n    return ret;\n}\nexports.replaceAt = replaceAt;\nfunction getTrackBackground(_a) {\n    var values = _a.values, colors = _a.colors, min = _a.min, max = _a.max, _b = _a.direction, direction = _b === void 0 ? types_1.Direction.Right : _b, _c = _a.rtl, rtl = _c === void 0 ? false : _c;\n    if (rtl && direction === types_1.Direction.Right) {\n        direction = types_1.Direction.Left;\n    }\n    else if (rtl && types_1.Direction.Left) {\n        direction = types_1.Direction.Right;\n    }\n    // sort values ascending\n    var progress = values.slice(0).sort(function (a, b) { return a - b; }).map(function (value) { return ((value - min) / (max - min)) * 100; });\n    var middle = progress.reduce(function (acc, point, index) {\n        return acc + \", \" + colors[index] + \" \" + point + \"%, \" + colors[index + 1] + \" \" + point + \"%\";\n    }, '');\n    return \"linear-gradient(\" + direction + \", \" + colors[0] + \" 0%\" + middle + \", \" + colors[colors.length - 1] + \" 100%)\";\n}\nexports.getTrackBackground = getTrackBackground;\nfunction voidFn() { }\nexports.voidFn = voidFn;\nfunction assertUnreachable(x) {\n    throw new Error(\"Didn't expect to get here\");\n}\nexports.assertUnreachable = assertUnreachable;\n/**\n * Util function for grabbing the true largest width of a thumb\n * including the label\n * @param thumbEl - Thumb element to grab the largest width from\n * @param value - Thumb value, not label value\n * @param separator - Label separator value\n */\nvar getThumbWidth = function (thumbEl, value, separator, decimalPlaces, valueToLabel) {\n    if (valueToLabel === void 0) { valueToLabel = function (value) { return value; }; }\n    var width = Math.ceil(__spreadArrays([thumbEl], Array.from(thumbEl.children)).reduce(function (width, el) {\n        var elWidth = Math.ceil(el.getBoundingClientRect().width);\n        /**\n         * If a label contains a merged label value, it won't return the true\n         * label width for that Thumb. Clone the label and change the value\n         * to that individual Thumb value in order to grab the true width.\n         */\n        if (el.innerText &&\n            el.innerText.includes(separator) &&\n            el.childElementCount === 0) {\n            var elClone = el.cloneNode(true);\n            elClone.innerHTML = valueToLabel(value.toFixed(decimalPlaces));\n            elClone.style.visibility = 'hidden';\n            document.body.appendChild(elClone);\n            elWidth = Math.ceil(elClone.getBoundingClientRect().width);\n            document.body.removeChild(elClone);\n        }\n        return elWidth > width ? elWidth : width;\n    }, thumbEl.getBoundingClientRect().width));\n    return width;\n};\n/**\n * Bulk of logic for thumb overlaps\n * Consider a scenario with 5 thumbs;\n * Thumb 1 overlaps with thumb 0 and thumb 2\n * Thumb 2 overlaps with thumb 3\n * We need an array that contains [0, 1, 2, 3]\n * The function needs to return the directly overlapping thumbs\n * and all thumbs overlapping linked to those and so on\n * @param index - Thumb index calculating overlaps for\n * @param offsets - Current Array of Thumb offsets for Range\n * @param thumbs - Array of Thumb elements\n * @param values - Array of Thumb values\n * @param separator - String separator for merged label values\n * @returns overlaps - Array of all overlapping thumbs from the index\n */\nvar getOverlaps = function (index, offsets, thumbs, values, separator, decimalPlaces, valueToLabel) {\n    if (valueToLabel === void 0) { valueToLabel = function (value) { return value; }; }\n    var overlaps = [];\n    /**\n     * Recursive function for building the overlaps Array\n     * If an overlap is found, find the overlaps for that overlap\n     * @param thumbIndex current Thumb index to find overlaps from\n     */\n    var buildOverlaps = function (thumbIndex) {\n        var thumbXWidth = getThumbWidth(thumbs[thumbIndex], values[thumbIndex], separator, decimalPlaces, valueToLabel);\n        var thumbX = offsets[thumbIndex].x;\n        /**\n         * Iterate through the Thumb offsets, if there is a match\n         * add the thumbIndex and siblingIndex to the overlaps Array\n         *\n         * Then build overlaps from the overlapping siblingIndex\n         */\n        offsets.forEach(function (_a, siblingIndex) {\n            var siblingX = _a.x;\n            var siblingWidth = getThumbWidth(thumbs[siblingIndex], values[siblingIndex], separator, decimalPlaces, valueToLabel);\n            if (thumbIndex !== siblingIndex &&\n                ((thumbX >= siblingX && thumbX <= siblingX + siblingWidth) ||\n                    (thumbX + thumbXWidth >= siblingX &&\n                        thumbX + thumbXWidth <= siblingX + siblingWidth))) {\n                if (!overlaps.includes(siblingIndex)) {\n                    overlaps.push(thumbIndex);\n                    overlaps.push(siblingIndex);\n                    overlaps = __spreadArrays(overlaps, [thumbIndex, siblingIndex]);\n                    buildOverlaps(siblingIndex);\n                }\n            }\n        });\n    };\n    buildOverlaps(index);\n    // Sort and remove duplicates from the built overlaps\n    return Array.from(new Set(overlaps.sort()));\n};\n/**\n * A custom React Hook for calculating whether a thumb overlaps\n * another and whether labels could/should merge.\n * @param rangeRef - React ref value of Range component\n * @param values - current Range values Array\n * @param index - thumb index\n * @param step - step value, used to calculate the number of decimal places\n * @param separator - string to separate thumb values\n * @returns label value + styling for thumb label\n */\nexports.useThumbOverlap = function (rangeRef, values, index, step, separator, valueToLabel) {\n    if (step === void 0) { step = 0.1; }\n    if (separator === void 0) { separator = ' - '; }\n    if (valueToLabel === void 0) { valueToLabel = function (value) { return value; }; }\n    var decimalPlaces = exports.getStepDecimals(step);\n    // Create initial label style and value. Label value defaults to thumb value\n    var _a = react_1.useState({}), labelStyle = _a[0], setLabelStyle = _a[1];\n    var _b = react_1.useState(valueToLabel(values[index].toFixed(decimalPlaces))), labelValue = _b[0], setLabelValue = _b[1];\n    // When the rangeRef or values change, update the Thumb label values and styling\n    react_1.useEffect(function () {\n        if (rangeRef) {\n            var thumbs = rangeRef.getThumbs();\n            if (thumbs.length < 1)\n                return;\n            var newStyle = {};\n            var offsets_1 = rangeRef.getOffsets();\n            /**\n             * Get any overlaps for the given Thumb index. This must return all linked\n             * Thumbs. So if there are 4 Thumbs and Thumbs 2, 3 and 4 overlap. If we are\n             * getting the overlaps for Thumb 1 and it overlaps only Thumb 2, we must get\n             * 2, 3 and 4 also.\n             */\n            var overlaps = getOverlaps(index, offsets_1, thumbs, values, separator, decimalPlaces, valueToLabel);\n            // Set a default label value of the Thumb value\n            var labelValue_1 = valueToLabel(values[index].toFixed(decimalPlaces));\n            /**\n             * If there are overlaps for the Thumb, we need to calculate the correct\n             * Label value along with the relevant styling. We only want to show a Label\n             * for the left most Thumb in an overlapping set.\n             * All other Thumbs will be set to display: none.\n             */\n            if (overlaps.length) {\n                /**\n                 * Get an Array of the offsets for the overlapping Thumbs\n                 * This is so we can determine if the Thumb we are looking at\n                 * is the left most thumb in an overlapping set\n                 */\n                var offsetsX = overlaps.reduce(function (a, c, i, s) {\n                    return a.length ? __spreadArrays(a, [offsets_1[s[i]].x]) : [offsets_1[s[i]].x];\n                }, []);\n                /**\n                 * If our Thumb is the left most Thumb, we can build a Label value\n                 * and set the style for that Label\n                 */\n                if (Math.min.apply(Math, offsetsX) === offsets_1[index].x) {\n                    /**\n                     * First calculate the Label value. To do this,\n                     * grab all the values for the Thumbs in our overlaps.\n                     * Then convert that to a Set and sort it whilst removing duplicates.\n                     */\n                    var labelValues_1 = [];\n                    overlaps.forEach(function (thumb) {\n                        labelValues_1.push(values[thumb].toFixed(decimalPlaces));\n                    });\n                    /**\n                     *  Update the labelValue with the resulting Array\n                     *  joined by our defined separator\n                     */\n                    labelValue_1 = Array.from(new Set(labelValues_1.sort(function (a, b) { return parseFloat(a) - parseFloat(b); })))\n                        .map(valueToLabel)\n                        .join(separator);\n                    /**\n                     * Lastly, build the label styling. The label styling will\n                     * position the label and apply a transform so that it's centered.\n                     * We want the center point between the left edge of the left most Thumb\n                     * and the right edge of the right most Thumb.\n                     */\n                    var first = Math.min.apply(Math, offsetsX);\n                    var last = Math.max.apply(Math, offsetsX);\n                    var lastWidth = thumbs[overlaps[offsetsX.indexOf(last)]].getBoundingClientRect().width;\n                    newStyle.left = Math.abs(first - (last + lastWidth)) / 2 + \"px\";\n                    newStyle.transform = 'translate(-50%, 0)';\n                }\n                else {\n                    // If the Thumb isn't the left most Thumb, hide the Label!\n                    newStyle.visibility = 'hidden';\n                }\n            }\n            // Update the label value and style\n            setLabelValue(labelValue_1);\n            setLabelStyle(newStyle);\n        }\n    }, [rangeRef, values]);\n    return [labelValue, labelStyle];\n};\n/**\n * Util function for calculating the distance of the center of a thumb\n * form a given mouse/touch target's position\n * @param thumbEl - Thumb element to calculate the distance from\n * @param clientX - target x position (mouse/touch)\n * @param clientY - target y position (mouse/touch)\n * @param direction - the direction of the track\n */\nfunction getThumbDistance(thumbEl, clientX, clientY, direction) {\n    var _a = thumbEl.getBoundingClientRect(), x = _a.x, y = _a.y, width = _a.width, height = _a.height;\n    return isVertical(direction) ? Math.abs(clientY - (y + height / 2)) : Math.abs(clientX - (x + width / 2));\n}\n"]},"metadata":{},"sourceType":"script"}