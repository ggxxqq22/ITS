{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/zhiguangda/ITS/deckgl/src/components/routeMap.js\";\n// /// app.js\nimport React, { Fragment } from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { TripsLayer } from '@deck.gl/geo-layers';\nimport { StaticMap } from 'react-map-gl';\nimport * as d3 from 'd3'; //\n// // Set your mapbox access token here\n// const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\n//\n// // Initial viewport settings\n// const initialViewState = {\n//     longitude: -122.41669,\n//     latitude: 37.7853,\n//     zoom: 13,\n//     pitch: 0,\n//     bearing: 0\n// };\n//\n// // Data to be used by the LineLayer\n// const data = [   {\n//              waypoints: [{coordinates: [-122.3907988, 37.7664413], timestamp: 1554772579000},\n//                      {coordinates: [-122.3908298,37.7667706], timestamp: 1554772579010},\n//                      {coordinates: [-122.4485672, 37.8040182], timestamp: 1554772580200}\n//              ]\n//      }];\n//\n// class App extends React.Component {\n//     render() {\n//         const layers = [\n//             new TripsLayer({id: 'trips-layer', data,\n//                 getPath:d => d.waypoints.map(p => p.coordinates),\n//                 getTimestamps: d => d.waypoints.map(p => p.timestamp - 1554772579000),\n//                 getColor: [253, 128, 93],\n//                 opacity: 0.8,\n//                 widthMinPixels: 5,\n//                 rounded: true,\n//                 trailLength: 200,\n//                 currentTime: 0\n//\n//             })\n//         ];\n//\n//         return (\n//             <DeckGL\n//                 initialViewState={initialViewState}\n//                 controller={true}\n//                 layers={layers}\n//             >\n//                 <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n//             </DeckGL>\n//         );\n//     }\n// }\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nimport { Component } from 'react';\nimport { AmbientLight, PointLight, LightingEffect } from '@deck.gl/core';\nimport { ColumnLayer, PolygonLayer, IconLayer, ScatterplotLayer } from '@deck.gl/layers';\nimport SliderTraffic from \"./sliderTraffic\";\nimport { Select, SIZE } from \"baseui/select\";\nimport { BaseProvider, LightTheme, styled } from \"baseui\";\nimport { Client as Styletron } from 'styletron-engine-atomic';\nimport { Provider as StyletronProvider } from 'styletron-react';\nconst SelectContainer = styled('div', {\n  position: 'absolute',\n  // display: 'flex',\n  // justifyContent: 'center',\n  // alignItems: 'center',\n  zIndex: 1,\n  top: '50px',\n  right: '10px',\n  width: '15%' // height:'5%'\n\n});\nconst SelectContainer2 = styled('div', {\n  position: 'absolute',\n  // display: 'flex',\n  // justifyContent: 'center',\n  // alignItems: 'center',\n  zIndex: 1,\n  top: '50px',\n  left: '10px',\n  width: '15%' // height:'5%'\n\n});\nconst engine = new Styletron(); // Set your mapbox token here\n\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\nconst DATA_URL = 'https://raw.githubusercontent.com/uber-web/kepler.gl-data/master/earthquakes/data.csv'; //加载区域数据\n\nvar depData = [];\nvar depCenter = [];\nlet desCenter = [];\nlet desData = [];\nlet depPolygon = [];\nlet desPolygon = [];\nlet colorTable = [[128, 255, 0, 255], [255, 255, 40, 255], [255, 128, 0, 255], [255, 64, 64, 255], [255, 0, 0, 255]];\nconst ICON_MAPPING = {\n  marker: {\n    x: 0,\n    y: 0,\n    width: 32,\n    height: 32,\n    mask: true\n  }\n}; // Source data CSV\n// const DATA_URL = {\n//     BUILDINGS:\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/buildings.json', // eslint-disable-line\n//     TRIPS:\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/trips-v7.json' // eslint-disable-line\n// };\n\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\nconst pointLight = new PointLight({\n  color: [255, 255, 255],\n  intensity: 2.0,\n  position: [120.167057, 30.185901, 8000]\n});\nconst lightingEffect = new LightingEffect({\n  ambientLight,\n  pointLight\n});\nconst material = {\n  ambient: 0.1,\n  diffuse: 0.9,\n  shininess: 64,\n  specularColor: [60, 64, 70]\n};\nconst DEFAULT_THEME = {\n  buildingColor: [74, 80, 87],\n  trailColor0: [253, 128, 93],\n  trailColor1: [23, 184, 190],\n  material,\n  effects: [lightingEffect]\n};\nconst INITIAL_VIEW_STATE = {\n  longitude: 120.207057,\n  latitude: 30.225901,\n  // longitude:-74.00823,\n  // latitude: 40.71351,\n  zoom: 12.4,\n  pitch: 45,\n  bearing: 0\n}; //柱状图的颜色\n\nconst colorRange = [[1, 152, 189], [73, 227, 206], [216, 254, 181], [254, 237, 177], [254, 173, 84], [209, 55, 78]]; // d3.json(\"https://api.openaq.org/v1/latest?limit=10000\").then(data=>{\n//     console.log(data)\n// })\n\nvar Routes = [];\n\nfunction Rad(d) {\n  return d * Math.PI / 180.0; //经纬度转换成三角函数中度分表形式。\n}\n\n_c = Rad;\n\nvar getDistance = function (lng1, lat1, lng2, lat2) {\n  var radLat1 = Rad(lat1);\n  var radLat2 = Rad(lat2);\n  var a = radLat1 - radLat2;\n  var b = Rad(lng1) - Rad(lng2);\n  var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)));\n  s = s * 6378.137; // EARTH_RADIUS;\n\n  s = Math.round(s * 10000) / 10000; //输出为公里\n  //s=s.toFixed(4);\n\n  return s;\n}; // var od=[];\n// var getRoutedata=function(start,end) {\n//\n//     var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[start][0] + ',' + depCenter[start][1] + ';' + desCenter[end][0] + ',' + desCenter[end][1] + '?steps=true&geometries=geojson&access_token=' + 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\n//\n//     // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n//     var req = new XMLHttpRequest();\n//     req.open('GET', url, true);\n//     req.send()\n//     req.onload = function () {\n//         var json = JSON.parse(req.response);\n//         // console.log('route:',json)\n//         var data = json.routes[0];\n//         var route = data.geometry.coordinates;\n//         var timestamps=[0];//先设置每条路径1000stamp\n//         for(var i=0;i<route.length;i++){\n//             if(i!==0){\n//                 var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n//                 timestamps.push(dist+timestamps[i-1])\n//             }\n//         }\n//         var geojson = {\n//             'path': route,\n//             'timestamps':timestamps,\n//         };\n//         console.log(geojson)\n//         Routes.push(geojson)\n//\n//     }\n// }\n//getRoutedata([120.167057,30.185901], [120.302548\t,30.399632])\n\n\nvar saveJson = {}; // var getRoute=new function(time) {\n//     // var gets = [];\n//     d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\n//\n//         let re=/([-+]?[0-9]*\\.?[0-9]+)/g;\n//         console.log('data1:',data)\n//         data.forEach(d=>{\n//             let tmp=d.value.match(re)\n//             let tmpData=[];\n//             for(let i=0;i<tmp.length-1;i+=2){\n//                 tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\n//             }\n//             depData.push(tmpData)\n//         })\n//         depData.forEach(d=>{\n//             let sumlong=0\n//             let sumlat=0;\n//             d.forEach(data=>{\n//                 sumlong+=data[0];\n//                 sumlat+=data[1];\n//             })\n//             depCenter.push([sumlong/d.length,sumlat/d.length])\n//         })\n//         d3.csv(\"./edge_des_csv.csv\").then(function (data) {\n//             let re=/([-+]?[0-9]*\\.?[0-9]+)/g\n//             console.log('data2:',data)\n//             data.forEach(d=>{\n//                 let tmp=d.value.match(re)\n//                 let tmpData=[];\n//                 for(let i=0;i<tmp.length-1;i+=2){\n//                     tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\n//                 }\n//                 desData.push(tmpData)\n//             })\n//             desData.forEach(d=>{\n//                 let sumlong=0;\n//                 let sumlat=0;\n//                 d.forEach(data=>{\n//                     sumlong+=data[0];\n//                     sumlat+=data[1];\n//                 })\n//                 desCenter.push([sumlong/d.length,sumlat/d.length])\n//             });\n//             // d3.json('http://localhost:5000/data/12:00:00').then(function(data){\n//             //     data.forEach(d=>{\n//             //         var tmp=d.split(',');\n//             //         if(tmp[0]!=-1 && tmp[1]!=-1) {\n//             //             if(tmp[0]>46&&tmp[0]<=60){\n//             //              //   if (tmp[2] !== '0') {\n//             //                 var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n//             //                 gets.push($.ajax({\n//             //                     type: 'GET',\n//             //                     url: urlNow,\n//             //                     success: function (r) {\n//             //                         console.log('r:', r)\n//             //                         //var json = JSON.parse(data);\n//             //                         var plan = r.routes[0];\n//             //                         var route = plan.geometry.coordinates;\n//             //                         var timestamps = [0];//先设置每条路径1000stamp\n//             //                         for (var i = 0; i < route.length; i++) {\n//             //                             if (i !== 0) {\n//             //                                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n//             //                                 timestamps.push(dist + timestamps[i - 1])\n//             //                             }\n//             //                         }\n//             //                         var geojson = {\n//             //                             'vendor': 1,\n//             //                             'path': route,\n//             //                             'timestamps': timestamps,\n//             //\n//             //                         };\n//             //                         console.log(geojson)\n//             //                         Routes.push(geojson)\n//             //                         saveJson[tmp[0]+','+tmp[1]] = geojson\n//             //                     },\n//             //                     error:function(){\n//             //                         console.log('err')\n//             //                     }\n//             //                 }));\n//             //\n//             //            // }\n//             //             }\n//             //         }\n//             //     })\n//             //     // url.forEach(function(value) {\n//             //     //     console.log('url:',value)\n//             //     //     gets.push($.ajax({\n//             //     //         type: 'GET',\n//             //     //         url: value,\n//             //     //         success: function(data) {\n//             //     //             console.log('data:',data)\n//             //     //             //var json = JSON.parse(data);\n//             //     //             var plan = data.routes[0];\n//             //     //             var route = plan.geometry.coordinates;\n//             //     //             var timestamps=[0];//先设置每条路径1000stamp\n//             //     //             for(var i=0;i<route.length;i++){\n//             //     //                 if(i!==0){\n//             //     //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n//             //     //                     timestamps.push(dist+timestamps[i-1])\n//             //     //                 }\n//             //     //             }\n//             //     //             var geojson = {\n//             //     //                 'vendor':1,\n//             //     //                 'path': route,\n//             //     //                 'timestamps':timestamps,\n//             //     //\n//             //     //             };\n//             //     //             console.log(geojson)\n//             //     //             Routes.push(geojson)\n//             //     //\n//             //     //\n//             //     //         }\n//             //     //     }));\n//             //     // });\n//             //\n//             //     $.when.apply($, gets).then(function() {\n//             //         console.log(saveJson)\n//             //         var jsonData=JSON.stringify(saveJson)\n//             //         download(jsonData,'route.json','text/plain')\n//             //         console.log('Routes:',Routes)\n//             //         resolve(Routes);\n//             //         // resolve([\n//             //         //     {\n//             //         //         \"vendor\": 1,\n//             //         //         \"path\": [\n//             //         //             [120.167057,30.185901],\n//             //         //             [120.165752,30.185723],\n//             //         //             [120.16581,30.188491],\n//             //         //             [120.190417,30.198224],\n//             //         //             [120.191971\t,30.204],\n//             //         //             [120.189622\t,30.20767],\n//             //         //             [120.182369\t,30.218973],\n//             //         //             [120.180889\t,30.222601],\n//             //         //             [120.200108\t,30.306856],\n//             //         //             [120.23477\t,30.311914],\n//             //         //             [120.246959\t,30.316748],\n//             //         //             [120.309708\t,30.387518],\n//             //         //             [120.312426\t,30.39154],\n//             //         //             [120.309069\t,30.400897],\n//             //         //             [120.302548\t,30.399632],],\n//             //         //\n//             //         //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n//             //         //     }])\n//             //     });\n//             // })\n//\n//             d3.json('http://localhost:5000/data/'+time+':00:00').then(function(data){\n//                 var count=0;\n//                 d3.json('./10.json').then(function (map) {\n//                    // console.log('map:',map)\n//                     data.forEach(d=>{\n//                         var tmp=d.split(',');\n//                         if(tmp[0]!=-1 && tmp[1]!=-1) {\n//                             if(parseInt(tmp[2])>=5){\n//                                 count++;\n//                                 var key=tmp[0]+','+tmp[1];\n//                                 console.log(map[key]);\n//                                 Routes.push(map[key]);\n//                             }\n//                             // if(tmp[0]>40&&tmp[0]<=60&&tmp[1]>40&&tmp[1]<=60){\n//                                 //   if (tmp[2] !== '0') {\n//                                 // var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n//                                 // gets.push($.ajax({\n//                                 //     type: 'GET',\n//                                 //     url: urlNow,\n//                                 //     success: function (r) {\n//                                 //         console.log('r:', r)\n//                                 //         //var json = JSON.parse(data);\n//                                 //         var plan = r.routes[0];\n//                                 //         var route = plan.geometry.coordinates;\n//                                 //         var timestamps = [0];//先设置每条路径1000stamp\n//                                 //         for (var i = 0; i < route.length; i++) {\n//                                 //             if (i !== 0) {\n//                                 //                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n//                                 //                 timestamps.push(dist + timestamps[i - 1])\n//                                 //             }\n//                                 //         }\n//                                 //         var geojson = {\n//                                 //             'vendor': 1,\n//                                 //             'path': route,\n//                                 //             'timestamps': timestamps,\n//                                 //\n//                                 //         };\n//                                 //         console.log(geojson)\n//                                 //         Routes.push(geojson)\n//                                 //         saveJson[tmp[0]+','+tmp[1]] = geojson\n//                                 //     },\n//                                 //     error:function(){\n//                                 //         console.log('err')\n//                                 //     }\n//                                 // }));\n//\n//                                 // }\n//                            // }\n//                         }\n//                     })\n//                     console.log('count:',count)\n//                    // console.log(Routes)\n//                 })\n//                 // url.forEach(function(value) {\n//                 //     console.log('url:',value)\n//                 //     gets.push($.ajax({\n//                 //         type: 'GET',\n//                 //         url: value,\n//                 //         success: function(data) {\n//                 //             console.log('data:',data)\n//                 //             //var json = JSON.parse(data);\n//                 //             var plan = data.routes[0];\n//                 //             var route = plan.geometry.coordinates;\n//                 //             var timestamps=[0];//先设置每条路径1000stamp\n//                 //             for(var i=0;i<route.length;i++){\n//                 //                 if(i!==0){\n//                 //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n//                 //                     timestamps.push(dist+timestamps[i-1])\n//                 //                 }\n//                 //             }\n//                 //             var geojson = {\n//                 //                 'vendor':1,\n//                 //                 'path': route,\n//                 //                 'timestamps':timestamps,\n//                 //\n//                 //             };\n//                 //             console.log(geojson)\n//                 //             Routes.push(geojson)\n//                 //\n//                 //\n//                 //         }\n//                 //     }));\n//                 // });\n//\n//                 // $.when.apply($, gets).then(function() {\n//                 //     console.log(saveJson)\n//                 //     var jsonData=JSON.stringify(saveJson)\n//                 //     download(jsonData,'route.json','text/plain')\n//                 //     console.log('Routes:',Routes)\n//                 //     resolve(Routes);\n//                 //\n//                 // });\n//             })\n//         });\n//     });\n//\n// };\n//每条路径按流量加线的数量\n\nlet getStep = function (step, trip) {\n  let newTrip = [];\n  trip.forEach(d => {\n    d += 3600 / step;\n    newTrip.push(d);\n  });\n  return newTrip;\n};\n\nfunction getArea() {\n  d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\n    let re = /([-+]?[0-9]*\\.?[0-9]+)/g;\n    console.log('data1:', data);\n    data.forEach((d, index) => {\n      let tmp = d.value.match(re);\n      let tmpData = [];\n\n      for (let i = 0; i < tmp.length - 1; i += 2) {\n        tmpData.push([parseFloat(tmp[i + 1]), parseFloat(tmp[i])]);\n      }\n\n      depData.push(tmpData);\n      depPolygon.push({\n        contour: tmpData,\n        in: 0,\n        out: 0,\n        number: index\n      });\n    });\n    depData.forEach(d => {\n      let sumlong = 0;\n      let sumlat = 0;\n      d.forEach(data => {\n        sumlong += data[0];\n        sumlat += data[1];\n      });\n      depCenter.push([sumlong / d.length, sumlat / d.length]);\n    });\n    d3.csv(\"./edge_des_csv.csv\").then(function (data) {\n      let re = /([-+]?[0-9]*\\.?[0-9]+)/g;\n      console.log('data2:', data);\n      data.forEach((d, index) => {\n        let tmp = d.value.match(re);\n        let tmpData = [];\n\n        for (let i = 0; i < tmp.length - 1; i += 2) {\n          tmpData.push([parseFloat(tmp[i + 1]), parseFloat(tmp[i])]);\n        }\n\n        desData.push(tmpData);\n        desPolygon.push({\n          contour: tmpData,\n          in: 0,\n          out: 0,\n          number: index\n        });\n      });\n      desData.forEach(d => {\n        let sumlong = 0;\n        let sumlat = 0;\n        d.forEach(data => {\n          sumlong += data[0];\n          sumlat += data[1];\n        });\n        desCenter.push([sumlong / d.length, sumlat / d.length]);\n      });\n    });\n  });\n} //获取流量数据\n\n\nfunction getRoute(time) {\n  return new Promise(resolve => {\n    // var gets = [];\n    // d3.json('http://localhost:5000/data/'+time).then(function (data) {\n    d3.json('10.72.100.6:8888/data/' + time).then(function (data) {\n      var count = 0;\n      d3.json('./10.json').then(function (map) {\n        // console.log('map:',map)\n        var routeData = [];\n        var sumMax = 0;\n        data.forEach(d => {\n          var tmp = d.split(',');\n\n          if (tmp[0] != -1 && tmp[1] != -1) {\n            if (parseInt(tmp[2]) >= 2) {\n              depPolygon[parseInt(tmp[0])].out += parseInt(tmp[2]);\n              desPolygon[parseInt(tmp[1])].in += parseInt(tmp[2]);\n              count++;\n              var key = tmp[0] + ',' + tmp[1]; //  console.log(map[key]);\n\n              var pre = [];\n              var sum = 0;\n              var countD = [];\n              map[key].path.forEach(d => {\n                if (pre.length == 0) {\n                  pre = d;\n                } else {\n                  // console.log('pre:',pre);\n                  var m = getDistance(pre[0], pre[1], d[0], d[1]);\n                  countD.push(m);\n                  sum += m;\n                  pre = d;\n                }\n              });\n\n              if (sum >= sumMax) {\n                sumMax = sum;\n              } //control color\n\n\n              if (parseInt(tmp[2]) >= 2 && parseInt(tmp[2]) < 5) {\n                routeData.push({\n                  'od': parseInt(tmp[0]) + ',' + parseInt(tmp[1]),\n                  'traffic': parseInt(tmp[2]),\n                  \"color\": 0,\n                  \"path\": map[key].path,\n                  \"timestamps\": countD\n                }); // console.log('path',map[key].path)\n              } else if (parseInt(tmp[2]) >= 5 && parseInt(tmp[2]) < 20) {\n                routeData.push({\n                  'od': parseInt(tmp[0]) + ',' + parseInt(tmp[1]),\n                  'traffic': parseInt(tmp[2]),\n                  \"color\": 1,\n                  \"path\": map[key].path,\n                  \"timestamps\": countD\n                });\n              } else if (parseInt(tmp[2]) >= 20 && parseInt(tmp[2]) < 100) {\n                routeData.push({\n                  'od': parseInt(tmp[0]) + ',' + parseInt(tmp[1]),\n                  'traffic': parseInt(tmp[2]),\n                  \"color\": 2,\n                  \"path\": map[key].path,\n                  \"timestamps\": countD\n                });\n              } else if (parseInt(tmp[2]) >= 100 && parseInt(tmp[2]) < 150) {\n                routeData.push({\n                  'od': parseInt(tmp[0]) + ',' + parseInt(tmp[1]),\n                  'traffic': parseInt(tmp[2]),\n                  \"color\": 3,\n                  \"path\": map[key].path,\n                  \"timestamps\": countD\n                });\n              } else if (parseInt(tmp[2]) >= 150) {\n                routeData.push({\n                  'od': parseInt(tmp[0]) + ',' + parseInt(tmp[1]),\n                  'traffic': parseInt(tmp[2]),\n                  \"color\": 4,\n                  \"path\": map[key].path,\n                  \"timestamps\": countD\n                });\n              }\n            }\n          }\n        });\n        let newRoutes = []; //按照流量多加动画效果\n\n        routeData.forEach(d => {\n          var tmpTime = [time * 3600];\n          let preIndex = 0; // console.log('timestamps:',d.timestamps)\n\n          d.timestamps.forEach(t => {\n            // console.log('t:',t)\n            tmpTime.push(tmpTime[preIndex] + 3600 / sumMax * t); //加上当前已经过去的小时的时间\n\n            preIndex++;\n          });\n          d.timestamps = tmpTime;\n          let tmpStep = tmpTime;\n\n          for (let i = 0; i < d.traffic; i++) {\n            tmpStep = getStep(d.traffic, tmpStep);\n            newRoutes.push({\n              'od': d.od,\n              'traffic': d.traffic,\n              \"color\": d.color,\n              \"path\": d.path,\n              \"timestamps\": tmpStep\n            });\n          }\n        });\n        newRoutes.forEach(d => {\n          routeData.push(d);\n        }); // routeData.forEach(d=>{\n        //     Routes.push(d)\n        // })\n\n        Routes = routeData;\n        console.log('count:', count);\n        console.log('Routes:', Routes);\n        resolve('0'); // console.log(Routes)\n      });\n    });\n  });\n}\n\nlet predict_origin = new Map();\nlet predict_des = new Map(); //获取预测流量数据\n\nfunction getPredictData() {\n  return new Promise(resolve => {\n    d3.csv('./Traffic_Predict_Data/prediction1-origin.csv').then(d => {\n      d.map((x, index) => {\n        // console.log('time',x.DepTime);\n        let date = new Date(x.DepTime); // console.log('hour',date.getHours())\n\n        let hour = date.getHours();\n\n        if (!predict_origin.has(hour)) {\n          predict_origin.set(hour, {});\n        }\n\n        let tmp = predict_origin.get(hour);\n        tmp[x.Origin] = x.Trips;\n      });\n      d3.csv('./Traffic_Predict_Data/prediction2-dep.csv').then(d => {\n        d.map((x, index) => {\n          let date = new Date(x.DepTime); // console.log('hour',date.getHours())\n\n          let hour = date.getHours();\n\n          if (!predict_des.has(hour)) {\n            predict_des.set(hour, {});\n          }\n\n          let tmp = predict_des.get(hour);\n          tmp[x.Destination] = x.Trips;\n        });\n        resolve();\n      });\n    });\n  });\n}\n\nlet realOrg = new Map();\nlet realDes = new Map(); //获取真实流量数据\n\nfunction getRealData() {\n  d3.csv('./Traffic_Predict_Data/origin.csv').then(d => {\n    d.map((x, index) => {\n      // console.log('time',x.DepTime);\n      let date = new Date(x.DepTime); // console.log('hour',date.getHours())\n\n      let hour = date.getHours();\n\n      if (!realOrg.has(hour)) {\n        realOrg.set(hour, {});\n      }\n\n      let tmp = realOrg.get(hour);\n      tmp[x.Origin] = x.Trips;\n    });\n    d3.csv('./Traffic_Predict_Data/destination.csv').then(d => {\n      d.map((x, index) => {\n        let date = new Date(x.DepTime); // console.log('hour',date.getHours())\n\n        let hour = date.getHours();\n\n        if (!realDes.has(hour)) {\n          realDes.set(hour, {});\n        }\n\n        let tmp = realDes.get(hour);\n        tmp[x.Destination] = x.Trips;\n      });\n    });\n  });\n}\n\nlet blockRoute = [];\nlet count = [];\nlet blockData = new Map();\n\nfunction getBlockData() {\n  d3.csv('./blockdetect/anomalyFile.csv').then(d => {\n    d.map(x => {\n      console.log(x);\n      console.log(x['occurencingTime']);\n      let da = new Date(x['occurencingTime']);\n      console.log('da', da);\n      let h = da.getHours();\n      let m = da.getMinutes();\n      let s = da.getSeconds();\n      let t = h * 3600 + m * 60 + s;\n      blockData.set(t, [parseFloat(x['longitude']), parseFloat(x['latitude'])]);\n    });\n    console.log(blockData);\n  });\n}\n\nfunction getBlockRoute() {\n  return new Promise(resolve => {\n    d3.csv('./blockdetect/GPS_588_merge.csv').then(d => {\n      console.log(d);\n      let path = [];\n      let timestamps = [];\n      let m = 0;\n      d.map((x, index) => {\n        // console.log('x',x);\n        // console.log('lat',x.lat)\n        let da = new Date(x['date']);\n        let h = da.getHours();\n        let m = da.getMinutes();\n        let s = da.getSeconds();\n        let t = h * 3600 + m * 60 + s;\n\n        if (count.indexOf(t) === -1 && m % 5 === 0) {\n          m++;\n          count.push(t);\n          timestamps.push(t);\n          path.push([parseFloat(x['Long']), parseFloat(x['Lat'])]);\n\n          if (m % 1 === 0) {\n            blockData.set(t, [parseFloat(x['Long']), parseFloat(x['Lat'])]);\n          }\n        }\n      });\n      blockRoute.push({\n        path: path,\n        timestamps: timestamps,\n        color: 0\n      });\n      resolve();\n    });\n  });\n} //设置预测流量数据\n\n\nfunction setPredictData(hour) {\n  console.log('org', predict_origin);\n  let data = [];\n  let tmp = predict_origin.get(parseInt(hour));\n  console.log('tmp', tmp);\n\n  for (let key in tmp) {\n    // console.log('key',key)\n    data.push({\n      centroid: depCenter[parseInt(key)],\n      value: tmp[key]\n    });\n  } // console.log('data',data)\n\n\n  return data;\n} //设置实际流量数据\n\n\nfunction setRealData(hour) {\n  // console.log('org',predict_origin)\n  let data = [];\n  let tmp = realOrg.get(parseInt(hour));\n  console.log('tmp', tmp);\n\n  for (let key in tmp) {\n    // console.log('key',key)\n    data.push({\n      centroid: depCenter[parseInt(key)],\n      value: tmp[key]\n    });\n  }\n\n  console.log('data', data);\n  return data;\n} // getRoute.then(function () {\n//     console.log('get')\n// });\n\n\nlet tmpIcon = [];\nexport default class RouteMap extends Component {\n  constructor(props) {\n    super(props); // const [value, setValue] = React.useState([0]);\n\n    this.state = {\n      time: 18000,\n      hour: -1,\n      depV: false,\n      desV: false,\n      area: [],\n      options: [],\n      block: false,\n      pre_org: [],\n      pre_des: [],\n      real_org: [],\n      real: false,\n      showPredict: true,\n      blockIcon: [],\n      showRoute: true\n    };\n  }\n\n  componentDidMount() {\n    getArea();\n    let p = getPredictData();\n    p.then(function () {// this.setState({\n      //     pre_origin: predict_origin,\n      //     pre_des : predict_des\n      // })\n    }.bind(this));\n    getRealData();\n    let p2 = getBlockRoute();\n    p2.then(function () {\n      console.log('blockRoute', blockRoute);\n      this.setState({\n        blockRoute: blockRoute\n      });\n    }.bind(this));\n    let button = document.getElementById('start');\n    console.log(button);\n    setTimeout(() => {\n      button.click();\n    }, 1200); // getBlockData();\n    // this.setState({\n    //     depPolygon:depPolygon,\n    //     desPolygon:desPolygon\n    // })\n  }\n\n  componentWillUnmount() {// if (this._animationFrame) {\n    //     window.cancelAnimationFrame(this._animationFrame);\n    // }\n  } //get route from mapbox\n  // getRoute(){\n  //     d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\n  //\n  //         let re=/([-+]?[0-9]*\\.?[0-9]+)/g;\n  //         console.log('data1:',data)\n  //         data.forEach(d=>{\n  //             let tmp=d.value.match(re)\n  //             let tmpData=[];\n  //             for(let i=0;i<tmp.length-1;i+=2){\n  //                 tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\n  //             }\n  //             depData.push(tmpData)\n  //         })\n  //         depData.forEach(d=>{\n  //             let sumlong=0\n  //             let sumlat=0;\n  //             d.forEach(data=>{\n  //                 sumlong+=data[0];\n  //                 sumlat+=data[1];\n  //             })\n  //             depCenter.push([sumlong/d.length,sumlat/d.length])\n  //         })\n  //         d3.csv(\"./edge_des_csv.csv\").then(function (data) {\n  //             let re=/([-+]?[0-9]*\\.?[0-9]+)/g\n  //             console.log('data2:',data)\n  //             data.forEach(d=>{\n  //                 let tmp=d.value.match(re)\n  //                 let tmpData=[];\n  //                 for(let i=0;i<tmp.length-1;i+=2){\n  //                     tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\n  //                 }\n  //                 desData.push(tmpData)\n  //             })\n  //             desData.forEach(d=>{\n  //                 let sumlong=0;\n  //                 let sumlat=0;\n  //                 d.forEach(data=>{\n  //                     sumlong+=data[0];\n  //                     sumlat+=data[1];\n  //                 })\n  //                 desCenter.push([sumlong/d.length,sumlat/d.length])\n  //             });\n  //             // d3.json('http://localhost:5000/data/12:00:00').then(function(data){\n  //             //     data.forEach(d=>{\n  //             //         var tmp=d.split(',');\n  //             //         if(tmp[0]!=-1 && tmp[1]!=-1) {\n  //             //             if(tmp[0]>46&&tmp[0]<=60){\n  //             //              //   if (tmp[2] !== '0') {\n  //             //                 var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n  //             //                 gets.push($.ajax({\n  //             //                     type: 'GET',\n  //             //                     url: urlNow,\n  //             //                     success: function (r) {\n  //             //                         console.log('r:', r)\n  //             //                         //var json = JSON.parse(data);\n  //             //                         var plan = r.routes[0];\n  //             //                         var route = plan.geometry.coordinates;\n  //             //                         var timestamps = [0];//先设置每条路径1000stamp\n  //             //                         for (var i = 0; i < route.length; i++) {\n  //             //                             if (i !== 0) {\n  //             //                                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n  //             //                                 timestamps.push(dist + timestamps[i - 1])\n  //             //                             }\n  //             //                         }\n  //             //                         var geojson = {\n  //             //                             'vendor': 1,\n  //             //                             'path': route,\n  //             //                             'timestamps': timestamps,\n  //             //\n  //             //                         };\n  //             //                         console.log(geojson)\n  //             //                         Routes.push(geojson)\n  //             //                         saveJson[tmp[0]+','+tmp[1]] = geojson\n  //             //                     },\n  //             //                     error:function(){\n  //             //                         console.log('err')\n  //             //                     }\n  //             //                 }));\n  //             //\n  //             //            // }\n  //             //             }\n  //             //         }\n  //             //     })\n  //             //     // url.forEach(function(value) {\n  //             //     //     console.log('url:',value)\n  //             //     //     gets.push($.ajax({\n  //             //     //         type: 'GET',\n  //             //     //         url: value,\n  //             //     //         success: function(data) {\n  //             //     //             console.log('data:',data)\n  //             //     //             //var json = JSON.parse(data);\n  //             //     //             var plan = data.routes[0];\n  //             //     //             var route = plan.geometry.coordinates;\n  //             //     //             var timestamps=[0];//先设置每条路径1000stamp\n  //             //     //             for(var i=0;i<route.length;i++){\n  //             //     //                 if(i!==0){\n  //             //     //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n  //             //     //                     timestamps.push(dist+timestamps[i-1])\n  //             //     //                 }\n  //             //     //             }\n  //             //     //             var geojson = {\n  //             //     //                 'vendor':1,\n  //             //     //                 'path': route,\n  //             //     //                 'timestamps':timestamps,\n  //             //     //\n  //             //     //             };\n  //             //     //             console.log(geojson)\n  //             //     //             Routes.push(geojson)\n  //             //     //\n  //             //     //\n  //             //     //         }\n  //             //     //     }));\n  //             //     // });\n  //             //\n  //             //     $.when.apply($, gets).then(function() {\n  //             //         console.log(saveJson)\n  //             //         var jsonData=JSON.stringify(saveJson)\n  //             //         download(jsonData,'route.json','text/plain')\n  //             //         console.log('Routes:',Routes)\n  //             //         resolve(Routes);\n  //             //         // resolve([\n  //             //         //     {\n  //             //         //         \"vendor\": 1,\n  //             //         //         \"path\": [\n  //             //         //             [120.167057,30.185901],\n  //             //         //             [120.165752,30.185723],\n  //             //         //             [120.16581,30.188491],\n  //             //         //             [120.190417,30.198224],\n  //             //         //             [120.191971\t,30.204],\n  //             //         //             [120.189622\t,30.20767],\n  //             //         //             [120.182369\t,30.218973],\n  //             //         //             [120.180889\t,30.222601],\n  //             //         //             [120.200108\t,30.306856],\n  //             //         //             [120.23477\t,30.311914],\n  //             //         //             [120.246959\t,30.316748],\n  //             //         //             [120.309708\t,30.387518],\n  //             //         //             [120.312426\t,30.39154],\n  //             //         //             [120.309069\t,30.400897],\n  //             //         //             [120.302548\t,30.399632],],\n  //             //         //\n  //             //         //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n  //             //         //     }])\n  //             //     });\n  //             // })\n  //\n  //             d3.json('http://localhost:5000/data/0:00:00').then(function(data){\n  //                 var count=0;\n  //                 d3.json('./10.json').then(function (map) {\n  //                     // console.log('map:',map)\n  //                     data.forEach(d=>{\n  //                         var tmp=d.split(',');\n  //                         if(tmp[0]!=-1 && tmp[1]!=-1) {\n  //                             if(parseInt(tmp[2])>=5){\n  //                                 count++;\n  //                                 var key=tmp[0]+','+tmp[1];\n  //                                 console.log(map[key]);\n  //                                 Routes.push(map[key]);\n  //                             }\n  //                             // if(tmp[0]>40&&tmp[0]<=60&&tmp[1]>40&&tmp[1]<=60){\n  //                             //   if (tmp[2] !== '0') {\n  //                             // var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n  //                             // gets.push($.ajax({\n  //                             //     type: 'GET',\n  //                             //     url: urlNow,\n  //                             //     success: function (r) {\n  //                             //         console.log('r:', r)\n  //                             //         //var json = JSON.parse(data);\n  //                             //         var plan = r.routes[0];\n  //                             //         var route = plan.geometry.coordinates;\n  //                             //         var timestamps = [0];//先设置每条路径1000stamp\n  //                             //         for (var i = 0; i < route.length; i++) {\n  //                             //             if (i !== 0) {\n  //                             //                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n  //                             //                 timestamps.push(dist + timestamps[i - 1])\n  //                             //             }\n  //                             //         }\n  //                             //         var geojson = {\n  //                             //             'vendor': 1,\n  //                             //             'path': route,\n  //                             //             'timestamps': timestamps,\n  //                             //\n  //                             //         };\n  //                             //         console.log(geojson)\n  //                             //         Routes.push(geojson)\n  //                             //         saveJson[tmp[0]+','+tmp[1]] = geojson\n  //                             //     },\n  //                             //     error:function(){\n  //                             //         console.log('err')\n  //                             //     }\n  //                             // }));\n  //\n  //                             // }\n  //                             // }\n  //                         }\n  //                     })\n  //                     console.log('count:',count)\n  //                     this.layers[1].setData(Routes)\n  //                     // resolve(Routes);\n  //                     // console.log(Routes)\n  //                 })\n  //\n  //                 // url.forEach(function(value) {\n  //                 //     console.log('url:',value)\n  //                 //     gets.push($.ajax({\n  //                 //         type: 'GET',\n  //                 //         url: value,\n  //                 //         success: function(data) {\n  //                 //             console.log('data:',data)\n  //                 //             //var json = JSON.parse(data);\n  //                 //             var plan = data.routes[0];\n  //                 //             var route = plan.geometry.coordinates;\n  //                 //             var timestamps=[0];//先设置每条路径1000stamp\n  //                 //             for(var i=0;i<route.length;i++){\n  //                 //                 if(i!==0){\n  //                 //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n  //                 //                     timestamps.push(dist+timestamps[i-1])\n  //                 //                 }\n  //                 //             }\n  //                 //             var geojson = {\n  //                 //                 'vendor':1,\n  //                 //                 'path': route,\n  //                 //                 'timestamps':timestamps,\n  //                 //\n  //                 //             };\n  //                 //             console.log(geojson)\n  //                 //             Routes.push(geojson)\n  //                 //\n  //                 //\n  //                 //         }\n  //                 //     }));\n  //                 // });\n  //\n  //                 // $.when.apply($, gets).then(function() {\n  //                 //     console.log(saveJson)\n  //                 //     var jsonData=JSON.stringify(saveJson)\n  //                 //     download(jsonData,'route.json','text/plain')\n  //                 //     console.log('Routes:',Routes)\n  //                 //     resolve(Routes);\n  //                 //     // resolve([\n  //                 //     //     {\n  //                 //     //         \"vendor\": 1,\n  //                 //     //         \"path\": [\n  //                 //     //             [120.167057,30.185901],\n  //                 //     //             [120.165752,30.185723],\n  //                 //     //             [120.16581,30.188491],\n  //                 //     //             [120.190417,30.198224],\n  //                 //     //             [120.191971\t,30.204],\n  //                 //     //             [120.189622\t,30.20767],\n  //                 //     //             [120.182369\t,30.218973],\n  //                 //     //             [120.180889\t,30.222601],\n  //                 //     //             [120.200108\t,30.306856],\n  //                 //     //             [120.23477\t,30.311914],\n  //                 //     //             [120.246959\t,30.316748],\n  //                 //     //             [120.309708\t,30.387518],\n  //                 //     //             [120.312426\t,30.39154],\n  //                 //     //             [120.309069\t,30.400897],\n  //                 //     //             [120.302548\t,30.399632],],\n  //                 //     //\n  //                 //     //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n  //                 //     //     }])\n  //                 // });\n  //             })\n  //         });\n  //     });\n  // }\n  //routeTip\n  //     _renderTooltip() {\n  //         const {hoveredObject, pointerX, pointerY} = this.state || {};\n  //         return hoveredObject && (\n  //             <div className=\"tooltip\" style={{color:'#ffffff',position: 'absolute', zIndex: 1, pointerEvents: 'none', left: pointerX, top: pointerY}}>\n  //                 <div>\n  //                     <b>O-D: </b>\n  //                     <span>{hoveredObject.od}</span>\n  //                 </div>\n  //                 <div>\n  //                     <b>Traffic: </b>\n  //                     <span>{hoveredObject.traffic}</span>\n  //                 </div>\n  //\n  //             </div>\n  //\n  //         );\n  //     }\n  //areaTipDep\n\n\n  _renderTooltipDep() {\n    const {\n      depObject,\n      depX,\n      depY\n    } = this.state || {};\n    return depObject && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tooltip\",\n      style: {\n        color: '#00ffff',\n        position: 'absolute',\n        zIndex: 1,\n        pointerEvents: 'none',\n        left: depX,\n        top: depY\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"\\u533A\\u57DF id: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1220,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: depObject.number\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1221,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1219,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"\\u9A76\\u51FA\\u6D41\\u91CF: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1225,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: depObject.out\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1226,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1224,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1218,\n      columnNumber: 13\n    }, this);\n  } //areaTipDes\n\n\n  _renderTooltipDes() {\n    const {\n      desObject,\n      desX,\n      desY\n    } = this.state || {};\n    return desObject && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tooltip\",\n      style: {\n        color: '#00ffff',\n        position: 'absolute',\n        zIndex: 1,\n        pointerEvents: 'none',\n        left: desX,\n        top: desY\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"\\u533A\\u57DF: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1239,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: desObject.number\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1240,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1238,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"\\u9A76\\u5165\\u6D41\\u91CF: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1244,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: desObject.in\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1245,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1243,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1237,\n      columnNumber: 13\n    }, this);\n  }\n\n  _getPredictData() {\n    if (this.state.showPredict) {\n      return this.state.real ? this.state.real_org : this.state.pre_org;\n    } else return [{\n      centroid: [0, 0],\n      value: [0, 0]\n    }];\n  }\n\n  _renderLayers() {\n    const {\n      // buildings = DATA_URL.BUILDINGS,\n      trailLength = 120,\n      theme = DEFAULT_THEME // TripsLayer=new TripsLayer({\n      //     id: 'trips',\n      //     //data: trips,\n      //     // data:[\n      //     //     {\n      //     //         \"vendor\": 1,\n      //     //         \"path\": [\n      //     //             [120.167057,30.185901],\n      //     //             [120.165752,30.185723],\n      //     //             [120.16581,30.188491],\n      //     //             [120.190417,30.198224],\n      //     //             [120.191971\t,30.204],\n      //     //             [120.189622\t,30.20767],\n      //     //             [120.182369\t,30.218973],\n      //     //             [120.180889\t,30.222601],\n      //     //             [120.200108\t,30.306856],\n      //     //             [120.23477\t,30.311914],\n      //     //             [120.246959\t,30.316748],\n      //     //             [120.309708\t,30.387518],\n      //     //             [120.312426\t,30.39154],\n      //     //             [120.309069\t,30.400897],\n      //     //             [120.302548\t,30.399632],],\n      //     //\n      //     //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n      //     //     }],\n      //     data:Routes,\n      //     getPath: d => d.path,\n      //     getTimestamps: d => d.timestamps,\n      //     getColor: d => (d.vendor === 0 ? theme.trailColor0 : theme.trailColor1),\n      //     opacity: 0.3,\n      //     widthMinPixels: 2,\n      //     rounded: true,\n      //     trailLength,\n      //     currentTime: this.state.time,\n      //\n      //     shadowEnabled: false\n      // }),\n\n    } = this.props;\n    return [new ScatterplotLayer({\n      id: 'scatterplot-layer',\n      data: this.state.blockIcon,\n      pickable: true,\n      opacity: 0.8,\n      stroked: true,\n      filled: true,\n      radiusScale: 6,\n      radiusMinPixels: 1,\n      radiusMaxPixels: 100,\n      lineWidthMinPixels: 1,\n      getPosition: d => d.coordinates,\n      getRadius: d => 20,\n      getFillColor: d => [255, 140, 0],\n      getLineColor: d => [0, 0, 0],\n      visible: this.state.block\n    }), // new IconLayer({\n    //     id:'blockIcon',\n    //     data:this.state.blockIcon,\n    //     iconAtlas:'./warning.png',\n    //     iconMapping:ICON_MAPPING,\n    //     getIcon: d => 'marker',\n    //     sizeScale: 15,\n    //     getPosition: d => d.coordinates,\n    //     getColor:[255,255,0],\n    //     getSize: d => 5,\n    //\n    // }),\n    new TripsLayer({\n      id: 'blockRoute',\n      data: this.state.blockRoute,\n      getPath: d => d.path,\n      getTimestamps: d => d.timestamps,\n      // getColor: d => colorTable[d.color],\n      getColor: [0, 140, 255, 255],\n      opacity: 0.3,\n      widthMinPixels: 5,\n      rounded: true,\n      trailLength: 1200,\n      currentTime: this.state.time,\n      shadowEnabled: false,\n      pickable: true,\n      visible: this.state.block\n    }), new TripsLayer({\n      id: 'trips',\n      //data: trips,\n      // data:[\n      //     {\n      //         \"vendor\": 1,\n      //         \"path\": [\n      //             [120.167057,30.185901],\n      //             [120.165752,30.185723],\n      //             [120.16581,30.188491],\n      //             [120.190417,30.198224],\n      //             [120.191971\t,30.204],\n      //             [120.189622\t,30.20767],\n      //             [120.182369\t,30.218973],\n      //             [120.180889\t,30.222601],\n      //             [120.200108\t,30.306856],\n      //             [120.23477\t,30.311914],\n      //             [120.246959\t,30.316748],\n      //             [120.309708\t,30.387518],\n      //             [120.312426\t,30.39154],\n      //             [120.309069\t,30.400897],\n      //             [120.302548\t,30.399632],],\n      //\n      //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n      //     }],\n      // data:getRoute,\n      data: this.state.Route,\n      // updateTriggers:{\n      //   data:Routes\n      // },\n      getPath: d => d.path,\n      getTimestamps: d => d.timestamps,\n      getColor: d => colorTable[d.color],\n      // getColor:[0,255,255,255],\n      opacity: 0.3,\n      widthMinPixels: 10,\n      rounded: true,\n      trailLength,\n      currentTime: this.state.time,\n      shadowEnabled: false,\n      pickable: true,\n      visible: this.state.showRoute // onHover: info=>this.setState({\n      //     hoveredObject: info.object,\n      //     pointerX: info.x,\n      //     pointerY: info.y\n      // })\n      // onHover:info=>{\n      //     console.log(info)\n      // }\n\n    }), new PolygonLayer({\n      id: 'dep_polygon',\n      data: this.state.depPolygon,\n      pickable: true,\n      stroked: true,\n      filled: true,\n      wireframe: true,\n      lineWidthMinPixels: 1,\n      getPolygon: d => d.contour,\n      // getElevation: d => d.population / d.area / 10,\n      getFillColor: d => [255, 255, 0, 50],\n      getLineColor: [80, 80, 80],\n      getLineWidth: 1,\n      onHover: info => this.setState({\n        depObject: info.object,\n        depX: info.x,\n        depY: info.y\n      }),\n      visible: this.state.depV // onHover: info=>{\n      //     console.log(info)\n      // }\n\n    }), new PolygonLayer({\n      id: 'des_polygon',\n      data: this.state.desPolygon,\n      pickable: true,\n      stroked: true,\n      filled: true,\n      wireframe: true,\n      lineWidthMinPixels: 1,\n      getPolygon: d => d.contour,\n      // getElevation: d => d.population / d.area / 10,\n      getFillColor: d => [255, 0, 0, 50],\n      getLineColor: [80, 80, 80],\n      getLineWidth: 1,\n      onHover: info => this.setState({\n        desObject: info.object,\n        desX: info.x,\n        desY: info.y\n      }),\n      visible: this.state.desV\n    }), new ColumnLayer({\n      id: 'predict-origin-layer',\n      data: this._getPredictData(),\n      diskResolution: 12,\n      radius: 100,\n      extruded: true,\n      pickable: true,\n      elevationScale: 5000,\n      getPosition: d => d.centroid,\n      getFillColor: d => {\n        let k = (Math.log(d.value) / Math.log(4)).toFixed(0);\n\n        if (k <= 5) {\n          return colorRange[k];\n        } else {\n          return colorRange[5];\n        }\n      },\n      getLineColor: [0, 0, 0],\n      getElevation: d => parseInt(d.value) / 100,\n      transitions: {\n        getElevation: {\n          duration: 3000,\n          // type: 'spring',\n          // stiffness: 0.01,\n          // damping: 0.15,\n          // easing: d3.easeCubicInOut,\n          enter: d => {\n            // console.log(d);\n            let tmp = [];\n\n            for (let i = 0; i < 300; i++) {\n              tmp.push(d[0] * i / 300);\n            } // console.log(tmp)\n\n\n            return tmp;\n          }\n        }\n      },\n      updateTriggers: {\n        getElevation: [this.state.pre_org, this.state.real_org]\n      }\n    }) // new PolygonLayer({\n    //     id: 'buildings',\n    //     data: buildings,\n    //     extruded: true,\n    //     wireframe: false,\n    //     opacity: 0.5,\n    //     getPolygon: f => f.polygon,\n    //     getElevation: f => f.height,\n    //     getFillColor: theme.buildingColor,\n    //     material: theme.material\n    // })\n    ];\n  }\n\n  _formatLabel(t) {\n    return `${Math.floor(t / 3600)}:${Math.floor(t % 3600 / 60)}:${Math.floor(t % 3600 % 60)}`;\n  }\n\n  render() {\n    const {\n      viewState,\n      mapStyle = 'mapbox://styles/mapbox/dark-v9',\n      theme = DEFAULT_THEME\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DeckGL, {\n        layers: this._renderLayers(),\n        effects: theme.effects,\n        initialViewState: INITIAL_VIEW_STATE,\n        viewState: viewState,\n        controller: true,\n        children: /*#__PURE__*/_jsxDEV(StaticMap, {\n          reuseMaps: true,\n          mapStyle: mapStyle,\n          preventStyleDiffing: true,\n          mapboxApiAccessToken: MAPBOX_TOKEN\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1527,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1520,\n        columnNumber: 17\n      }, this), this._renderTooltipDep(), this._renderTooltipDes(), /*#__PURE__*/_jsxDEV(StyletronProvider, {\n        value: engine,\n        children: /*#__PURE__*/_jsxDEV(BaseProvider, {\n          theme: LightTheme,\n          children: /*#__PURE__*/_jsxDEV(SliderTraffic, {\n            min: 0,\n            max: 86400,\n            value: [0, this.state.time],\n            formatLabel: this._formatLabel,\n            onChange: ({\n              value\n            }) => {\n              let nowTime = value[1];\n\n              if (blockData.has(nowTime)) {\n                console.log('icon');\n                tmpIcon.push({\n                  coordinates: blockData.get(nowTime)\n                });\n                let tmp = [];\n                tmpIcon.forEach(d => {\n                  tmp.push(d);\n                }); // if(tmpIcon.length>10){\n\n                console.log('set');\n                this.setState({\n                  blockIcon: tmp\n                }); // }\n\n                console.log(this.state.blockIcon);\n              } // console.log('nowTime:',nowTime);\n\n\n              if (Math.floor(nowTime / 3600) !== this.state.hour) {\n                this.setState({\n                  hour: Math.floor(nowTime / 3600)\n                });\n                console.log('nowztime:', nowTime);\n                var hour = (nowTime / 3600).toFixed(0);\n                console.log('hour:', hour);\n                this.setState({\n                  pre_org: setPredictData(hour),\n                  real_org: setRealData(hour)\n                }); // console.log('pre_org',this.state.pre_org);\n\n                var p = getRoute(hour);\n                p.then(function () {\n                  console.log('Route', Routes);\n                  this.setState({\n                    Route: Routes,\n                    depPolygon: depPolygon,\n                    desPolygon: desPolygon\n                  });\n                }.bind(this));\n              }\n\n              this.setState({\n                time: nowTime\n              }); // console.log('time',this.state.time)\n              //console.log(this.state)\n              //console.log('value:',value)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1540,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1539,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1538,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1519,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n/* {(<SliderInput\n                     value={[0,this.state.time]}\n                    min={0}\n                    max={24 * 60}\n                    formatLabel={this._formatLabel}\n                    onChange={({value}) => {\n                        if (value % 3600 === 0) {\n                            var p = getRoute(value / 3600);\n                            p.then(function () {\n                                this.setState({\n                                    Routes: Routes\n                                })\n                            }.bind(this))\n                        }\n                        this.setState({time: value});\n                        console.log(value)\n                    }}\n                />)\n                }*/\n// export function renderToDOM(container) {\n//     render(<App />, container);\n// }\n//ReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<CustomTicks />,document.getElementById('app'))\n// require('d3-request').csv(DATA_URL, (error, response) => {\n//         if (!error) {\n//             const data = response.map(row => ({\n//                 timestamp: new Date(`${row.DateTime} UTC`).getTime(),\n//                 latitude: Number(row.Latitude),\n//                 longitude: Number(row.Longitude),\n//                 depth: Number(row.Depth),\n//                 magnitude: Number(row.Magnitude)\n//             }));\n//             ReactDOM.render(<App2 data={data} />, document.getElementById('root'));\n//         }\n//     });\n\nvar _c;\n\n$RefreshReg$(_c, \"Rad\");","map":{"version":3,"sources":["/home/zhiguangda/ITS/deckgl/src/components/routeMap.js"],"names":["React","Fragment","DeckGL","TripsLayer","StaticMap","d3","Component","AmbientLight","PointLight","LightingEffect","ColumnLayer","PolygonLayer","IconLayer","ScatterplotLayer","SliderTraffic","Select","SIZE","BaseProvider","LightTheme","styled","Client","Styletron","Provider","StyletronProvider","SelectContainer","position","zIndex","top","right","width","SelectContainer2","left","engine","MAPBOX_TOKEN","DATA_URL","depData","depCenter","desCenter","desData","depPolygon","desPolygon","colorTable","ICON_MAPPING","marker","x","y","height","mask","ambientLight","color","intensity","pointLight","lightingEffect","material","ambient","diffuse","shininess","specularColor","DEFAULT_THEME","buildingColor","trailColor0","trailColor1","effects","INITIAL_VIEW_STATE","longitude","latitude","zoom","pitch","bearing","colorRange","Routes","Rad","d","Math","PI","getDistance","lng1","lat1","lng2","lat2","radLat1","radLat2","a","b","s","asin","sqrt","pow","sin","cos","round","saveJson","getStep","step","trip","newTrip","forEach","push","getArea","csv","then","data","re","console","log","index","tmp","value","match","tmpData","i","length","parseFloat","contour","in","out","number","sumlong","sumlat","getRoute","time","Promise","resolve","json","count","map","routeData","sumMax","split","parseInt","key","pre","sum","countD","path","m","newRoutes","tmpTime","preIndex","timestamps","t","tmpStep","traffic","od","predict_origin","Map","predict_des","getPredictData","date","Date","DepTime","hour","getHours","has","set","get","Origin","Trips","Destination","realOrg","realDes","getRealData","blockRoute","blockData","getBlockData","da","h","getMinutes","getSeconds","getBlockRoute","indexOf","setPredictData","centroid","setRealData","tmpIcon","RouteMap","constructor","props","state","depV","desV","area","options","block","pre_org","pre_des","real_org","real","showPredict","blockIcon","showRoute","componentDidMount","p","bind","p2","setState","button","document","getElementById","setTimeout","click","componentWillUnmount","_renderTooltipDep","depObject","depX","depY","pointerEvents","_renderTooltipDes","desObject","desX","desY","_getPredictData","_renderLayers","trailLength","theme","id","pickable","opacity","stroked","filled","radiusScale","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","getPosition","coordinates","getRadius","getFillColor","getLineColor","visible","getPath","getTimestamps","getColor","widthMinPixels","rounded","currentTime","shadowEnabled","Route","wireframe","getPolygon","getLineWidth","onHover","info","object","diskResolution","radius","extruded","elevationScale","k","toFixed","getElevation","transitions","duration","enter","updateTriggers","_formatLabel","floor","render","viewState","mapStyle","nowTime"],"mappings":"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","sourcesContent":["// /// app.js\nimport React,{Fragment} from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {TripsLayer} from '@deck.gl/geo-layers';\nimport {StaticMap} from 'react-map-gl';\nimport * as d3 from 'd3'\n//\n// // Set your mapbox access token here\n// const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\n//\n// // Initial viewport settings\n// const initialViewState = {\n//     longitude: -122.41669,\n//     latitude: 37.7853,\n//     zoom: 13,\n//     pitch: 0,\n//     bearing: 0\n// };\n//\n// // Data to be used by the LineLayer\n// const data = [   {\n//              waypoints: [{coordinates: [-122.3907988, 37.7664413], timestamp: 1554772579000},\n//                      {coordinates: [-122.3908298,37.7667706], timestamp: 1554772579010},\n//                      {coordinates: [-122.4485672, 37.8040182], timestamp: 1554772580200}\n//              ]\n//      }];\n//\n// class App extends React.Component {\n//     render() {\n//         const layers = [\n//             new TripsLayer({id: 'trips-layer', data,\n//                 getPath:d => d.waypoints.map(p => p.coordinates),\n//                 getTimestamps: d => d.waypoints.map(p => p.timestamp - 1554772579000),\n//                 getColor: [253, 128, 93],\n//                 opacity: 0.8,\n//                 widthMinPixels: 5,\n//                 rounded: true,\n//                 trailLength: 200,\n//                 currentTime: 0\n//\n//             })\n//         ];\n//\n//         return (\n//             <DeckGL\n//                 initialViewState={initialViewState}\n//                 controller={true}\n//                 layers={layers}\n//             >\n//                 <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n//             </DeckGL>\n//         );\n//     }\n// }\n// ReactDOM.render(<App />, document.getElementById('root'));\nimport {Component} from 'react';\n\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\nimport {ColumnLayer, PolygonLayer,IconLayer,ScatterplotLayer} from '@deck.gl/layers';\n\nimport SliderTraffic from \"./sliderTraffic\";\nimport { Select,SIZE } from \"baseui/select\";\nimport {BaseProvider, LightTheme, styled} from \"baseui\";\nimport {Client as Styletron} from 'styletron-engine-atomic';\nimport {Provider as StyletronProvider} from 'styletron-react';\n\nconst SelectContainer=styled('div',{\n    position: 'absolute',\n    // display: 'flex',\n    // justifyContent: 'center',\n    // alignItems: 'center',\n    zIndex: 1,\n    top: '50px',\n    right:'10px',\n    width:'15%',\n    // height:'5%'\n});\nconst SelectContainer2=styled('div',{\n    position: 'absolute',\n    // display: 'flex',\n    // justifyContent: 'center',\n    // alignItems: 'center',\n    zIndex: 1,\n    top: '50px',\n    left:'10px',\n    width:'15%',\n    // height:'5%'\n});\nconst engine = new Styletron();\n\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\n\nconst DATA_URL =\n    'https://raw.githubusercontent.com/uber-web/kepler.gl-data/master/earthquakes/data.csv';\n\n//加载区域数据\nvar depData=[];\nvar depCenter=[];\n\nlet desCenter=[];\nlet desData=[];\n\nlet depPolygon=[];\nlet desPolygon=[];\n\nlet colorTable=[[128,255,0,255],[255,255,40,255],[255,128,0,255],[255,64,64,255],[255,0,0,255]];\n\n\nconst ICON_MAPPING = {\n    marker: {x: 0, y: 0, width: 32, height: 32, mask: true}\n};\n\n\n\n// Source data CSV\n// const DATA_URL = {\n//     BUILDINGS:\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/buildings.json', // eslint-disable-line\n//     TRIPS:\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/trips-v7.json' // eslint-disable-line\n// };\n\nconst ambientLight = new AmbientLight({\n    color: [255, 255, 255],\n    intensity: 1.0\n});\n\nconst pointLight = new PointLight({\n    color: [255, 255, 255],\n    intensity: 2.0,\n    position: [120.167057, 30.185901, 8000]\n});\n\nconst lightingEffect = new LightingEffect({ambientLight, pointLight});\n\nconst material = {\n    ambient: 0.1,\n    diffuse: 0.9,\n    shininess: 64,\n    specularColor: [60, 64, 70]\n};\n\nconst DEFAULT_THEME = {\n    buildingColor: [74, 80, 87],\n    trailColor0: [253, 128, 93],\n    trailColor1: [23, 184, 190],\n    material,\n    effects: [lightingEffect]\n};\n\nconst INITIAL_VIEW_STATE = {\n    longitude:  120.207057,\n    latitude: 30.225901,\n    // longitude:-74.00823,\n    // latitude: 40.71351,\n    zoom: 12.4,\n    pitch: 45,\n    bearing: 0\n};\n\n//柱状图的颜色\nconst colorRange = [\n    [1, 152, 189],\n    [73, 227, 206],\n    [216, 254, 181],\n    [254, 237, 177],\n    [254, 173, 84],\n    [209, 55, 78]\n];\n\n\n\n\n// d3.json(\"https://api.openaq.org/v1/latest?limit=10000\").then(data=>{\n//     console.log(data)\n// })\n\n\nvar Routes=[];\nfunction Rad(d){\n    return d * Math.PI / 180.0;//经纬度转换成三角函数中度分表形式。\n}\nvar getDistance=function(lng1,lat1,lng2,lat2){\n    var radLat1 = Rad(lat1);\n    var radLat2 = Rad(lat2);\n    var a = radLat1 - radLat2;\n    var  b = Rad(lng1) - Rad(lng2);\n    var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a/2),2) +\n        Math.cos(radLat1)*Math.cos(radLat2)*Math.pow(Math.sin(b/2),2)));\n    s = s *6378.137 ;// EARTH_RADIUS;\n    s = Math.round(s * 10000) / 10000; //输出为公里\n    //s=s.toFixed(4);\n    return s;\n}\n\n// var od=[];\n// var getRoutedata=function(start,end) {\n//\n//     var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[start][0] + ',' + depCenter[start][1] + ';' + desCenter[end][0] + ',' + desCenter[end][1] + '?steps=true&geometries=geojson&access_token=' + 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\n//\n//     // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n//     var req = new XMLHttpRequest();\n//     req.open('GET', url, true);\n//     req.send()\n//     req.onload = function () {\n//         var json = JSON.parse(req.response);\n//         // console.log('route:',json)\n//         var data = json.routes[0];\n//         var route = data.geometry.coordinates;\n//         var timestamps=[0];//先设置每条路径1000stamp\n//         for(var i=0;i<route.length;i++){\n//             if(i!==0){\n//                 var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n//                 timestamps.push(dist+timestamps[i-1])\n//             }\n//         }\n//         var geojson = {\n//             'path': route,\n//             'timestamps':timestamps,\n//         };\n//         console.log(geojson)\n//         Routes.push(geojson)\n//\n//     }\n// }\n//getRoutedata([120.167057,30.185901], [120.302548\t,30.399632])\n\nvar saveJson={}\n\n// var getRoute=new function(time) {\n//     // var gets = [];\n//     d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\n//\n//         let re=/([-+]?[0-9]*\\.?[0-9]+)/g;\n//         console.log('data1:',data)\n//         data.forEach(d=>{\n//             let tmp=d.value.match(re)\n//             let tmpData=[];\n//             for(let i=0;i<tmp.length-1;i+=2){\n//                 tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\n//             }\n//             depData.push(tmpData)\n//         })\n//         depData.forEach(d=>{\n//             let sumlong=0\n//             let sumlat=0;\n//             d.forEach(data=>{\n//                 sumlong+=data[0];\n//                 sumlat+=data[1];\n//             })\n//             depCenter.push([sumlong/d.length,sumlat/d.length])\n//         })\n//         d3.csv(\"./edge_des_csv.csv\").then(function (data) {\n//             let re=/([-+]?[0-9]*\\.?[0-9]+)/g\n//             console.log('data2:',data)\n//             data.forEach(d=>{\n//                 let tmp=d.value.match(re)\n//                 let tmpData=[];\n//                 for(let i=0;i<tmp.length-1;i+=2){\n//                     tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\n//                 }\n//                 desData.push(tmpData)\n//             })\n//             desData.forEach(d=>{\n//                 let sumlong=0;\n//                 let sumlat=0;\n//                 d.forEach(data=>{\n//                     sumlong+=data[0];\n//                     sumlat+=data[1];\n//                 })\n//                 desCenter.push([sumlong/d.length,sumlat/d.length])\n//             });\n//             // d3.json('http://localhost:5000/data/12:00:00').then(function(data){\n//             //     data.forEach(d=>{\n//             //         var tmp=d.split(',');\n//             //         if(tmp[0]!=-1 && tmp[1]!=-1) {\n//             //             if(tmp[0]>46&&tmp[0]<=60){\n//             //              //   if (tmp[2] !== '0') {\n//             //                 var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n//             //                 gets.push($.ajax({\n//             //                     type: 'GET',\n//             //                     url: urlNow,\n//             //                     success: function (r) {\n//             //                         console.log('r:', r)\n//             //                         //var json = JSON.parse(data);\n//             //                         var plan = r.routes[0];\n//             //                         var route = plan.geometry.coordinates;\n//             //                         var timestamps = [0];//先设置每条路径1000stamp\n//             //                         for (var i = 0; i < route.length; i++) {\n//             //                             if (i !== 0) {\n//             //                                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n//             //                                 timestamps.push(dist + timestamps[i - 1])\n//             //                             }\n//             //                         }\n//             //                         var geojson = {\n//             //                             'vendor': 1,\n//             //                             'path': route,\n//             //                             'timestamps': timestamps,\n//             //\n//             //                         };\n//             //                         console.log(geojson)\n//             //                         Routes.push(geojson)\n//             //                         saveJson[tmp[0]+','+tmp[1]] = geojson\n//             //                     },\n//             //                     error:function(){\n//             //                         console.log('err')\n//             //                     }\n//             //                 }));\n//             //\n//             //            // }\n//             //             }\n//             //         }\n//             //     })\n//             //     // url.forEach(function(value) {\n//             //     //     console.log('url:',value)\n//             //     //     gets.push($.ajax({\n//             //     //         type: 'GET',\n//             //     //         url: value,\n//             //     //         success: function(data) {\n//             //     //             console.log('data:',data)\n//             //     //             //var json = JSON.parse(data);\n//             //     //             var plan = data.routes[0];\n//             //     //             var route = plan.geometry.coordinates;\n//             //     //             var timestamps=[0];//先设置每条路径1000stamp\n//             //     //             for(var i=0;i<route.length;i++){\n//             //     //                 if(i!==0){\n//             //     //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n//             //     //                     timestamps.push(dist+timestamps[i-1])\n//             //     //                 }\n//             //     //             }\n//             //     //             var geojson = {\n//             //     //                 'vendor':1,\n//             //     //                 'path': route,\n//             //     //                 'timestamps':timestamps,\n//             //     //\n//             //     //             };\n//             //     //             console.log(geojson)\n//             //     //             Routes.push(geojson)\n//             //     //\n//             //     //\n//             //     //         }\n//             //     //     }));\n//             //     // });\n//             //\n//             //     $.when.apply($, gets).then(function() {\n//             //         console.log(saveJson)\n//             //         var jsonData=JSON.stringify(saveJson)\n//             //         download(jsonData,'route.json','text/plain')\n//             //         console.log('Routes:',Routes)\n//             //         resolve(Routes);\n//             //         // resolve([\n//             //         //     {\n//             //         //         \"vendor\": 1,\n//             //         //         \"path\": [\n//             //         //             [120.167057,30.185901],\n//             //         //             [120.165752,30.185723],\n//             //         //             [120.16581,30.188491],\n//             //         //             [120.190417,30.198224],\n//             //         //             [120.191971\t,30.204],\n//             //         //             [120.189622\t,30.20767],\n//             //         //             [120.182369\t,30.218973],\n//             //         //             [120.180889\t,30.222601],\n//             //         //             [120.200108\t,30.306856],\n//             //         //             [120.23477\t,30.311914],\n//             //         //             [120.246959\t,30.316748],\n//             //         //             [120.309708\t,30.387518],\n//             //         //             [120.312426\t,30.39154],\n//             //         //             [120.309069\t,30.400897],\n//             //         //             [120.302548\t,30.399632],],\n//             //         //\n//             //         //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n//             //         //     }])\n//             //     });\n//             // })\n//\n//             d3.json('http://localhost:5000/data/'+time+':00:00').then(function(data){\n//                 var count=0;\n//                 d3.json('./10.json').then(function (map) {\n//                    // console.log('map:',map)\n//                     data.forEach(d=>{\n//                         var tmp=d.split(',');\n//                         if(tmp[0]!=-1 && tmp[1]!=-1) {\n//                             if(parseInt(tmp[2])>=5){\n//                                 count++;\n//                                 var key=tmp[0]+','+tmp[1];\n//                                 console.log(map[key]);\n//                                 Routes.push(map[key]);\n//                             }\n//                             // if(tmp[0]>40&&tmp[0]<=60&&tmp[1]>40&&tmp[1]<=60){\n//                                 //   if (tmp[2] !== '0') {\n//                                 // var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n//                                 // gets.push($.ajax({\n//                                 //     type: 'GET',\n//                                 //     url: urlNow,\n//                                 //     success: function (r) {\n//                                 //         console.log('r:', r)\n//                                 //         //var json = JSON.parse(data);\n//                                 //         var plan = r.routes[0];\n//                                 //         var route = plan.geometry.coordinates;\n//                                 //         var timestamps = [0];//先设置每条路径1000stamp\n//                                 //         for (var i = 0; i < route.length; i++) {\n//                                 //             if (i !== 0) {\n//                                 //                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n//                                 //                 timestamps.push(dist + timestamps[i - 1])\n//                                 //             }\n//                                 //         }\n//                                 //         var geojson = {\n//                                 //             'vendor': 1,\n//                                 //             'path': route,\n//                                 //             'timestamps': timestamps,\n//                                 //\n//                                 //         };\n//                                 //         console.log(geojson)\n//                                 //         Routes.push(geojson)\n//                                 //         saveJson[tmp[0]+','+tmp[1]] = geojson\n//                                 //     },\n//                                 //     error:function(){\n//                                 //         console.log('err')\n//                                 //     }\n//                                 // }));\n//\n//                                 // }\n//                            // }\n//                         }\n//                     })\n//                     console.log('count:',count)\n//                    // console.log(Routes)\n//                 })\n//                 // url.forEach(function(value) {\n//                 //     console.log('url:',value)\n//                 //     gets.push($.ajax({\n//                 //         type: 'GET',\n//                 //         url: value,\n//                 //         success: function(data) {\n//                 //             console.log('data:',data)\n//                 //             //var json = JSON.parse(data);\n//                 //             var plan = data.routes[0];\n//                 //             var route = plan.geometry.coordinates;\n//                 //             var timestamps=[0];//先设置每条路径1000stamp\n//                 //             for(var i=0;i<route.length;i++){\n//                 //                 if(i!==0){\n//                 //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n//                 //                     timestamps.push(dist+timestamps[i-1])\n//                 //                 }\n//                 //             }\n//                 //             var geojson = {\n//                 //                 'vendor':1,\n//                 //                 'path': route,\n//                 //                 'timestamps':timestamps,\n//                 //\n//                 //             };\n//                 //             console.log(geojson)\n//                 //             Routes.push(geojson)\n//                 //\n//                 //\n//                 //         }\n//                 //     }));\n//                 // });\n//\n//                 // $.when.apply($, gets).then(function() {\n//                 //     console.log(saveJson)\n//                 //     var jsonData=JSON.stringify(saveJson)\n//                 //     download(jsonData,'route.json','text/plain')\n//                 //     console.log('Routes:',Routes)\n//                 //     resolve(Routes);\n//                 //\n//                 // });\n//             })\n//         });\n//     });\n//\n// };\n\n\n\n//每条路径按流量加线的数量\nlet getStep=function(step,trip){\n    let newTrip=[]\n    trip.forEach(d=>{\n        d+=3600/step;\n        newTrip.push(d)\n    })\n    return newTrip;\n}\n\n\nfunction getArea(){\n    d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\n        let re = /([-+]?[0-9]*\\.?[0-9]+)/g;\n        console.log('data1:', data)\n        data.forEach((d,index) => {\n            let tmp = d.value.match(re)\n            let tmpData = [];\n            for (let i = 0; i < tmp.length - 1; i += 2) {\n                tmpData.push([parseFloat(tmp[i + 1]), parseFloat(tmp[i])])\n            }\n            depData.push(tmpData)\n            depPolygon.push({\n                contour:tmpData,\n                in:0,\n                out:0,\n                number:index\n            })\n        })\n        depData.forEach(d => {\n            let sumlong = 0\n            let sumlat = 0;\n            d.forEach(data => {\n                sumlong += data[0];\n                sumlat += data[1];\n            })\n            depCenter.push([sumlong / d.length, sumlat / d.length])\n        })\n        d3.csv(\"./edge_des_csv.csv\").then(function (data) {\n            let re = /([-+]?[0-9]*\\.?[0-9]+)/g\n            console.log('data2:', data)\n            data.forEach((d,index)=> {\n                let tmp = d.value.match(re)\n                let tmpData = [];\n                for (let i = 0; i < tmp.length - 1; i += 2) {\n                    tmpData.push([parseFloat(tmp[i + 1]), parseFloat(tmp[i])])\n                }\n                desData.push(tmpData)\n\n                desPolygon.push({\n                    contour:tmpData,\n                    in:0,\n                    out:0,\n                    number:index\n                })\n\n\n            });\n            desData.forEach(d => {\n                let sumlong = 0;\n                let sumlat = 0;\n                d.forEach(data => {\n                    sumlong += data[0];\n                    sumlat += data[1];\n                })\n                desCenter.push([sumlong / d.length, sumlat / d.length])\n            });\n        })\n})\n}\n//获取流量数据\nfunction getRoute(time) {\n    return new Promise(resolve => {\n        // var gets = [];\n        // d3.json('http://localhost:5000/data/'+time).then(function (data) {\n        d3.json('10.72.100.6:8888/data/'+time).then(function (data) {\n\n            var count = 0;\n            d3.json('./10.json').then(function (map) {\n                // console.log('map:',map)\n                var routeData=[];\n                var sumMax=0;\n                data.forEach(d => {\n                    var tmp = d.split(',');\n                    if (tmp[0] != -1 && tmp[1] != -1) {\n                        if (parseInt(tmp[2]) >= 2) {\n\n                            depPolygon[parseInt(tmp[0])].out+=parseInt(tmp[2]);\n                            desPolygon[parseInt(tmp[1])].in+=parseInt(tmp[2]);\n                            count++;\n                            var key = tmp[0] + ',' + tmp[1];\n\n                            //  console.log(map[key]);\n                            var pre=[];\n                            var sum=0;\n                            var countD=[];\n                            map[key].path.forEach(d=>{\n                                if(pre.length==0){\n                                    pre=d\n                                }\n                                else{\n                                    // console.log('pre:',pre);\n                                    var m=getDistance(pre[0],pre[1],d[0],d[1]);\n                                    countD.push(m);\n                                    sum+=m;\n                                    pre=d;\n                                }\n                            });\n                            if(sum>=sumMax){\n                                sumMax=sum\n                            }\n//control color\n                            if(parseInt(tmp[2]) >= 2&& parseInt(tmp[2]) < 5){\n                                routeData.push({\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\n                                    'traffic':parseInt(tmp[2]),\n                                    \"color\":0,\n                                    \"path\":map[key].path,\n                                    \"timestamps\":countD\n                                })\n                                // console.log('path',map[key].path)\n                            }\n\n                            else if(parseInt(tmp[2]) >=5&&parseInt(tmp[2]) <20){\n                                routeData.push({\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\n                                    'traffic':parseInt(tmp[2]),\n                                    \"color\":1,\n                                    \"path\":map[key].path,\n                                    \"timestamps\":countD\n                                })\n                            }\n                            else if(parseInt(tmp[2]) >=20&&parseInt(tmp[2]) <100){\n                                routeData.push({\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\n                                    'traffic':parseInt(tmp[2]),\n                                    \"color\":2,\n                                    \"path\":map[key].path,\n                                    \"timestamps\":countD\n                                })\n                            }\n                            else if(parseInt(tmp[2]) >= 100&&parseInt(tmp[2]) <150){\n                                routeData.push({\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\n                                    'traffic':parseInt(tmp[2]),\n                                    \"color\":3,\n                                    \"path\":map[key].path,\n                                    \"timestamps\":countD\n                                })\n                            }\n                            else if(parseInt(tmp[2]) >= 150){\n                                routeData.push({\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\n                                    'traffic':parseInt(tmp[2]),\n                                    \"color\":4,\n                                    \"path\":map[key].path,\n                                    \"timestamps\":countD\n                                })\n                            }\n\n                        }\n\n                    }\n                });\n                let newRoutes=[];\n                //按照流量多加动画效果\n                routeData.forEach(d=>{\n                    var tmpTime=[time*3600];\n                    let preIndex=0;\n                    // console.log('timestamps:',d.timestamps)\n                    d.timestamps.forEach(t=>{\n                        // console.log('t:',t)\n                        tmpTime.push(tmpTime[preIndex]+(3600/sumMax)*t)//加上当前已经过去的小时的时间\n                        preIndex++;\n                    });\n                    d.timestamps=tmpTime;\n                    let tmpStep=tmpTime;\n                    for(let i=0;i<(d.traffic);i++){\n                        tmpStep=getStep((d.traffic),tmpStep);\n                        newRoutes.push({\n                            'od':d.od,\n                            'traffic':d.traffic,\n                            \"color\":d.color,\n                            \"path\":d.path,\n                            \"timestamps\":tmpStep\n                        })\n                    }\n                });\n                newRoutes.forEach(d=>{\n                    routeData.push(d)\n                })\n                // routeData.forEach(d=>{\n                //     Routes.push(d)\n                // })\n                Routes=routeData;\n                console.log('count:', count);\n                console.log('Routes:', Routes)\n                resolve('0')\n                // console.log(Routes)\n            })\n\n        })\n\n    });\n}\n\n\nlet predict_origin=new Map();\nlet predict_des=new Map();\n\n//获取预测流量数据\nfunction getPredictData(){\n    return new Promise( resolve => {\n        d3.csv('./Traffic_Predict_Data/prediction1-origin.csv').then(d=>{\n            d.map((x,index)=>{\n                // console.log('time',x.DepTime);\n                let date=new Date(x.DepTime);\n                // console.log('hour',date.getHours())\n                let hour=date.getHours();\n                if(!predict_origin.has(hour)){\n                    predict_origin.set(hour,{})\n                }\n                let tmp=predict_origin.get(hour)\n                tmp[x.Origin]=x.Trips\n            })\n            d3.csv('./Traffic_Predict_Data/prediction2-dep.csv').then(d=>{d.map((x,index)=>{\n                let date=new Date(x.DepTime);\n                // console.log('hour',date.getHours())\n                let hour=date.getHours();\n                    if(!predict_des.has(hour)){\n                        predict_des.set(hour,{})\n                    }\n                    let tmp=predict_des.get(hour)\n                        tmp[x.Destination]=x.Trips;\n                    });\n                resolve();\n                }\n            )\n            }\n        )\n    })\n}\n\nlet realOrg=new Map()\nlet realDes=new Map()\n//获取真实流量数据\nfunction getRealData(){\n    d3.csv('./Traffic_Predict_Data/origin.csv').then(d=>{\n            d.map((x,index)=>{\n                // console.log('time',x.DepTime);\n                let date=new Date(x.DepTime);\n                // console.log('hour',date.getHours())\n                let hour=date.getHours();\n                if(!realOrg.has(hour)){\n                    realOrg.set(hour,{})\n                }\n                let tmp=realOrg.get(hour)\n                tmp[x.Origin]=x.Trips\n            })\n            d3.csv('./Traffic_Predict_Data/destination.csv').then(d=>{d.map((x,index)=>{\n                    let date=new Date(x.DepTime);\n                    // console.log('hour',date.getHours())\n                    let hour=date.getHours();\n                    if(!realDes.has(hour)){\n                        realDes.set(hour,{})\n                    }\n                    let tmp=realDes.get(hour)\n                    tmp[x.Destination]=x.Trips;\n                });\n                }\n            )\n        }\n    )\n}\n\nlet blockRoute=[]\nlet count=[]\nlet blockData=new Map();\nfunction getBlockData(){\n    d3.csv('./blockdetect/anomalyFile.csv').then(d=>{\n        d.map(x=>{\n            console.log(x)\n            console.log(x['occurencingTime'])\n            let da=new Date(x['occurencingTime']);\n            console.log('da',da)\n            let h=da.getHours();\n            let m=da.getMinutes();\n            let s=da.getSeconds();\n            let t=h*3600+m*60+s;\n            blockData.set(t,[parseFloat(x['longitude']),parseFloat(x['latitude'])])\n        })\n        console.log(blockData)\n    })\n}\nfunction getBlockRoute(){\n    return new Promise(resolve => {\n        d3.csv('./blockdetect/GPS_588_merge.csv').then(d=>{\n            console.log(d)\n            let path=[];\n            let timestamps=[]\n            let m=0;\n            d.map((x,index)=>{\n                // console.log('x',x);\n                // console.log('lat',x.lat)\n                let da=new Date(x['date']);\n                let h=da.getHours();\n                let m=da.getMinutes();\n                let s=da.getSeconds();\n                let t=h*3600+m*60+s;\n                if(count.indexOf(t)===-1&&m%5===0){\n                    m++;\n                    count.push(t)\n                    timestamps.push(t)\n                    path.push([parseFloat(x['Long']),parseFloat(x['Lat'])])\n                    if(m%1===0){\n                        blockData.set(t,[parseFloat(x['Long']),parseFloat(x['Lat'])])\n\n                    }\n                }\n\n            })\n            blockRoute.push({\n                path:path,\n                timestamps:timestamps,\n                color:0\n            })\n\n\n            resolve();\n        })\n\n    })\n\n\n\n\n\n\n}\n\n//设置预测流量数据\nfunction setPredictData(hour){\n    console.log('org',predict_origin);\n    let data=[];\n    let tmp=predict_origin.get(parseInt(hour));\n    console.log('tmp',tmp)\n    for(let key in tmp){\n        // console.log('key',key)\n        data.push({\n            centroid: depCenter[parseInt(key)],\n            value:tmp[key]\n        })\n    }\n    // console.log('data',data)\n    return data;\n}\n//设置实际流量数据\nfunction setRealData(hour){\n    // console.log('org',predict_origin)\n    let data=[];\n    let tmp=realOrg.get(parseInt(hour));\n    console.log('tmp',tmp)\n    for(let key in tmp){\n        // console.log('key',key)\n        data.push({\n            centroid: depCenter[parseInt(key)],\n            value:tmp[key]\n        })\n    }\n    console.log('data',data)\n    return data;\n\n}\n\n\n\n// getRoute.then(function () {\n//     console.log('get')\n// });\n\nlet tmpIcon=[];\n\nexport default class RouteMap extends Component {\n\n    constructor(props) {\n        super(props);\n         // const [value, setValue] = React.useState([0]);\n        this.state = {\n            time: 18000,\n            hour:-1,\n            depV:false,\n            desV:false,\n            area:[],\n            options:[],\n            block:false,\n            pre_org:[],\n            pre_des:[],\n            real_org:[],\n            real:false,\n            showPredict:true,\n            blockIcon:[],\n            showRoute:true\n\n\n        };\n    }\n    componentDidMount() {\n        getArea();\n        let p= getPredictData();\n        p.then(function() {\n            // this.setState({\n            //     pre_origin: predict_origin,\n            //     pre_des : predict_des\n            // })\n        }.bind(this))\n\n        getRealData();\n\n        let p2=getBlockRoute();\n        p2.then(function () {\n            console.log('blockRoute',blockRoute)\n\n            this.setState({\n                blockRoute:blockRoute\n            })\n        }.bind(this) )\n\n\n        let button=document.getElementById('start')\n        console.log(button)\n\n        setTimeout(()=>{button.click()},1200)\n\n        // getBlockData();\n\n\n        // this.setState({\n        //     depPolygon:depPolygon,\n        //     desPolygon:desPolygon\n        // })\n    }\n\n    componentWillUnmount() {\n        // if (this._animationFrame) {\n        //     window.cancelAnimationFrame(this._animationFrame);\n        // }\n    }\n\n//get route from mapbox\n    // getRoute(){\n    //     d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\n    //\n    //         let re=/([-+]?[0-9]*\\.?[0-9]+)/g;\n    //         console.log('data1:',data)\n    //         data.forEach(d=>{\n    //             let tmp=d.value.match(re)\n    //             let tmpData=[];\n    //             for(let i=0;i<tmp.length-1;i+=2){\n    //                 tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\n    //             }\n    //             depData.push(tmpData)\n    //         })\n    //         depData.forEach(d=>{\n    //             let sumlong=0\n    //             let sumlat=0;\n    //             d.forEach(data=>{\n    //                 sumlong+=data[0];\n    //                 sumlat+=data[1];\n    //             })\n    //             depCenter.push([sumlong/d.length,sumlat/d.length])\n    //         })\n    //         d3.csv(\"./edge_des_csv.csv\").then(function (data) {\n    //             let re=/([-+]?[0-9]*\\.?[0-9]+)/g\n    //             console.log('data2:',data)\n    //             data.forEach(d=>{\n    //                 let tmp=d.value.match(re)\n    //                 let tmpData=[];\n    //                 for(let i=0;i<tmp.length-1;i+=2){\n    //                     tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\n    //                 }\n    //                 desData.push(tmpData)\n    //             })\n    //             desData.forEach(d=>{\n    //                 let sumlong=0;\n    //                 let sumlat=0;\n    //                 d.forEach(data=>{\n    //                     sumlong+=data[0];\n    //                     sumlat+=data[1];\n    //                 })\n    //                 desCenter.push([sumlong/d.length,sumlat/d.length])\n    //             });\n    //             // d3.json('http://localhost:5000/data/12:00:00').then(function(data){\n    //             //     data.forEach(d=>{\n    //             //         var tmp=d.split(',');\n    //             //         if(tmp[0]!=-1 && tmp[1]!=-1) {\n    //             //             if(tmp[0]>46&&tmp[0]<=60){\n    //             //              //   if (tmp[2] !== '0') {\n    //             //                 var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n    //             //                 gets.push($.ajax({\n    //             //                     type: 'GET',\n    //             //                     url: urlNow,\n    //             //                     success: function (r) {\n    //             //                         console.log('r:', r)\n    //             //                         //var json = JSON.parse(data);\n    //             //                         var plan = r.routes[0];\n    //             //                         var route = plan.geometry.coordinates;\n    //             //                         var timestamps = [0];//先设置每条路径1000stamp\n    //             //                         for (var i = 0; i < route.length; i++) {\n    //             //                             if (i !== 0) {\n    //             //                                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n    //             //                                 timestamps.push(dist + timestamps[i - 1])\n    //             //                             }\n    //             //                         }\n    //             //                         var geojson = {\n    //             //                             'vendor': 1,\n    //             //                             'path': route,\n    //             //                             'timestamps': timestamps,\n    //             //\n    //             //                         };\n    //             //                         console.log(geojson)\n    //             //                         Routes.push(geojson)\n    //             //                         saveJson[tmp[0]+','+tmp[1]] = geojson\n    //             //                     },\n    //             //                     error:function(){\n    //             //                         console.log('err')\n    //             //                     }\n    //             //                 }));\n    //             //\n    //             //            // }\n    //             //             }\n    //             //         }\n    //             //     })\n    //             //     // url.forEach(function(value) {\n    //             //     //     console.log('url:',value)\n    //             //     //     gets.push($.ajax({\n    //             //     //         type: 'GET',\n    //             //     //         url: value,\n    //             //     //         success: function(data) {\n    //             //     //             console.log('data:',data)\n    //             //     //             //var json = JSON.parse(data);\n    //             //     //             var plan = data.routes[0];\n    //             //     //             var route = plan.geometry.coordinates;\n    //             //     //             var timestamps=[0];//先设置每条路径1000stamp\n    //             //     //             for(var i=0;i<route.length;i++){\n    //             //     //                 if(i!==0){\n    //             //     //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n    //             //     //                     timestamps.push(dist+timestamps[i-1])\n    //             //     //                 }\n    //             //     //             }\n    //             //     //             var geojson = {\n    //             //     //                 'vendor':1,\n    //             //     //                 'path': route,\n    //             //     //                 'timestamps':timestamps,\n    //             //     //\n    //             //     //             };\n    //             //     //             console.log(geojson)\n    //             //     //             Routes.push(geojson)\n    //             //     //\n    //             //     //\n    //             //     //         }\n    //             //     //     }));\n    //             //     // });\n    //             //\n    //             //     $.when.apply($, gets).then(function() {\n    //             //         console.log(saveJson)\n    //             //         var jsonData=JSON.stringify(saveJson)\n    //             //         download(jsonData,'route.json','text/plain')\n    //             //         console.log('Routes:',Routes)\n    //             //         resolve(Routes);\n    //             //         // resolve([\n    //             //         //     {\n    //             //         //         \"vendor\": 1,\n    //             //         //         \"path\": [\n    //             //         //             [120.167057,30.185901],\n    //             //         //             [120.165752,30.185723],\n    //             //         //             [120.16581,30.188491],\n    //             //         //             [120.190417,30.198224],\n    //             //         //             [120.191971\t,30.204],\n    //             //         //             [120.189622\t,30.20767],\n    //             //         //             [120.182369\t,30.218973],\n    //             //         //             [120.180889\t,30.222601],\n    //             //         //             [120.200108\t,30.306856],\n    //             //         //             [120.23477\t,30.311914],\n    //             //         //             [120.246959\t,30.316748],\n    //             //         //             [120.309708\t,30.387518],\n    //             //         //             [120.312426\t,30.39154],\n    //             //         //             [120.309069\t,30.400897],\n    //             //         //             [120.302548\t,30.399632],],\n    //             //         //\n    //             //         //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n    //             //         //     }])\n    //             //     });\n    //             // })\n    //\n    //             d3.json('http://localhost:5000/data/0:00:00').then(function(data){\n    //                 var count=0;\n    //                 d3.json('./10.json').then(function (map) {\n    //                     // console.log('map:',map)\n    //                     data.forEach(d=>{\n    //                         var tmp=d.split(',');\n    //                         if(tmp[0]!=-1 && tmp[1]!=-1) {\n    //                             if(parseInt(tmp[2])>=5){\n    //                                 count++;\n    //                                 var key=tmp[0]+','+tmp[1];\n    //                                 console.log(map[key]);\n    //                                 Routes.push(map[key]);\n    //                             }\n    //                             // if(tmp[0]>40&&tmp[0]<=60&&tmp[1]>40&&tmp[1]<=60){\n    //                             //   if (tmp[2] !== '0') {\n    //                             // var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n    //                             // gets.push($.ajax({\n    //                             //     type: 'GET',\n    //                             //     url: urlNow,\n    //                             //     success: function (r) {\n    //                             //         console.log('r:', r)\n    //                             //         //var json = JSON.parse(data);\n    //                             //         var plan = r.routes[0];\n    //                             //         var route = plan.geometry.coordinates;\n    //                             //         var timestamps = [0];//先设置每条路径1000stamp\n    //                             //         for (var i = 0; i < route.length; i++) {\n    //                             //             if (i !== 0) {\n    //                             //                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n    //                             //                 timestamps.push(dist + timestamps[i - 1])\n    //                             //             }\n    //                             //         }\n    //                             //         var geojson = {\n    //                             //             'vendor': 1,\n    //                             //             'path': route,\n    //                             //             'timestamps': timestamps,\n    //                             //\n    //                             //         };\n    //                             //         console.log(geojson)\n    //                             //         Routes.push(geojson)\n    //                             //         saveJson[tmp[0]+','+tmp[1]] = geojson\n    //                             //     },\n    //                             //     error:function(){\n    //                             //         console.log('err')\n    //                             //     }\n    //                             // }));\n    //\n    //                             // }\n    //                             // }\n    //                         }\n    //                     })\n    //                     console.log('count:',count)\n    //                     this.layers[1].setData(Routes)\n    //                     // resolve(Routes);\n    //                     // console.log(Routes)\n    //                 })\n    //\n    //                 // url.forEach(function(value) {\n    //                 //     console.log('url:',value)\n    //                 //     gets.push($.ajax({\n    //                 //         type: 'GET',\n    //                 //         url: value,\n    //                 //         success: function(data) {\n    //                 //             console.log('data:',data)\n    //                 //             //var json = JSON.parse(data);\n    //                 //             var plan = data.routes[0];\n    //                 //             var route = plan.geometry.coordinates;\n    //                 //             var timestamps=[0];//先设置每条路径1000stamp\n    //                 //             for(var i=0;i<route.length;i++){\n    //                 //                 if(i!==0){\n    //                 //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n    //                 //                     timestamps.push(dist+timestamps[i-1])\n    //                 //                 }\n    //                 //             }\n    //                 //             var geojson = {\n    //                 //                 'vendor':1,\n    //                 //                 'path': route,\n    //                 //                 'timestamps':timestamps,\n    //                 //\n    //                 //             };\n    //                 //             console.log(geojson)\n    //                 //             Routes.push(geojson)\n    //                 //\n    //                 //\n    //                 //         }\n    //                 //     }));\n    //                 // });\n    //\n    //                 // $.when.apply($, gets).then(function() {\n    //                 //     console.log(saveJson)\n    //                 //     var jsonData=JSON.stringify(saveJson)\n    //                 //     download(jsonData,'route.json','text/plain')\n    //                 //     console.log('Routes:',Routes)\n    //                 //     resolve(Routes);\n    //                 //     // resolve([\n    //                 //     //     {\n    //                 //     //         \"vendor\": 1,\n    //                 //     //         \"path\": [\n    //                 //     //             [120.167057,30.185901],\n    //                 //     //             [120.165752,30.185723],\n    //                 //     //             [120.16581,30.188491],\n    //                 //     //             [120.190417,30.198224],\n    //                 //     //             [120.191971\t,30.204],\n    //                 //     //             [120.189622\t,30.20767],\n    //                 //     //             [120.182369\t,30.218973],\n    //                 //     //             [120.180889\t,30.222601],\n    //                 //     //             [120.200108\t,30.306856],\n    //                 //     //             [120.23477\t,30.311914],\n    //                 //     //             [120.246959\t,30.316748],\n    //                 //     //             [120.309708\t,30.387518],\n    //                 //     //             [120.312426\t,30.39154],\n    //                 //     //             [120.309069\t,30.400897],\n    //                 //     //             [120.302548\t,30.399632],],\n    //                 //     //\n    //                 //     //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n    //                 //     //     }])\n    //                 // });\n    //             })\n    //         });\n    //     });\n    // }\n\n\n\n//routeTip\n//     _renderTooltip() {\n//         const {hoveredObject, pointerX, pointerY} = this.state || {};\n//         return hoveredObject && (\n//             <div className=\"tooltip\" style={{color:'#ffffff',position: 'absolute', zIndex: 1, pointerEvents: 'none', left: pointerX, top: pointerY}}>\n//                 <div>\n//                     <b>O-D: </b>\n//                     <span>{hoveredObject.od}</span>\n//                 </div>\n//                 <div>\n//                     <b>Traffic: </b>\n//                     <span>{hoveredObject.traffic}</span>\n//                 </div>\n//\n//             </div>\n//\n//         );\n//     }\n\n//areaTipDep\n    _renderTooltipDep() {\n        const { depObject,  depX,  depY} = this.state || {};\n        return depObject && (\n            <div className=\"tooltip\" style={{color:'#00ffff',position: 'absolute', zIndex: 1, pointerEvents: 'none', left: depX, top: depY}}>\n                <div>\n                    <b>区域 id: </b>\n                    <span>{depObject.number}</span>\n                </div>\n\n                <div>\n                    <b>驶出流量: </b>\n                    <span>{depObject.out}</span>\n                </div>\n\n            </div>\n\n        );\n    }\n    //areaTipDes\n    _renderTooltipDes() {\n        const { desObject, desX, desY} = this.state || {};\n        return desObject && (\n            <div className=\"tooltip\" style={{color:'#00ffff',position: 'absolute', zIndex: 1, pointerEvents: 'none', left: desX, top: desY}}>\n                <div>\n                    <b>区域: </b>\n                    <span>{desObject.number}</span>\n                </div>\n\n                <div>\n                    <b>驶入流量: </b>\n                    <span>{desObject.in}</span>\n                </div>\n\n            </div>\n\n        );\n    }\n\n    _getPredictData(){\n        if(this.state.showPredict){\n            return this.state.real?this.state.real_org:this.state.pre_org\n        }\n        else return [{\n            centroid: [0,0],\n            value:[0,0]\n        }]\n    }\n\n    _renderLayers() {\n        const {\n            // buildings = DATA_URL.BUILDINGS,\n            trailLength = 120,\n            theme = DEFAULT_THEME,\n            // TripsLayer=new TripsLayer({\n            //     id: 'trips',\n            //     //data: trips,\n            //     // data:[\n            //     //     {\n            //     //         \"vendor\": 1,\n            //     //         \"path\": [\n            //     //             [120.167057,30.185901],\n            //     //             [120.165752,30.185723],\n            //     //             [120.16581,30.188491],\n            //     //             [120.190417,30.198224],\n            //     //             [120.191971\t,30.204],\n            //     //             [120.189622\t,30.20767],\n            //     //             [120.182369\t,30.218973],\n            //     //             [120.180889\t,30.222601],\n            //     //             [120.200108\t,30.306856],\n            //     //             [120.23477\t,30.311914],\n            //     //             [120.246959\t,30.316748],\n            //     //             [120.309708\t,30.387518],\n            //     //             [120.312426\t,30.39154],\n            //     //             [120.309069\t,30.400897],\n            //     //             [120.302548\t,30.399632],],\n            //     //\n            //     //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n            //     //     }],\n            //     data:Routes,\n            //     getPath: d => d.path,\n            //     getTimestamps: d => d.timestamps,\n            //     getColor: d => (d.vendor === 0 ? theme.trailColor0 : theme.trailColor1),\n            //     opacity: 0.3,\n            //     widthMinPixels: 2,\n            //     rounded: true,\n            //     trailLength,\n            //     currentTime: this.state.time,\n            //\n            //     shadowEnabled: false\n            // }),\n        } = this.props;\n\n        return [\n         new ScatterplotLayer({\n            id: 'scatterplot-layer',\n            data:this.state.blockIcon,\n            pickable: true,\n            opacity: 0.8,\n            stroked: true,\n            filled: true,\n            radiusScale: 6,\n            radiusMinPixels: 1,\n            radiusMaxPixels: 100,\n            lineWidthMinPixels: 1,\n            getPosition: d => d.coordinates,\n            getRadius: d => 20,\n            getFillColor: d => [255, 140, 0],\n            getLineColor: d => [0, 0, 0],\n            visible:this.state.block\n        }),\n\n            // new IconLayer({\n            //     id:'blockIcon',\n            //     data:this.state.blockIcon,\n            //     iconAtlas:'./warning.png',\n            //     iconMapping:ICON_MAPPING,\n            //     getIcon: d => 'marker',\n            //     sizeScale: 15,\n            //     getPosition: d => d.coordinates,\n            //     getColor:[255,255,0],\n            //     getSize: d => 5,\n            //\n            // }),\n            new TripsLayer({\n                id:'blockRoute',\n                data:this.state.blockRoute,\n                getPath:d=>d.path,\n                getTimestamps: d => d.timestamps,\n                // getColor: d => colorTable[d.color],\n                getColor:[0,140,255,255],\n                opacity: 0.3,\n                widthMinPixels: 5,\n                rounded: true,\n                trailLength:1200,\n                currentTime: this.state.time,\n                shadowEnabled: false,\n                pickable:true,\n                visible:this.state.block\n            }),\n\n            new TripsLayer({\n                id: 'trips',\n                //data: trips,\n                // data:[\n                //     {\n                //         \"vendor\": 1,\n                //         \"path\": [\n                //             [120.167057,30.185901],\n                //             [120.165752,30.185723],\n                //             [120.16581,30.188491],\n                //             [120.190417,30.198224],\n                //             [120.191971\t,30.204],\n                //             [120.189622\t,30.20767],\n                //             [120.182369\t,30.218973],\n                //             [120.180889\t,30.222601],\n                //             [120.200108\t,30.306856],\n                //             [120.23477\t,30.311914],\n                //             [120.246959\t,30.316748],\n                //             [120.309708\t,30.387518],\n                //             [120.312426\t,30.39154],\n                //             [120.309069\t,30.400897],\n                //             [120.302548\t,30.399632],],\n                //\n                //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n                //     }],\n                // data:getRoute,\n                data:this.state.Route,\n                // updateTriggers:{\n                //   data:Routes\n                // },\n                getPath: d => d.path,\n                getTimestamps: d => d.timestamps,\n                getColor: d => colorTable[d.color],\n                // getColor:[0,255,255,255],\n                opacity: 0.3,\n                widthMinPixels: 10,\n                rounded: true,\n                trailLength,\n                currentTime: this.state.time,\n                shadowEnabled: false,\n                pickable:true,\n                visible:this.state.showRoute\n                // onHover: info=>this.setState({\n                //     hoveredObject: info.object,\n                //     pointerX: info.x,\n                //     pointerY: info.y\n                // })\n                // onHover:info=>{\n                //     console.log(info)\n                // }\n            }),\n\n            new PolygonLayer({\n                id: 'dep_polygon',\n                data:this.state.depPolygon,\n                pickable: true,\n                stroked: true,\n                filled: true,\n                wireframe: true,\n                lineWidthMinPixels: 1,\n                getPolygon: d => d.contour,\n                // getElevation: d => d.population / d.area / 10,\n                getFillColor: d => [255, 255, 0,50],\n                getLineColor: [80, 80, 80],\n                getLineWidth: 1,\n                onHover: info=>this.setState({\n                    depObject: info.object,\n                    depX: info.x,\n                    depY: info.y\n                }),\n                visible:this.state.depV\n                // onHover: info=>{\n                //     console.log(info)\n                // }\n\n            }),\n\n            new PolygonLayer({\n                id:'des_polygon',\n                data:this.state.desPolygon,\n                pickable: true,\n                stroked: true,\n                filled: true,\n                wireframe: true,\n                lineWidthMinPixels: 1,\n                getPolygon: d => d.contour,\n                // getElevation: d => d.population / d.area / 10,\n                getFillColor: d => [255, 0, 0,50],\n                getLineColor: [80, 80, 80],\n                getLineWidth: 1,\n                onHover: info=>this.setState({\n                    desObject: info.object,\n                    desX: info.x,\n                    desY: info.y\n                }),\n                visible:this.state.desV\n            }),\n\n            new ColumnLayer({\n                id: 'predict-origin-layer',\n                data: this._getPredictData(),\n                diskResolution: 12,\n                radius: 100,\n                extruded: true,\n                pickable: true,\n                elevationScale: 5000,\n                getPosition: d => d.centroid,\n                getFillColor: d => {\n                    let k = (Math.log(d.value) / Math.log(4)).toFixed(0);\n                    if (k <= 5) {\n                        return colorRange[k]\n                    } else {\n                        return colorRange[5]\n                    }\n                },\n                getLineColor: [0, 0, 0],\n                getElevation: d =>parseInt(d.value)/100,\n                transitions: {\n                    getElevation: {\n                        duration: 3000,\n                        // type: 'spring',\n                        // stiffness: 0.01,\n                        // damping: 0.15,\n                        // easing: d3.easeCubicInOut,\n                        enter: d => {\n                            // console.log(d);\n                            let tmp = [];\n                            for (let i = 0; i < 300; i++) {\n                                tmp.push(d[0] * i / 300)\n                            }\n                            // console.log(tmp)\n                            return tmp;\n                        },\n                    }\n                },\n                updateTriggers: {\n                    getElevation: [this.state.pre_org,this.state.real_org],\n                }\n            }),\n            // new PolygonLayer({\n            //     id: 'buildings',\n            //     data: buildings,\n            //     extruded: true,\n            //     wireframe: false,\n            //     opacity: 0.5,\n            //     getPolygon: f => f.polygon,\n            //     getElevation: f => f.height,\n            //     getFillColor: theme.buildingColor,\n            //     material: theme.material\n            // })\n        ];\n    }\n    _formatLabel(t) {\n        return `${Math.floor(t/3600)}:${Math.floor((t%3600)/60)}:${Math.floor((t%3600)%60)}`;\n    }\n\n    render() {\n        const {\n            viewState,\n            mapStyle = 'mapbox://styles/mapbox/dark-v9',\n            theme = DEFAULT_THEME,\n        } = this.props;\n\n        return (\n            <Fragment>\n                <DeckGL\n                    layers={this._renderLayers()}\n                    effects={theme.effects}\n                    initialViewState={INITIAL_VIEW_STATE}\n                    viewState={viewState}\n                    controller={true}\n                >\n                    <StaticMap\n                        reuseMaps\n                        mapStyle={mapStyle}\n                        preventStyleDiffing={true}\n                        mapboxApiAccessToken={MAPBOX_TOKEN}\n                    />\n                </DeckGL>\n\n                { this._renderTooltipDep() }\n                {this._renderTooltipDes()}\n\n                <StyletronProvider value={engine}>\n                    <BaseProvider theme={LightTheme}>\n                        <SliderTraffic\n\n                            min={0}\n                            max={86400}\n                            value={[0,this.state.time]}\n                            formatLabel={this._formatLabel}\n                            onChange={({value}) => {\n                                let nowTime=value[1];\n\n                                if(blockData.has(nowTime)){\n                                    console.log('icon')\n                                    tmpIcon.push({\n                                        coordinates:blockData.get(nowTime)\n                                    })\n                                    let tmp=[];\n                                    tmpIcon.forEach(d=>{\n                                        tmp.push(d)\n                                    })\n                                    // if(tmpIcon.length>10){\n                                        console.log('set')\n                                        this.setState({\n                                            blockIcon:tmp\n                                        })\n                                    // }\n\n\n                                    console.log(this.state.blockIcon)\n                                }\n\n                                // console.log('nowTime:',nowTime);\n                                if(Math.floor(nowTime/3600)!==this.state.hour){\n                                    this.setState({hour:Math.floor(nowTime/3600)})\n                                    console.log('nowztime:',nowTime);\n                                    var hour=(nowTime/3600).toFixed(0);\n                                    console.log('hour:',hour);\n                                    this.setState({\n                                        pre_org:setPredictData(hour),\n                                        real_org:setRealData(hour)\n                                    });\n                                    // console.log('pre_org',this.state.pre_org);\n\n                                    var p=getRoute(hour);\n                                    p.then(function() {\n                                        console.log('Route',Routes)\n                                        this.setState({\n                                            Route:Routes,\n                                            depPolygon:depPolygon,\n                                            desPolygon:desPolygon\n                                        })\n                                    }.bind(this))\n                                }\n                                this.setState({time: nowTime})\n                                // console.log('time',this.state.time)\n                                //console.log(this.state)\n                                //console.log('value:',value)\n                            }}\n                        />\n                {/*     <SelectContainer>*/}\n                {/*        <Select id={'area'}*/}\n                {/*        options={[*/}\n                {/*            {label:\"出发区域\",id:'dep_polygon'},*/}\n                {/*            {label:\"到达区域\",id:'des_polygon'},*/}\n                {/*            { label: \"隐藏\", id: \"\" },*/}\n\n                {/*        ]}*/}\n                {/*        value={this.state.area}*/}\n                {/*        placeholder=\"显示区域\"*/}\n                {/*        // onChange={params => setValue(params.value)}*/}\n                {/*        size={SIZE.mini}*/}\n                {/*        onChange={params=> {*/}\n                {/*            // console.log('params:',params);*/}\n                {/*            if(params.option!=null){*/}\n\n\n                {/*                if(params.option.id=='dep_polygon'){*/}\n                {/*                    console.log()*/}\n                {/*                    this.setState({*/}\n                {/*                        depPolygon:depPolygon,*/}\n                {/*                        depV:true,*/}\n                {/*                        desV:false,*/}\n                {/*                        area:[{label:\"出发区域\",id:'dep_polygon'}]*/}\n                {/*                    })*/}\n                {/*                }*/}\n                {/*                else if(params.option.id=='des_polygon'){*/}\n                {/*                    console.log('desPolygon',this.state.desPolygon)*/}\n                {/*                    this.setState({*/}\n                {/*                        desPolygon:desPolygon,*/}\n                {/*                        desV:true,*/}\n                {/*                        depV:false,*/}\n                {/*                        area:[{label:\"到达区域\",id:'des_polygon'}]*/}\n                {/*                    })*/}\n                {/*                }*/}\n                {/*                else{*/}\n                {/*                    this.setState({*/}\n                {/*                        desV:false,*/}\n                {/*                        depV:false,*/}\n                {/*                        area:[{ label: \"隐藏\", id: \"\" }]*/}\n                {/*                    })*/}\n                {/*                }*/}\n                {/*            }*/}\n                {/*            else{*/}\n                {/*                this.setState({*/}\n                {/*                    area:[],*/}\n                {/*                    desV:false,*/}\n                {/*                    depV:false,*/}\n                {/*                })*/}\n                {/*            }*/}\n\n                {/*        }}*/}\n                {/*    />*/}\n\n                {/*</SelectContainer>*/}\n                {/*        <SelectContainer2>*/}\n                {/*            <Select id={'option'}*/}\n                {/*                    options={[*/}\n                {/*                        {label:\"显示轨迹\",id:'route'},*/}\n                {/*                        {label:'预测流量',id:\"predict\"},*/}\n                {/*                        {label:\"实际流量\",id:'real'},*/}\n                {/*                        {label:'路障检测',id:'block'}*/}\n                {/*                    ]}*/}\n                {/*                    value={this.state.options}*/}\n                {/*                    placeholder={'选择服务'}*/}\n                {/*                    size={SIZE.mini}*/}\n                {/*                    onChange={ params=>{*/}\n                {/*                        if (params.option!==null){*/}\n                {/*                            if(params.option.id==='predict'){*/}\n                {/*                                this.setState({*/}\n                {/*                                    real:false,*/}\n                {/*                                    options:[{label:\"预测流量\",id:\"predict\"}],*/}\n                {/*                                    showPredict:true*/}\n                {/*                                })*/}\n                {/*                            }*/}\n                {/*                            else if(params.option.id==='real'){*/}\n                {/*                                this.setState({*/}\n                {/*                                    real:true,*/}\n                {/*                                    options:[{label:\"实际流量\",id:\"real\"}],*/}\n                {/*                                    showPredict:true*/}\n                {/*                                })*/}\n                {/*                            }*/}\n                {/*                            else if(params.option.id==='block'){*/}\n                {/*                                this.setState({*/}\n                {/*                                    block:true,*/}\n                {/*                                    options:[{label:\"路障检测\",id:\"block\"}],*/}\n                {/*                                    time:45466,*/}\n                {/*                                    showPredict:false,*/}\n                {/*                                    showRoute:false*/}\n                {/*                                })*/}\n\n                {/*                            }*/}\n                {/*                            else if(params.option.id==='route'){*/}\n                {/*                                this.setState({*/}\n                {/*                                    block:false,*/}\n                {/*                                    options:[{label:\"显示轨迹\",id:\"route\"}],*/}\n                {/*                                    showRoute:true,*/}\n\n                {/*                                })*/}\n                {/*                            }*/}\n                {/*                        }*/}\n                {/*                    }}*/}\n                {/*            />*/}\n                {/*        </SelectContainer2>*/}\n                    </BaseProvider>\n                </StyletronProvider>\n\n\n            </Fragment>\n        );\n    }\n}\n\n\n\n\n/* {(<SliderInput\n                     value={[0,this.state.time]}\n                    min={0}\n                    max={24 * 60}\n                    formatLabel={this._formatLabel}\n                    onChange={({value}) => {\n                        if (value % 3600 === 0) {\n                            var p = getRoute(value / 3600);\n                            p.then(function () {\n                                this.setState({\n                                    Routes: Routes\n                                })\n                            }.bind(this))\n                        }\n                        this.setState({time: value});\n                        console.log(value)\n                    }}\n                />)\n                }*/\n\n\n// export function renderToDOM(container) {\n//     render(<App />, container);\n// }\n\n\n\n\n\n\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<CustomTicks />,document.getElementById('app'))\n\n// require('d3-request').csv(DATA_URL, (error, response) => {\n//         if (!error) {\n//             const data = response.map(row => ({\n//                 timestamp: new Date(`${row.DateTime} UTC`).getTime(),\n//                 latitude: Number(row.Latitude),\n//                 longitude: Number(row.Longitude),\n//                 depth: Number(row.Depth),\n//                 magnitude: Number(row.Magnitude)\n//             }));\n//             ReactDOM.render(<App2 data={data} />, document.getElementById('root'));\n//         }\n//     });\n"]},"metadata":{},"sourceType":"module"}