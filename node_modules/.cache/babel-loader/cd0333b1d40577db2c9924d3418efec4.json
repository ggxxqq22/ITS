{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport { LayerExtension } from '@deck.gl/core';\nimport shaderModule from './shader-module';\nvar defaultProps = {\n  getBrushingTarget: {\n    type: 'accessor',\n    value: [0, 0]\n  },\n  brushingTarget: 'source',\n  brushingEnabled: true,\n  brushingRadius: 10000\n};\n\nvar BrushingExtension = function (_LayerExtension) {\n  _inherits(BrushingExtension, _LayerExtension);\n\n  function BrushingExtension() {\n    _classCallCheck(this, BrushingExtension);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(BrushingExtension).apply(this, arguments));\n  }\n\n  _createClass(BrushingExtension, [{\n    key: \"getShaders\",\n    value: function getShaders(extension) {\n      return {\n        modules: [shaderModule]\n      };\n    }\n  }, {\n    key: \"initializeState\",\n    value: function initializeState(context, extension) {\n      var _this = this;\n\n      var attributeManager = this.getAttributeManager();\n\n      if (attributeManager) {\n        attributeManager.add({\n          brushingTargets: {\n            size: 2,\n            accessor: 'getBrushingTarget',\n            update: !this.props.getBrushingTarget && extension.useConstantTargetPositions,\n            shaderAttributes: {\n              brushingTargets: {\n                divisor: 0\n              },\n              instanceBrushingTargets: {\n                divisor: 1\n              }\n            }\n          }\n        });\n      }\n\n      extension.onMouseMove = function () {\n        _this.getCurrentLayer().setNeedsRedraw();\n      };\n\n      if (this.context.deck) {\n        this.context.deck.eventManager.on({\n          pointermove: extension.onMouseMove,\n          pointerleave: extension.onMouseMove\n        });\n      }\n    }\n  }, {\n    key: \"finalizeState\",\n    value: function finalizeState(extension) {\n      if (this.context.deck) {\n        this.context.deck.eventManager.off({\n          pointermove: extension.onMouseMove,\n          pointerleave: extension.onMouseMove\n        });\n      }\n    }\n  }, {\n    key: \"useConstantTargetPositions\",\n    value: function useConstantTargetPositions(attribute) {\n      attribute.constant = true;\n      attribute.value = new Float32Array(2);\n      return;\n    }\n  }]);\n\n  return BrushingExtension;\n}(LayerExtension);\n\nexport { BrushingExtension as default };\nBrushingExtension.extensionName = 'BrushingExtension';\nBrushingExtension.defaultProps = defaultProps;","map":{"version":3,"sources":["../../../src/brushing/brushing.js"],"names":["defaultProps","getBrushingTarget","type","value","brushingTarget","brushingEnabled","brushingRadius","BrushingExtension","LayerExtension","extension","modules","context","attributeManager","brushingTargets","size","accessor","update","shaderAttributes","divisor","instanceBrushingTargets","pointermove","pointerleave","onMouseMove","attribute"],"mappings":";;;;;AAoBA,SAAA,cAAA,QAAA,eAAA;AACA,OAAA,YAAA,MAAA,iBAAA;AAEA,IAAMA,YAAY,GAAG;AACnBC,EAAAA,iBAAiB,EAAE;AAACC,IAAAA,IAAI,EAAL,UAAA;AAAmBC,IAAAA,KAAK,EAAE,CAAA,CAAA,EAAA,CAAA;AAA1B,GADA;AAGnBC,EAAAA,cAAc,EAHK,QAAA;AAInBC,EAAAA,eAAe,EAJI,IAAA;AAKnBC,EAAAA,cAAc,EAAE;AALG,CAArB;;IAQqBC,iB;;;;;;;;;;;+BACRE,S,EAAW;AACpB,aAAO;AACLC,QAAAA,OAAO,EAAE,CAAA,YAAA;AADJ,OAAP;AAGD;;;oCAEeC,O,EAASF,S,EAAW;AAAA,UAAA,KAAA,GAAA,IAAA;;AAClC,UAAMG,gBAAgB,GAAG,KAAzB,mBAAyB,EAAzB;;AACA,UAAA,gBAAA,EAAsB;AACpBA,QAAAA,gBAAgB,CAAhBA,GAAAA,CAAqB;AACnBC,UAAAA,eAAe,EAAE;AACfC,YAAAA,IAAI,EADW,CAAA;AAEfC,YAAAA,QAAQ,EAFO,mBAAA;AAKfC,YAAAA,MAAM,EAAE,CAAC,KAAA,KAAA,CAAD,iBAAA,IAAiCP,SAAS,CALnC,0BAAA;AAMfQ,YAAAA,gBAAgB,EAAE;AAChBJ,cAAAA,eAAe,EAAE;AACfK,gBAAAA,OAAO,EAAE;AADM,eADD;AAIhBC,cAAAA,uBAAuB,EAAE;AACvBD,gBAAAA,OAAO,EAAE;AADc;AAJT;AANH;AADE,SAArBN;AAiBD;;AAIDH,MAAAA,SAAS,CAATA,WAAAA,GAAwB,YAAM;AAC5B,QAAA,KAAI,CAAJ,eAAA,GAAA,cAAA;AADFA,OAAAA;;AAGA,UAAI,KAAA,OAAA,CAAJ,IAAA,EAAuB;AACrB,aAAA,OAAA,CAAA,IAAA,CAAA,YAAA,CAAA,EAAA,CAAkC;AAChCW,UAAAA,WAAW,EAAEX,SAAS,CADU,WAAA;AAEhCY,UAAAA,YAAY,EAAEZ,SAAS,CAACa;AAFQ,SAAlC;AAID;AACF;;;kCAEab,S,EAAW;AAEvB,UAAI,KAAA,OAAA,CAAJ,IAAA,EAAuB;AACrB,aAAA,OAAA,CAAA,IAAA,CAAA,YAAA,CAAA,GAAA,CAAmC;AACjCW,UAAAA,WAAW,EAAEX,SAAS,CADW,WAAA;AAEjCY,UAAAA,YAAY,EAAEZ,SAAS,CAACa;AAFS,SAAnC;AAID;AACF;;;+CAE0BC,S,EAAW;AACpCA,MAAAA,SAAS,CAATA,QAAAA,GAAAA,IAAAA;AACAA,MAAAA,SAAS,CAATA,KAAAA,GAAkB,IAAA,YAAA,CAAlBA,CAAkB,CAAlBA;AACA;AACD;;;;EAxD4Cf,c;;SAA1BD,iB;AA2DrBA,iBAAiB,CAAjBA,aAAAA,GAAAA,mBAAAA;AACAA,iBAAiB,CAAjBA,YAAAA,GAAAA,YAAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension} from '@deck.gl/core';\nimport shaderModule from './shader-module';\n\nconst defaultProps = {\n  getBrushingTarget: {type: 'accessor', value: [0, 0]},\n\n  brushingTarget: 'source',\n  brushingEnabled: true,\n  brushingRadius: 10000\n};\n\nexport default class BrushingExtension extends LayerExtension {\n  getShaders(extension) {\n    return {\n      modules: [shaderModule]\n    };\n  }\n\n  initializeState(context, extension) {\n    const attributeManager = this.getAttributeManager();\n    if (attributeManager) {\n      attributeManager.add({\n        brushingTargets: {\n          size: 2,\n          accessor: 'getBrushingTarget',\n          // Hack: extension's defaultProps is not merged with the layer's defaultProps,\n          // So we can't use the standard accessor when the prop is undefined\n          update: !this.props.getBrushingTarget && extension.useConstantTargetPositions,\n          shaderAttributes: {\n            brushingTargets: {\n              divisor: 0\n            },\n            instanceBrushingTargets: {\n              divisor: 1\n            }\n          }\n        }\n      });\n    }\n\n    // Trigger redraw when mouse moves\n    // TODO - expose this in a better way\n    extension.onMouseMove = () => {\n      this.getCurrentLayer().setNeedsRedraw();\n    };\n    if (this.context.deck) {\n      this.context.deck.eventManager.on({\n        pointermove: extension.onMouseMove,\n        pointerleave: extension.onMouseMove\n      });\n    }\n  }\n\n  finalizeState(extension) {\n    // Remove event listeners\n    if (this.context.deck) {\n      this.context.deck.eventManager.off({\n        pointermove: extension.onMouseMove,\n        pointerleave: extension.onMouseMove\n      });\n    }\n  }\n\n  useConstantTargetPositions(attribute) {\n    attribute.constant = true;\n    attribute.value = new Float32Array(2);\n    return;\n  }\n}\n\nBrushingExtension.extensionName = 'BrushingExtension';\nBrushingExtension.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}