{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport { LayerExtension, COORDINATE_SYSTEM } from '@deck.gl/core';\nimport project64 from './project64';\n\nvar Fp64Extension = function (_LayerExtension) {\n  _inherits(Fp64Extension, _LayerExtension);\n\n  var _super = _createSuper(Fp64Extension);\n\n  function Fp64Extension() {\n    _classCallCheck(this, Fp64Extension);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Fp64Extension, [{\n    key: \"getShaders\",\n    value: function getShaders(opts) {\n      var coordinateSystem = this.props.coordinateSystem;\n\n      if (coordinateSystem !== COORDINATE_SYSTEM.LNGLAT && coordinateSystem !== COORDINATE_SYSTEM.DEFAULT) {\n        throw new Error('fp64: coordinateSystem must be LNGLAT');\n      }\n\n      return {\n        modules: [project64]\n      };\n    }\n  }]);\n\n  return Fp64Extension;\n}(LayerExtension);\n\nexport { Fp64Extension as default };\nFp64Extension.extensionName = 'Fp64Extension';","map":{"version":3,"sources":["../../../src/fp64/fp64.js"],"names":["Fp64Extension","LayerExtension","opts","coordinateSystem","COORDINATE_SYSTEM","modules"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBA,SAAA,cAAA,EAAA,iBAAA,QAAA,eAAA;AACA,OAAA,SAAA,MAAA,aAAA;;IAEqBA,a;;;;;;;;;;;;;+BACRE,I,EAAM;AAAA,UACRC,gBADQ,GACY,KADZ,KACY,CADZ,gBAAA;;AAEf,UACEA,gBAAgB,KAAKC,iBAAiB,CAAtCD,MAAAA,IACAA,gBAAgB,KAAKC,iBAAiB,CAFxC,OAAA,EAGE;AACA,cAAM,IAAA,KAAA,CAAN,uCAAM,CAAN;AACD;;AAED,aAAO;AACLC,QAAAA,OAAO,EAAE,CAAA,SAAA;AADJ,OAAP;AAGD;;;;EAbwCJ,c;;SAAtBD,a;AAgBrBA,aAAa,CAAbA,aAAAA,GAAAA,eAAAA","sourcesContent":["// Copyright (c) 2015 - 2017 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport {LayerExtension, COORDINATE_SYSTEM} from '@deck.gl/core';\nimport project64 from './project64';\n\nexport default class Fp64Extension extends LayerExtension {\n  getShaders(opts) {\n    const {coordinateSystem} = this.props;\n    if (\n      coordinateSystem !== COORDINATE_SYSTEM.LNGLAT &&\n      coordinateSystem !== COORDINATE_SYSTEM.DEFAULT\n    ) {\n      throw new Error('fp64: coordinateSystem must be LNGLAT');\n    }\n\n    return {\n      modules: [project64]\n    };\n  }\n}\n\nFp64Extension.extensionName = 'Fp64Extension';\n"]},"metadata":{},"sourceType":"module"}