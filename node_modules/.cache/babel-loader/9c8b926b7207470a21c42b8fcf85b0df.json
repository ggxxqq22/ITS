{"ast":null,"code":"var _jsxFileName = \"/home/zhiguangda/ITS/deckgl/src/components/airQuality.js\";\nimport React, { Component, Fragment } from 'react';\nimport { render } from 'react-dom';\nimport { StaticMap } from 'react-map-gl';\nimport { AmbientLight, PointLight, LightingEffect } from '@deck.gl/core'; // import {HexagonLayer} from '@deck.gl/aggregation-layers';\n\nimport DeckGL from '@deck.gl/react';\nimport { Select, SIZE } from \"baseui/select\";\nimport { ColumnLayer } from \"@deck.gl/layers\";\nimport * as d3 from 'd3';\nimport { Provider as StyletronProvider } from \"styletron-react\";\nimport { BaseProvider, LightTheme, styled } from \"baseui\";\nimport SliderTraffic from \"./sliderTraffic\";\nimport { Client as Styletron } from 'styletron-engine-atomic';\nconst SelectContainer = styled('div', {\n  position: 'absolute',\n  // display: 'flex',\n  // justifyContent: 'center',\n  // alignItems: 'center',\n  zIndex: 1,\n  top: '50px',\n  right: '10px',\n  width: '20%',\n  height: '10%'\n});\nconst engine = new Styletron(); // Set your mapbox token here\n\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w'; // eslint-disable-line\n// Source data CSV\n\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\nconst pointLight1 = new PointLight({\n  color: [255, 255, 255],\n  intensity: 1.0,\n  position: [0, 0, 80000]\n});\nconst pointLight2 = new PointLight({\n  color: [255, 255, 255],\n  intensity: 1.0,\n  position: [180, 0, 80000]\n});\nconst lightingEffect = new LightingEffect({\n  ambientLight,\n  pointLight1,\n  pointLight2\n});\nlet qualityMap = new Map();\n\nfunction download(content, fileName, contentType) {\n  var a = document.createElement(\"a\");\n  var file = new Blob([content], {\n    type: contentType\n  });\n  a.href = URL.createObjectURL(file);\n  a.download = fileName;\n  a.click();\n} // let maxpm10=0;\n\n\nfunction getData() {\n  return new Promise(resolve => {\n    d3.json(\"./air.json\").then(data => {\n      console.log(data);\n      data.results.forEach(d => {\n        // console.log('d',d);\n        if (d.coordinates) {\n          d.measurements.forEach(l => {\n            // if(l.value>maxpm10){\n            //     maxpm10=l.value;\n            // }\n            // console.log(l)\n            if (qualityMap.has(l.parameter)) {\n              qualityMap.get(l.parameter).push({\n                centroid: [d.coordinates.longitude, d.coordinates.latitude],\n                value: l.value\n              });\n            } else {\n              qualityMap.set(l.parameter, [{\n                centroid: [d.coordinates.longitude, d.coordinates.latitude],\n                value: l.value\n              }]);\n            }\n          });\n        }\n      }); // console.log('maxpm',maxpm10)\n      // qualityMap.get('pm10').forEach(d=>{\n      //     d.value=(d.value/maxpm10)*1000;\n      // })\n\n      resolve('0');\n    });\n  });\n} // let p=getData()\n// p.then(results=>{\n//     console.log('qulity',qualityMap)\n// })\n\n\nconst material = {\n  ambient: 0.64,\n  diffuse: 0.6,\n  shininess: 32,\n  specularColor: [51, 51, 51]\n};\nconst INITIAL_VIEW_STATE = {\n  longitude: 120.207057,\n  latitude: 30.225901,\n  // longitude:-74.00823,\n  // latitude: 40.71351,\n  zoom: 3,\n  pitch: 45,\n  bearing: 0\n};\nconst colorRange = [[1, 152, 189], [73, 227, 206], [216, 254, 181], [254, 237, 177], [254, 173, 84], [209, 55, 78]];\n/* eslint-disable react/no-deprecated */\n\nexport default class AirQuality extends Component {\n  static get defaultColorRange() {\n    return colorRange;\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    let p = getData();\n    p.then(results => {\n      this.setState({\n        data: []\n      });\n      console.log('qualityMap:', qualityMap);\n    }); // this._animate();\n  }\n\n  _renderLayers() {\n    return [//     new HexagonLayer({\n    //         id: 'heatmap',\n    //         colorRange,\n    //         coverage,\n    //         data,\n    //         elevationRange: [0, 3000],\n    //         elevationScale: data && data.length ? 50 : 0,\n    //         extruded: true,\n    //         getPosition: d => d,\n    //         onHover: this.props.onHover,\n    //         pickable: Boolean(this.props.onHover),\n    //         radius,\n    //         upperPercentile,\n    //         material,\n    //\n    //         transitions: {\n    //             elevationScale: 3000\n    //         }\n    //     })\n    new ColumnLayer({\n      id: 'column-layer',\n      data: this.state.data,\n      diskResolution: 12,\n      radius: 5000,\n      extruded: true,\n      pickable: true,\n      elevationScale: 5000,\n      getPosition: d => d.centroid,\n      getFillColor: d => {\n        let k = (Math.log(d.value) / Math.log(4)).toFixed(0);\n\n        if (k <= 5) {\n          return colorRange[k];\n        } else {\n          return colorRange[5];\n        }\n      },\n      getLineColor: [0, 0, 0],\n      getElevation: d => d.value,\n      transitions: {\n        getElevation: {\n          duration: 3000,\n          // type: 'spring',\n          // stiffness: 0.01,\n          // damping: 0.15,\n          // easing: d3.easeCubicInOut,\n          enter: d => {\n            console.log(d);\n            let tmp = [];\n\n            for (let i = 0; i < 300; i++) {\n              tmp.push(d[0] * i / 300);\n            }\n\n            console.log(tmp);\n            return tmp;\n          }\n        }\n      },\n      updateTriggers: {\n        getElevation: [this.state.data]\n      } // onHover: ({object, x, y}) => {\n      //     const tooltip = `height: ${object.value * 5000}m`;\n      //\n      // }\n\n    })];\n  }\n\n  render() {\n    const {\n      mapStyle = 'mapbox://styles/mapbox/dark-v9'\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DeckGL, {\n      layers: this._renderLayers(),\n      effects: [lightingEffect],\n      initialViewState: INITIAL_VIEW_STATE,\n      controller: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(StaticMap, {\n      reuseMaps: true,\n      mapStyle: mapStyle,\n      preventStyleDiffing: true,\n      mapboxApiAccessToken: MAPBOX_TOKEN,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(StyletronProvider, {\n      value: engine,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BaseProvider, {\n      theme: LightTheme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(SelectContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Select, {\n      options: [{\n        label: \"pm10\",\n        id: 'pm10'\n      }, {\n        label: \"pm25\",\n        id: 'pm25'\n      }, {\n        label: \"co\",\n        id: \"co\"\n      }, {\n        label: \"no2\",\n        id: \"no2\"\n      }, {\n        label: \"so2\",\n        id: \"so2\"\n      }, {\n        label: \"o3\",\n        id: \"o3\"\n      }, {\n        label: \"bc\",\n        id: \"bc\"\n      }],\n      value: this.state.label,\n      placeholder: \"\\u9009\\u62E9\\u6C61\\u67D3\\u7C7B\\u578B\" // onChange={params => setValue(params.value)}\n      ,\n      size: SIZE.mini,\n      clearable: true,\n      onChange: parems => {\n        this.setState({\n          data: qualityMap.get(parems.option.id),\n          label: {\n            label: parems.option.label,\n            id: parems.option.id\n          }\n        }); // if(parems.option.id=='pm10'){\n        //     this.setState({\n        //         data:qualityMap.get()\n        //         label:{label:\"pm10\",id:'pm10'}\n        //     })\n        // }\n        // else if(parems.option.id=='pm25'){\n        //     this.setState({\n        //\n        //         label:{label:\"pm25\",id:'pm25'}\n        //     })\n        // }\n        // else{\n        //     this.setState({\n        //         desV:false,\n        //         depV:false,\n        //         area:{ label: \"隐藏\", id: \"\" }\n        //     })\n        // }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}","map":{"version":3,"sources":["/home/zhiguangda/ITS/deckgl/src/components/airQuality.js"],"names":["React","Component","Fragment","render","StaticMap","AmbientLight","PointLight","LightingEffect","DeckGL","Select","SIZE","ColumnLayer","d3","Provider","StyletronProvider","BaseProvider","LightTheme","styled","SliderTraffic","Client","Styletron","SelectContainer","position","zIndex","top","right","width","height","engine","MAPBOX_TOKEN","ambientLight","color","intensity","pointLight1","pointLight2","lightingEffect","qualityMap","Map","download","content","fileName","contentType","a","document","createElement","file","Blob","type","href","URL","createObjectURL","click","getData","Promise","resolve","json","then","data","console","log","results","forEach","d","coordinates","measurements","l","has","parameter","get","push","centroid","longitude","latitude","value","set","material","ambient","diffuse","shininess","specularColor","INITIAL_VIEW_STATE","zoom","pitch","bearing","colorRange","AirQuality","defaultColorRange","constructor","props","state","componentDidMount","p","setState","_renderLayers","id","diskResolution","radius","extruded","pickable","elevationScale","getPosition","getFillColor","k","Math","toFixed","getLineColor","getElevation","transitions","duration","enter","tmp","i","updateTriggers","mapStyle","label","mini","parems","option"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport {render} from 'react-dom';\nimport {StaticMap} from 'react-map-gl';\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\n// import {HexagonLayer} from '@deck.gl/aggregation-layers';\nimport DeckGL from '@deck.gl/react';\nimport { Select,SIZE } from \"baseui/select\";\nimport{ColumnLayer} from \"@deck.gl/layers\";\n\nimport * as d3 from 'd3'\nimport {Provider as StyletronProvider} from \"styletron-react\";\nimport {BaseProvider, LightTheme, styled} from \"baseui\";\nimport SliderTraffic from \"./sliderTraffic\";\n\nimport {Client as Styletron} from 'styletron-engine-atomic';\nconst SelectContainer=styled('div',{\n    position: 'absolute',\n    // display: 'flex',\n    // justifyContent: 'center',\n    // alignItems: 'center',\n    zIndex: 1,\n    top: '50px',\n    right:'10px',\n    width:'20%',\n    height:'10%'\n});\nconst engine = new Styletron();\n\n// Set your mapbox token here\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w'; // eslint-disable-line\n\n// Source data CSV\n\nconst ambientLight = new AmbientLight({\n    color: [255, 255, 255],\n    intensity: 1.0\n});\n\nconst pointLight1 = new PointLight({\n    color: [255, 255, 255],\n    intensity: 1.0,\n    position: [0, 0, 80000]\n});\n\nconst pointLight2 = new PointLight({\n    color: [255, 255, 255],\n    intensity: 1.0,\n    position: [180, 0, 80000]\n});\n\nconst lightingEffect = new LightingEffect({ambientLight, pointLight1, pointLight2});\n\nlet qualityMap=new Map()\n\nfunction download(content, fileName, contentType) {\n    var a = document.createElement(\"a\");\n    var file = new Blob([content], {type: contentType});\n    a.href = URL.createObjectURL(file);\n    a.download = fileName;\n    a.click();\n}\n\n// let maxpm10=0;\nfunction getData(){\n    return new Promise(resolve => {\n        d3.json(\"./air.json\").then(data=>{\n            console.log(data)\n            data.results.forEach(d=>{\n                // console.log('d',d);\n                if(d.coordinates){\n                    d.measurements.forEach(l=>{\n                        // if(l.value>maxpm10){\n                        //     maxpm10=l.value;\n                        // }\n                        // console.log(l)\n                        if(qualityMap.has(l.parameter)){\n                            qualityMap.get(l.parameter).push(\n                                {centroid: [d.coordinates.longitude,d.coordinates.latitude], value: l.value},\n                            )\n                        }\n                        else{\n                            qualityMap.set(l.parameter,[{centroid: [d.coordinates.longitude,d.coordinates.latitude], value: l.value}])\n                        }\n                    })\n                }\n            })\n            // console.log('maxpm',maxpm10)\n            // qualityMap.get('pm10').forEach(d=>{\n            //     d.value=(d.value/maxpm10)*1000;\n            // })\n            resolve('0');\n        })\n    })\n}\n\n\n// let p=getData()\n// p.then(results=>{\n//     console.log('qulity',qualityMap)\n// })\n\n\nconst material = {\n    ambient: 0.64,\n    diffuse: 0.6,\n    shininess: 32,\n    specularColor: [51, 51, 51]\n};\n\nconst INITIAL_VIEW_STATE = {\n    longitude:  120.207057,\n    latitude: 30.225901,\n    // longitude:-74.00823,\n    // latitude: 40.71351,\n    zoom: 3,\n    pitch: 45,\n    bearing: 0\n\n};\n\nconst colorRange = [\n    [1, 152, 189],\n    [73, 227, 206],\n    [216, 254, 181],\n    [254, 237, 177],\n    [254, 173, 84],\n    [209, 55, 78]\n];\n\n\n/* eslint-disable react/no-deprecated */\nexport default class AirQuality extends Component {\n    static get defaultColorRange() {\n        return colorRange;\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data:[]\n        };\n\n    }\n\n    componentDidMount() {\n        let p=getData();\n        p.then(results=>{\n            this.setState({\n                data:[]\n            });\n            console.log('qualityMap:',qualityMap)\n        })\n        // this._animate();\n    }\n\n    _renderLayers() {\n\n\n        return [\n        //     new HexagonLayer({\n        //         id: 'heatmap',\n        //         colorRange,\n        //         coverage,\n        //         data,\n        //         elevationRange: [0, 3000],\n        //         elevationScale: data && data.length ? 50 : 0,\n        //         extruded: true,\n        //         getPosition: d => d,\n        //         onHover: this.props.onHover,\n        //         pickable: Boolean(this.props.onHover),\n        //         radius,\n        //         upperPercentile,\n        //         material,\n        //\n        //         transitions: {\n        //             elevationScale: 3000\n        //         }\n        //     })\n\n            new ColumnLayer({\n\n                    id: 'column-layer',\n                    data:this.state.data,\n                    diskResolution: 12,\n                    radius: 5000,\n                    extruded: true,\n                    pickable: true,\n                    elevationScale: 5000,\n                    getPosition: d => d.centroid,\n                    getFillColor: d => {\n                        let k=(Math.log(d.value)/Math.log(4)).toFixed(0);\n                        if(k<=5){\n                            return colorRange[k]\n                        }\n                        else{\n                            return colorRange[5]\n                        }\n                    },\n                    getLineColor: [0, 0, 0],\n                getElevation:d=>d.value,\n                transitions:{\n                    getElevation:{\n                        duration: 3000,\n                        // type: 'spring',\n                        // stiffness: 0.01,\n                        // damping: 0.15,\n                        // easing: d3.easeCubicInOut,\n                        enter: d => {\n                            console.log(d);\n                            let tmp=[];\n                            for(let i=0;i<300;i++){\n                                tmp.push(d[0]*i/300)\n                            }\n                            console.log(tmp)\n                            return tmp;\n                        },\n                    }\n                },\n\n                updateTriggers:{\n                    getElevation: [this.state.data],\n                }\n\n                // onHover: ({object, x, y}) => {\n                //     const tooltip = `height: ${object.value * 5000}m`;\n                //\n                // }\n            })\n         ];\n\n    }\n\n    render() {\n        const {mapStyle = 'mapbox://styles/mapbox/dark-v9'} = this.props;\n\n        return (\n            <Fragment>\n                <DeckGL\n                    layers={this._renderLayers()}\n                     effects={[lightingEffect]}\n                    initialViewState={INITIAL_VIEW_STATE}\n                    controller={true}\n                >\n                    <StaticMap\n                        reuseMaps\n                        mapStyle={mapStyle}\n                        preventStyleDiffing={true}\n                        mapboxApiAccessToken={MAPBOX_TOKEN}\n                    />\n                </DeckGL>\n                <StyletronProvider value={engine}>\n                    <BaseProvider theme={LightTheme}>\n                        <SelectContainer>\n                            <Select\n                                options={[\n                                    {label:\"pm10\",id:'pm10'},\n                                    {label:\"pm25\",id:'pm25'},\n                                    { label: \"co\", id: \"co\" },\n                                    { label: \"no2\", id: \"no2\" },\n                                    { label: \"so2\", id: \"so2\" },\n                                    { label: \"o3\", id: \"o3\" },\n                                    { label: \"bc\", id: \"bc\" },\n                                ]}\n                                value={this.state.label}\n                                placeholder=\"选择污染类型\"\n                                // onChange={params => setValue(params.value)}\n                                size={SIZE.mini}\n                                clearable={true}\n                                onChange={parems=> {\n\n                                    this.setState({\n                                        data:qualityMap.get(parems.option.id),\n                                        label:{label:parems.option.label,id:parems.option.id}\n                                    })\n\n                                    // if(parems.option.id=='pm10'){\n                                    //     this.setState({\n                                    //         data:qualityMap.get()\n                                    //         label:{label:\"pm10\",id:'pm10'}\n                                    //     })\n                                    // }\n                                    // else if(parems.option.id=='pm25'){\n                                    //     this.setState({\n                                    //\n                                    //         label:{label:\"pm25\",id:'pm25'}\n                                    //     })\n                                    // }\n                                    // else{\n                                    //     this.setState({\n                                    //         desV:false,\n                                    //         depV:false,\n                                    //         area:{ label: \"隐藏\", id: \"\" }\n                                    //     })\n                                    // }\n                                }}\n                            />\n                        </SelectContainer>\n                    </BaseProvider>\n                </StyletronProvider>\n            </Fragment>\n\n\n\n    );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}