{"ast":null,"code":"export default function encodeWKT(gj) {\n  if (gj.type === 'Feature') {\n    gj = gj.geometry;\n  }\n\n  function pairWKT(c) {\n    return c.join(' ');\n  }\n\n  function ringWKT(r) {\n    return r.map(pairWKT).join(', ');\n  }\n\n  function ringsWKT(r) {\n    return r.map(ringWKT).map(wrapParens).join(', ');\n  }\n\n  function multiRingsWKT(r) {\n    return r.map(ringsWKT).map(wrapParens).join(', ');\n  }\n\n  function wrapParens(s) {\n    return '(' + s + ')';\n  }\n\n  switch (gj.type) {\n    case 'Point':\n      return 'POINT (' + pairWKT(gj.coordinates) + ')';\n\n    case 'LineString':\n      return 'LINESTRING (' + ringWKT(gj.coordinates) + ')';\n\n    case 'Polygon':\n      return 'POLYGON (' + ringsWKT(gj.coordinates) + ')';\n\n    case 'MultiPoint':\n      return 'MULTIPOINT (' + ringWKT(gj.coordinates) + ')';\n\n    case 'MultiPolygon':\n      return 'MULTIPOLYGON (' + multiRingsWKT(gj.coordinates) + ')';\n\n    case 'MultiLineString':\n      return 'MULTILINESTRING (' + ringsWKT(gj.coordinates) + ')';\n\n    case 'GeometryCollection':\n      return 'GEOMETRYCOLLECTION (' + gj.geometries.map(encodeWKT).join(', ') + ')';\n\n    default:\n      throw new Error('stringify requires a valid GeoJSON Feature or geometry object as input');\n  }\n}","map":{"version":3,"sources":["../../../src/lib/encode-wkt.js"],"names":["gj","c","r","pairWKT","ringWKT","ringsWKT","multiRingsWKT"],"mappings":"AAMA,eAAe,SAAA,SAAA,CAAA,EAAA,EAAuB;AACpC,MAAIA,EAAE,CAAFA,IAAAA,KAAJ,SAAA,EAA2B;AACzBA,IAAAA,EAAE,GAAGA,EAAE,CAAPA,QAAAA;AACD;;AAED,WAAA,OAAA,CAAA,CAAA,EAAoB;AAClB,WAAOC,CAAC,CAADA,IAAAA,CAAP,GAAOA,CAAP;AACD;;AAED,WAAA,OAAA,CAAA,CAAA,EAAoB;AAClB,WAAOC,CAAC,CAADA,GAAAA,CAAAA,OAAAA,EAAAA,IAAAA,CAAP,IAAOA,CAAP;AACD;;AAED,WAAA,QAAA,CAAA,CAAA,EAAqB;AACnB,WAAOA,CAAC,CAADA,GAAAA,CAAAA,OAAAA,EAAAA,GAAAA,CAAAA,UAAAA,EAAAA,IAAAA,CAAP,IAAOA,CAAP;AAID;;AAED,WAAA,aAAA,CAAA,CAAA,EAA0B;AACxB,WAAOA,CAAC,CAADA,GAAAA,CAAAA,QAAAA,EAAAA,GAAAA,CAAAA,UAAAA,EAAAA,IAAAA,CAAP,IAAOA,CAAP;AAID;;AAED,WAAA,UAAA,CAAA,CAAA,EAAuB;AACrB,WAAO,MAAA,CAAA,GAAP,GAAA;AACD;;AAED,UAAQF,EAAE,CAAV,IAAA;AACE,SAAA,OAAA;AACE,aAAO,YAAYG,OAAO,CAACH,EAAE,CAAtB,WAAmB,CAAnB,GAAP,GAAA;;AACF,SAAA,YAAA;AACE,aAAO,iBAAiBI,OAAO,CAACJ,EAAE,CAA3B,WAAwB,CAAxB,GAAP,GAAA;;AACF,SAAA,SAAA;AACE,aAAO,cAAcK,QAAQ,CAACL,EAAE,CAAzB,WAAsB,CAAtB,GAAP,GAAA;;AACF,SAAA,YAAA;AACE,aAAO,iBAAiBI,OAAO,CAACJ,EAAE,CAA3B,WAAwB,CAAxB,GAAP,GAAA;;AACF,SAAA,cAAA;AACE,aAAO,mBAAmBM,aAAa,CAACN,EAAE,CAAnC,WAAgC,CAAhC,GAAP,GAAA;;AACF,SAAA,iBAAA;AACE,aAAO,sBAAsBK,QAAQ,CAACL,EAAE,CAAjC,WAA8B,CAA9B,GAAP,GAAA;;AACF,SAAA,oBAAA;AACE,aAAO,yBAAyBA,EAAE,CAAFA,UAAAA,CAAAA,GAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAzB,IAAyBA,CAAzB,GAAP,GAAA;;AACF;AACE,YAAM,IAAA,KAAA,CAAN,wEAAM,CAAN;AAhBJ;AAkBD","sourcesContent":["// Fork of https://github.com/mapbox/wellknown under ISC license (MIT/BSD-2-clause equivalent)\n/* eslint-disable prefer-template */\n\n/**\n * Stringifies a GeoJSON object into WKT\n */\nexport default function encodeWKT(gj) {\n  if (gj.type === 'Feature') {\n    gj = gj.geometry;\n  }\n\n  function pairWKT(c) {\n    return c.join(' ');\n  }\n\n  function ringWKT(r) {\n    return r.map(pairWKT).join(', ');\n  }\n\n  function ringsWKT(r) {\n    return r\n      .map(ringWKT)\n      .map(wrapParens)\n      .join(', ');\n  }\n\n  function multiRingsWKT(r) {\n    return r\n      .map(ringsWKT)\n      .map(wrapParens)\n      .join(', ');\n  }\n\n  function wrapParens(s) {\n    return '(' + s + ')';\n  }\n\n  switch (gj.type) {\n    case 'Point':\n      return 'POINT (' + pairWKT(gj.coordinates) + ')';\n    case 'LineString':\n      return 'LINESTRING (' + ringWKT(gj.coordinates) + ')';\n    case 'Polygon':\n      return 'POLYGON (' + ringsWKT(gj.coordinates) + ')';\n    case 'MultiPoint':\n      return 'MULTIPOINT (' + ringWKT(gj.coordinates) + ')';\n    case 'MultiPolygon':\n      return 'MULTIPOLYGON (' + multiRingsWKT(gj.coordinates) + ')';\n    case 'MultiLineString':\n      return 'MULTILINESTRING (' + ringsWKT(gj.coordinates) + ')';\n    case 'GeometryCollection':\n      return 'GEOMETRYCOLLECTION (' + gj.geometries.map(encodeWKT).join(', ') + ')';\n    default:\n      throw new Error('stringify requires a valid GeoJSON Feature or geometry object as input');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}