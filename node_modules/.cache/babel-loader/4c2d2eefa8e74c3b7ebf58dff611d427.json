{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/zhiguangda/ITS/deckgl/src/components/routeMap.js\";\n// /// app.js\nimport React, { Fragment } from 'react';\nimport DeckGL from '@deck.gl/react';\nimport { TripsLayer } from '@deck.gl/geo-layers';\nimport { StaticMap } from 'react-map-gl';\nimport * as d3 from 'd3';\nimport F2 from '@antv/f2';\nimport { WebMercatorViewport } from '@deck.gl/core';\nimport { Radar } from '@antv/g2plot';\nimport _ from 'lodash'; //\n// // Set your mapbox access token here\n// const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\n//\n// // Initial viewport settings\n// const initialViewState = {\n//     longitude: -122.41669,\n//     latitude: 37.7853,\n//     zoom: 13,\n//     pitch: 0,\n//     bearing: 0\n// };\n//\n// // Data to be used by the LineLayer\n// const data = [   {\n//              waypoints: [{coordinates: [-122.3907988, 37.7664413], timestamp: 1554772579000},\n//                      {coordinates: [-122.3908298,37.7667706], timestamp: 1554772579010},\n//                      {coordinates: [-122.4485672, 37.8040182], timestamp: 1554772580200}\n//              ]\n//      }];\n//\n// class App extends React.Component {\n//     render() {\n//         const layers = [\n//             new TripsLayer({id: 'trips-layer', data,\n//                 getPath:d => d.waypoints.map(p => p.coordinates),\n//                 getTimestamps: d => d.waypoints.map(p => p.timestamp - 1554772579000),\n//                 getColor: [253, 128, 93],\n//                 opacity: 0.8,\n//                 widthMinPixels: 5,\n//                 rounded: true,\n//                 trailLength: 200,\n//                 currentTime: 0\n//\n//             })\n//         ];\n//\n//         return (\n//             <DeckGL\n//                 initialViewState={initialViewState}\n//                 controller={true}\n//                 layers={layers}\n//             >\n//                 <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n//             </DeckGL>\n//         );\n//     }\n// }\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nimport { Component } from 'react';\nimport { AmbientLight, PointLight, LightingEffect } from '@deck.gl/core';\nimport { PathLayer, ColumnLayer, PolygonLayer, IconLayer, ScatterplotLayer, ArcLayer } from '@deck.gl/layers';\nimport SliderTraffic from \"./sliderTraffic\";\nimport { Select, SIZE } from \"baseui/select\";\nimport { BaseProvider, LightTheme, styled } from \"baseui\";\nimport { Client as Styletron } from 'styletron-engine-atomic';\nimport { Provider as StyletronProvider } from 'styletron-react';\nimport { SelectionLayer } from '@nebula.gl/layers';\nimport { EditableGeoJsonLayer } from 'nebula.gl';\nimport Charts from './charts/charts';\nimport { HexagonLayer } from '@deck.gl/aggregation-layers';\nimport Panel from \"./charts/panel\";\nimport { DrawPolygonMode } from \"@nebula.gl/edit-modes\";\nimport { Toolbox } from \"@nebula.gl/editor\";\nimport 'boxicons';\nimport { Bar, Pie, Area, Column } from '@antv/g2plot';\nimport { G2, Line } from '@antv/g2plot';\nimport { keys } from \"@material-ui/core/styles/createBreakpoints\";\nconst piedata = [{\n  type: '0-10',\n  value: 0\n}, {\n  type: '10-20',\n  value: 0\n}, {\n  type: '20-30',\n  value: 0\n}, {\n  type: '30-40',\n  value: 0\n}, {\n  type: '40-50',\n  value: 0\n}, {\n  type: '50-60',\n  value: 0\n}, {\n  type: '60-70',\n  value: 0\n}, {\n  type: '70-80',\n  value: 0\n}, {\n  type: '80-90',\n  value: 0\n}, {\n  type: '90-100',\n  value: 0\n}, {\n  type: '100-110',\n  value: 0\n}, {\n  type: '110-120',\n  value: 0\n}, {\n  type: '120+',\n  value: 0\n}];\n\nfunction getpie() {\n  return new Promise(resolve => {\n    Beijingdata.forEach(d => {\n      if (d['value'] >= 0 && d['value'] < 10) piedata[0].value++;else if (d['value'] >= 10 && d['value'] < 20) piedata[1].value++;else if (d['value'] >= 20 && d['value'] < 30) piedata[2].value++;else if (d['value'] >= 30 && d['value'] < 40) piedata[3].value++;else if (d['value'] >= 40 && d['value'] < 50) piedata[4].value++;else if (d['value'] >= 50 && d['value'] < 60) piedata[5].value++;else if (d['value'] >= 60 && d['value'] < 70) piedata[6].value++;else if (d['value'] >= 70 && d['value'] < 80) piedata[7].value++;else if (d['value'] >= 80 && d['value'] < 90) piedata[8].value++;else if (d['value'] >= 90 && d['value'] < 100) piedata[9].value++;else if (d['value'] >= 100 && d['value'] < 110) piedata[10].value++;else if (d['value'] >= 110 && d['value'] < 120) piedata[11].value++;else if (d['value'] >= 120) piedata[12].value++;\n    });\n    resolve();\n  });\n} // import {\n//     Editor,\n//     EditingMode,\n//     DrawLineStringMode,\n//     DrawPolygonMode,\n// } from \"react-map-gl-draw\";\n\n\nconst background = {\n  width: \"30%\",\n  margin: \"30px auto\",\n  backgroundColor: \"#FFFFFF\",\n  // [\"#FF895D\",\"#FF6836\",\"#F3470D\",\"#D13808\",\"#A4300C\",\"#7A270E\"],\n  minHeight: \"0px\",\n  boxSizing: \"border-box\",\n  position: \"fixed\",\n  // top: \"80%\",\n  bottom: \"10%\",\n  border: \"10px\",\n  dashed: \"#FF6836\",\n  opacity: 1,\n  zIndex: 1\n};\nconst SelectContainer = styled('div', {\n  position: 'absolute',\n  // display: 'flex',\n  // justifyContent: 'center',\n  // alignItems: 'center',\n  zIndex: 1,\n  top: '50px',\n  right: '10px',\n  width: '15%' // height:'5%'\n\n});\nconst SelectContainer2 = styled('div', {\n  position: 'absolute',\n  // display: 'flex',\n  // justifyContent: 'center',\n  // alignItems: 'center',\n  zIndex: 1,\n  top: '50px',\n  left: '10px',\n  width: '15%' // height:'5%'\n\n});\nconst engine = new Styletron(); // Set your mapbox token here\n\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w'; //加载区域数据\n\nvar depData = [];\nvar depCenter = [];\nlet desCenter = [];\nlet desData = [];\nlet depPolygon = [];\nlet desPolygon = [];\nlet colorTable = [[128, 255, 0, 255], [255, 255, 40, 255], [255, 128, 0, 255], [255, 64, 64, 255], [255, 0, 0, 255]];\nconst ICON_MAPPING = {\n  marker: {\n    x: 0,\n    y: 0,\n    width: 32,\n    height: 32,\n    mask: true\n  }\n}; // Source data CSV\n// const DATA_URL = {\n//     BUILDINGS:\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/buildings.json', // eslint-disable-line\n//     TRIPS:\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/trips-v7.json' // eslint-disable-line\n// };\n\nconst ambientLight = new AmbientLight({\n  color: [255, 255, 255],\n  intensity: 1.0\n});\nconst pointLight = new PointLight({\n  color: [255, 255, 255],\n  intensity: 2.0,\n  position: [120.167057, 30.185901, 8000]\n});\nconst lightingEffect = new LightingEffect({\n  ambientLight,\n  pointLight\n});\nconst material = {\n  ambient: 0.1,\n  diffuse: 0.9,\n  shininess: 64,\n  specularColor: [60, 64, 70]\n};\nconst DEFAULT_THEME = {\n  buildingColor: [74, 80, 87],\n  trailColor0: [253, 128, 93],\n  trailColor1: [23, 184, 190],\n  material,\n  effects: [lightingEffect]\n};\nconst INITIAL_VIEW_STATE = {\n  longitude: 120.207057,\n  latitude: 30.225901,\n  // longitude:-74.00823,\n  // latitude: 40.71351,\n  zoom: 12.4,\n  pitch: 45,\n  bearing: 0\n};\nconst BEIJIN_VIEW_STATE = {\n  longitude: 116.39739990234375,\n  latitude: 39.915002988576155,\n  // longitude:-74.00823,\n  // latitude: 40.71351,\n  zoom: 12.4,\n  pitch: 45,\n  bearing: 0\n}; //柱状图的颜色\n\nconst colorRange = [[1, 152, 189], [73, 227, 206], [216, 254, 181], [254, 237, 177], [254, 173, 84], [209, 55, 78]]; // d3.json(\"https://api.openaq.org/v1/latest?limit=10000\").then(data=>{\n//     console.log(data)\n// })\n\nvar Routes = [];\n\nfunction Rad(d) {\n  return d * Math.PI / 180.0; //经纬度转换成三角函数中度分表形式。\n}\n\n_c = Rad;\n\nvar getDistance = function (lng1, lat1, lng2, lat2) {\n  var radLat1 = Rad(lat1);\n  var radLat2 = Rad(lat2);\n  var a = radLat1 - radLat2;\n  var b = Rad(lng1) - Rad(lng2);\n  var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2)));\n  s = s * 6378.137; // EARTH_RADIUS;\n\n  s = Math.round(s * 10000) / 10000; //输出为公里\n  //s=s.toFixed(4);\n\n  return s;\n}; // var od=[];\n\n\nfunction getRouteByTime(time) {\n  let data = [];\n  d3.json(\"http://10.72.100.14:8888/query/\" + time).then(d => {\n    let pAll = [];\n    d.map((dd, index) => {\n      setInterval(index * 10);\n      pAll.push(new Promise((resolve, reject) => {\n        var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + dd[3] + ',' + dd[4] + ';' + dd[5] + ',' + dd[6] + '?steps=true&geometries=geojson&access_token=' + 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\n        var req = new XMLHttpRequest();\n        req.open('GET', url, true);\n        req.send();\n\n        req.onload = function () {\n          var json = JSON.parse(req.response);\n          data.push(json);\n          console.log('oneRoute:', json);\n          resolve();\n        };\n\n        req.ontimeout = function () {\n          reject();\n        };\n      }));\n    });\n    Promise.all(pAll).then(() => {\n      // console.log('queryroute:',data)\n      console.log(JSON.stringify(data));\n    }, () => {\n      // console.log('queryroute:',data)\n      console.log(JSON.stringify(data));\n    });\n  });\n  setTimeout(() => {\n    console.log(JSON.stringify(data));\n  }, 70000);\n}\n\nfunction gerRouteByPoint(start, end) {} // getRouteByTime(1584);\n\n\nvar getRoutedata = function (start, end) {\n  var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[start][0] + ',' + depCenter[start][1] + ';' + desCenter[end][0] + ',' + desCenter[end][1] + '?steps=true&geometries=geojson&access_token=' + 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w'; // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n\n  var req = new XMLHttpRequest();\n  req.open('GET', url, true);\n  req.send();\n\n  req.onload = function () {\n    var json = JSON.parse(req.response); // console.log('route:',json)\n\n    var data = json.routes[0];\n    var route = data.geometry.coordinates;\n    var timestamps = [0]; //先设置每条路径1000stamp\n\n    for (var i = 0; i < route.length; i++) {\n      if (i !== 0) {\n        var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n        timestamps.push(dist + timestamps[i - 1]);\n      }\n    }\n\n    var geojson = {\n      'path': route,\n      'timestamps': timestamps\n    };\n    console.log(geojson);\n    Routes.push(geojson);\n  };\n}; //getRoutedata([120.167057,30.185901], [120.302548\t,30.399632])\n// var getRoute=new function(time) {\n//     // var gets = [];\n//     d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\n//\n//         let re=/([-+]?[0-9]*\\.?[0-9]+)/g;\n//         console.log('data1:',data)\n//         data.forEach(d=>{\n//             let tmp=d.value.match(re)\n//             let tmpData=[];\n//             for(let i=0;i<tmp.length-1;i+=2){\n//                 tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\n//             }\n//             depData.push(tmpData)\n//         })\n//         depData.forEach(d=>{\n//             let sumlong=0\n//             let sumlat=0;\n//             d.forEach(data=>{\n//                 sumlong+=data[0];\n//                 sumlat+=data[1];\n//             })\n//             depCenter.push([sumlong/d.length,sumlat/d.length])\n//         })\n//         d3.csv(\"./edge_des_csv.csv\").then(function (data) {\n//             let re=/([-+]?[0-9]*\\.?[0-9]+)/g\n//             console.log('data2:',data)\n//             data.forEach(d=>{\n//                 let tmp=d.value.match(re)\n//                 let tmpData=[];\n//                 for(let i=0;i<tmp.length-1;i+=2){\n//                     tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\n//                 }\n//                 desData.push(tmpData)\n//             })\n//             desData.forEach(d=>{\n//                 let sumlong=0;\n//                 let sumlat=0;\n//                 d.forEach(data=>{\n//                     sumlong+=data[0];\n//                     sumlat+=data[1];\n//                 })\n//                 desCenter.push([sumlong/d.length,sumlat/d.length])\n//             });\n//             // d3.json('http://localhost:5000/data/12:00:00').then(function(data){\n//             //     data.forEach(d=>{\n//             //         var tmp=d.split(',');\n//             //         if(tmp[0]!=-1 && tmp[1]!=-1) {\n//             //             if(tmp[0]>46&&tmp[0]<=60){\n//             //              //   if (tmp[2] !== '0') {\n//             //                 var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n//             //                 gets.push($.ajax({\n//             //                     type: 'GET',\n//             //                     url: urlNow,\n//             //                     success: function (r) {\n//             //                         console.log('r:', r)\n//             //                         //var json = JSON.parse(data);\n//             //                         var plan = r.routes[0];\n//             //                         var route = plan.geometry.coordinates;\n//             //                         var timestamps = [0];//先设置每条路径1000stamp\n//             //                         for (var i = 0; i < route.length; i++) {\n//             //                             if (i !== 0) {\n//             //                                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n//             //                                 timestamps.push(dist + timestamps[i - 1])\n//             //                             }\n//             //                         }\n//             //                         var geojson = {\n//             //                             'vendor': 1,\n//             //                             'path': route,\n//             //                             'timestamps': timestamps,\n//             //\n//             //                         };\n//             //                         console.log(geojson)\n//             //                         Routes.push(geojson)\n//             //                         saveJson[tmp[0]+','+tmp[1]] = geojson\n//             //                     },\n//             //                     error:function(){\n//             //                         console.log('err')\n//             //                     }\n//             //                 }));\n//             //\n//             //            // }\n//             //             }\n//             //         }\n//             //     })\n//             //     // url.forEach(function(value) {\n//             //     //     console.log('url:',value)\n//             //     //     gets.push($.ajax({\n//             //     //         type: 'GET',\n//             //     //         url: value,\n//             //     //         success: function(data) {\n//             //     //             console.log('data:',data)\n//             //     //             //var json = JSON.parse(data);\n//             //     //             var plan = data.routes[0];\n//             //     //             var route = plan.geometry.coordinates;\n//             //     //             var timestamps=[0];//先设置每条路径1000stamp\n//             //     //             for(var i=0;i<route.length;i++){\n//             //     //                 if(i!==0){\n//             //     //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n//             //     //                     timestamps.push(dist+timestamps[i-1])\n//             //     //                 }\n//             //     //             }\n//             //     //             var geojson = {\n//             //     //                 'vendor':1,\n//             //     //                 'path': route,\n//             //     //                 'timestamps':timestamps,\n//             //     //\n//             //     //             };\n//             //     //             console.log(geojson)\n//             //     //             Routes.push(geojson)\n//             //     //\n//             //     //\n//             //     //         }\n//             //     //     }));\n//             //     // });\n//             //\n//             //     $.when.apply($, gets).then(function() {\n//             //         console.log(saveJson)\n//             //         var jsonData=JSON.stringify(saveJson)\n//             //         download(jsonData,'route.json','text/plain')\n//             //         console.log('Routes:',Routes)\n//             //         resolve(Routes);\n//             //         // resolve([\n//             //         //     {\n//             //         //         \"vendor\": 1,\n//             //         //         \"path\": [\n//             //         //             [120.167057,30.185901],\n//             //         //             [120.165752,30.185723],\n//             //         //             [120.16581,30.188491],\n//             //         //             [120.190417,30.198224],\n//             //         //             [120.191971\t,30.204],\n//             //         //             [120.189622\t,30.20767],\n//             //         //             [120.182369\t,30.218973],\n//             //         //             [120.180889\t,30.222601],\n//             //         //             [120.200108\t,30.306856],\n//             //         //             [120.23477\t,30.311914],\n//             //         //             [120.246959\t,30.316748],\n//             //         //             [120.309708\t,30.387518],\n//             //         //             [120.312426\t,30.39154],\n//             //         //             [120.309069\t,30.400897],\n//             //         //             [120.302548\t,30.399632],],\n//             //         //\n//             //         //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n//             //         //     }])\n//             //     });\n//             // })\n//\n//             d3.json('http://localhost:5000/data/'+time+':00:00').then(function(data){\n//                 var count=0;\n//                 d3.json('./10.json').then(function (map) {\n//                    // console.log('map:',map)\n//                     data.forEach(d=>{\n//                         var tmp=d.split(',');\n//                         if(tmp[0]!=-1 && tmp[1]!=-1) {\n//                             if(parseInt(tmp[2])>=5){\n//                                 count++;\n//                                 var key=tmp[0]+','+tmp[1];\n//                                 console.log(map[key]);\n//                                 Routes.push(map[key]);\n//                             }\n//                             // if(tmp[0]>40&&tmp[0]<=60&&tmp[1]>40&&tmp[1]<=60){\n//                                 //   if (tmp[2] !== '0') {\n//                                 // var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n//                                 // gets.push($.ajax({\n//                                 //     type: 'GET',\n//                                 //     url: urlNow,\n//                                 //     success: function (r) {\n//                                 //         console.log('r:', r)\n//                                 //         //var json = JSON.parse(data);\n//                                 //         var plan = r.routes[0];\n//                                 //         var route = plan.geometry.coordinates;\n//                                 //         var timestamps = [0];//先设置每条路径1000stamp\n//                                 //         for (var i = 0; i < route.length; i++) {\n//                                 //             if (i !== 0) {\n//                                 //                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n//                                 //                 timestamps.push(dist + timestamps[i - 1])\n//                                 //             }\n//                                 //         }\n//                                 //         var geojson = {\n//                                 //             'vendor': 1,\n//                                 //             'path': route,\n//                                 //             'timestamps': timestamps,\n//                                 //\n//                                 //         };\n//                                 //         console.log(geojson)\n//                                 //         Routes.push(geojson)\n//                                 //         saveJson[tmp[0]+','+tmp[1]] = geojson\n//                                 //     },\n//                                 //     error:function(){\n//                                 //         console.log('err')\n//                                 //     }\n//                                 // }));\n//\n//                                 // }\n//                            // }\n//                         }\n//                     })\n//                     console.log('count:',count)\n//                    // console.log(Routes)\n//                 })\n//                 // url.forEach(function(value) {\n//                 //     console.log('url:',value)\n//                 //     gets.push($.ajax({\n//                 //         type: 'GET',\n//                 //         url: value,\n//                 //         success: function(data) {\n//                 //             console.log('data:',data)\n//                 //             //var json = JSON.parse(data);\n//                 //             var plan = data.routes[0];\n//                 //             var route = plan.geometry.coordinates;\n//                 //             var timestamps=[0];//先设置每条路径1000stamp\n//                 //             for(var i=0;i<route.length;i++){\n//                 //                 if(i!==0){\n//                 //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n//                 //                     timestamps.push(dist+timestamps[i-1])\n//                 //                 }\n//                 //             }\n//                 //             var geojson = {\n//                 //                 'vendor':1,\n//                 //                 'path': route,\n//                 //                 'timestamps':timestamps,\n//                 //\n//                 //             };\n//                 //             console.log(geojson)\n//                 //             Routes.push(geojson)\n//                 //\n//                 //\n//                 //         }\n//                 //     }));\n//                 // });\n//\n//                 // $.when.apply($, gets).then(function() {\n//                 //     console.log(saveJson)\n//                 //     var jsonData=JSON.stringify(saveJson)\n//                 //     download(jsonData,'route.json','text/plain')\n//                 //     console.log('Routes:',Routes)\n//                 //     resolve(Routes);\n//                 //\n//                 // });\n//             })\n//         });\n//     });\n//\n// };\n//每条路径按流量加线的数量\n\n\nlet getStep = function (step, trip) {\n  let newTrip = [];\n  trip.forEach(d => {\n    d += 3600 / step;\n    newTrip.push(d);\n  });\n  return newTrip;\n};\n\nfunction getArea() {\n  d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\n    let re = /([-+]?[0-9]*\\.?[0-9]+)/g;\n    console.log('data1:', data);\n    data.forEach((d, index) => {\n      let tmp = d.value.match(re);\n      let tmpData = [];\n\n      for (let i = 0; i < tmp.length - 1; i += 2) {\n        tmpData.push([parseFloat(tmp[i + 1]), parseFloat(tmp[i])]);\n      }\n\n      depData.push(tmpData);\n      depPolygon.push({\n        contour: tmpData,\n        in: 0,\n        out: 0,\n        number: index\n      });\n    });\n    depData.forEach(d => {\n      let sumlong = 0;\n      let sumlat = 0;\n      d.forEach(data => {\n        sumlong += data[0];\n        sumlat += data[1];\n      });\n      depCenter.push([sumlong / d.length, sumlat / d.length]);\n    });\n    d3.csv(\"./edge_des_csv.csv\").then(function (data) {\n      let re = /([-+]?[0-9]*\\.?[0-9]+)/g;\n      console.log('data2:', data);\n      data.forEach((d, index) => {\n        let tmp = d.value.match(re);\n        let tmpData = [];\n\n        for (let i = 0; i < tmp.length - 1; i += 2) {\n          tmpData.push([parseFloat(tmp[i + 1]), parseFloat(tmp[i])]);\n        }\n\n        desData.push(tmpData);\n        desPolygon.push({\n          contour: tmpData,\n          in: 0,\n          out: 0,\n          number: index\n        });\n      });\n      desData.forEach(d => {\n        let sumlong = 0;\n        let sumlat = 0;\n        d.forEach(data => {\n          sumlong += data[0];\n          sumlat += data[1];\n        });\n        desCenter.push([sumlong / d.length, sumlat / d.length]);\n      });\n    });\n  });\n} //获取流量数据\n\n\nfunction getRoute(time) {\n  return new Promise(resolve => {\n    // var gets = [];\n    // d3.json('http://localhost:5000/data/'+time).then(function (data) {\n    d3.json('http://192.168.111.1:8888/data/' + time).then(function (data) {\n      var count = 0;\n      d3.json('./10.json').then(function (map) {\n        // console.log('map:',map)\n        var routeData = [];\n        var sumMax = 0;\n        data.forEach(d => {\n          var tmp = d.split(',');\n\n          if (tmp[0] != -1 && tmp[1] != -1) {\n            if (parseInt(tmp[2]) >= 2) {\n              depPolygon[parseInt(tmp[0])].out += parseInt(tmp[2]);\n              desPolygon[parseInt(tmp[1])].in += parseInt(tmp[2]);\n              count++;\n              var key = tmp[0] + ',' + tmp[1]; //  console.log(map[key]);\n\n              var pre = [];\n              var sum = 0;\n              var countD = [];\n              map[key].path.forEach(d => {\n                if (pre.length == 0) {\n                  pre = d;\n                } else {\n                  // console.log('pre:',pre);\n                  var m = getDistance(pre[0], pre[1], d[0], d[1]);\n                  countD.push(m);\n                  sum += m;\n                  pre = d;\n                }\n              });\n\n              if (sum >= sumMax) {\n                sumMax = sum;\n              } //control color\n\n\n              if (parseInt(tmp[2]) >= 2 && parseInt(tmp[2]) < 5) {\n                routeData.push({\n                  'od': parseInt(tmp[0]) + ',' + parseInt(tmp[1]),\n                  'traffic': parseInt(tmp[2]),\n                  \"color\": 0,\n                  \"path\": map[key].path,\n                  \"timestamps\": countD\n                }); // console.log('path',map[key].path)\n              } else if (parseInt(tmp[2]) >= 5 && parseInt(tmp[2]) < 20) {\n                routeData.push({\n                  'od': parseInt(tmp[0]) + ',' + parseInt(tmp[1]),\n                  'traffic': parseInt(tmp[2]),\n                  \"color\": 1,\n                  \"path\": map[key].path,\n                  \"timestamps\": countD\n                });\n              } else if (parseInt(tmp[2]) >= 20 && parseInt(tmp[2]) < 100) {\n                routeData.push({\n                  'od': parseInt(tmp[0]) + ',' + parseInt(tmp[1]),\n                  'traffic': parseInt(tmp[2]),\n                  \"color\": 2,\n                  \"path\": map[key].path,\n                  \"timestamps\": countD\n                });\n              } else if (parseInt(tmp[2]) >= 100 && parseInt(tmp[2]) < 150) {\n                routeData.push({\n                  'od': parseInt(tmp[0]) + ',' + parseInt(tmp[1]),\n                  'traffic': parseInt(tmp[2]),\n                  \"color\": 3,\n                  \"path\": map[key].path,\n                  \"timestamps\": countD\n                });\n              } else if (parseInt(tmp[2]) >= 150) {\n                routeData.push({\n                  'od': parseInt(tmp[0]) + ',' + parseInt(tmp[1]),\n                  'traffic': parseInt(tmp[2]),\n                  \"color\": 4,\n                  \"path\": map[key].path,\n                  \"timestamps\": countD\n                });\n              }\n            }\n          }\n        });\n        let newRoutes = []; //按照流量多加动画效果\n\n        routeData.forEach(d => {\n          var tmpTime = [time * 3600];\n          let preIndex = 0; // console.log('timestamps:',d.timestamps)\n\n          d.timestamps.forEach(t => {\n            // console.log('t:',t)\n            tmpTime.push(tmpTime[preIndex] + 3600 / sumMax * t); //加上当前已经过去的小时的时间\n\n            preIndex++;\n          });\n          d.timestamps = tmpTime;\n          let tmpStep = tmpTime;\n\n          for (let i = 0; i < d.traffic; i++) {\n            tmpStep = getStep(d.traffic, tmpStep);\n            newRoutes.push({\n              'od': d.od,\n              'traffic': d.traffic,\n              \"color\": d.color,\n              \"path\": d.path,\n              \"timestamps\": tmpStep\n            });\n          }\n        });\n        newRoutes.forEach(d => {\n          routeData.push(d);\n        }); // routeData.forEach(d=>{\n        //     Routes.push(d)\n        // })\n\n        Routes = routeData;\n        console.log('count:', count);\n        console.log('Routes:', Routes);\n        resolve('0'); // console.log(Routes)\n      });\n    });\n  });\n}\n\nlet match_points = [];\nlet match_map = {};\n\nfunction getMatchdata() {\n  return new Promise(resolve => {\n    d3.json('./match.json').then(d => {\n      console.log(\"match\", d);\n      d.forEach(dd => {\n        if (dd['code'] === \"Ok\") {\n          dd['tracepoints'].forEach(p => {\n            if (p !== null && !match_map.hasOwnProperty(p['location'])) {\n              //去除重复的点。\n              match_map[p['location']] = 1;\n              match_points.push({\n                coordinates: [parseFloat(p['location'][0]), parseFloat(p['location'][1])],\n                value: 15\n              });\n            }\n          });\n        }\n      });\n      resolve();\n    });\n  });\n}\n\nlet MCBAND = [12890594.86, 8362377.87, 5591021, 3481989.83, 1678043.12, 0];\nlet MC2LL = [[1.410526172116255e-008, 8.983055096488720e-006, -1.99398338163310, 2.009824383106796e+002, -1.872403703815547e+002, 91.60875166698430, -23.38765649603339, 2.57121317296198, -0.03801003308653, 1.733798120000000e+007], [-7.435856389565537e-009, 8.983055097726239e-006, -0.78625201886289, 96.32687599759846, -1.85204757529826, -59.36935905485877, 47.40033549296737, -16.50741931063887, 2.28786674699375, 1.026014486000000e+007], [-3.030883460898826e-008, 8.983055099835780e-006, 0.30071316287616, 59.74293618442277, 7.35798407487100, -25.38371002664745, 13.45380521110908, -3.29883767235584, 0.32710905363475, 6.856817370000000e+006], [-1.981981304930552e-008, 8.983055099779535e-006, 0.03278182852591, 40.31678527705744, 0.65659298677277, -4.44255534477492, 0.85341911805263, 0.12923347998204, -0.04625736007561, 4.482777060000000e+006], [3.091913710684370e-009, 8.983055096812155e-006, 0.00006995724062, 23.10934304144901, -0.00023663490511, -0.63218178102420, -0.00663494467273, 0.03430082397953, -0.00466043876332, 2.555164400000000e+006], [2.890871144776878e-009, 8.983055095805407e-006, -0.00000003068298, 7.47137025468032, -0.00000353937994, -0.02145144861037, -0.00001234426596, 0.00010322952773, -0.00000323890364, 8.260885000000000e+005]];\nlet bound = [12924083.26, 4792883.01, 12992448.86, 4864389.46];\n\nfunction convertor(lng, lat, factor) {\n  let x = factor[0] + factor[1] * Math.abs(lng);\n  let tmp = Math.abs(lat) / factor[9];\n  let y = factor[2];\n\n  for (let i = 3; i < 9; i++) {\n    y += factor[i] * Math.pow(tmp, i - 2);\n    x = lng > 0 ? x : -x;\n    y = lat > 0 ? y : -y;\n  }\n\n  return [x, y];\n}\n\nfunction mc2coordinate(x, y) {\n  let factor = null;\n  MCBAND.map((index, value) => {\n    if (y > value) {\n      factor = MC2LL[index];\n    }\n  });\n  return convertor(x, y, factor);\n}\n\nfunction getBound() {\n  let min = mc2coordinate(bound[0], bound[1]);\n  let max = mc2coordinate(bound[2], bound[3]);\n  return [min, max];\n}\n\nlet root = {};\n\nfunction Queue() {\n  let items = []; // 向队列添加元素（一个或多个）\n\n  this.enqueue = function (element) {\n    if (element instanceof Array) items = items.concat(element);else items.push(element);\n  }; // 从队列移除元素\n\n\n  this.dequeue = function () {\n    return items.shift();\n  }; // 返回队列中的第一个元素\n\n\n  this.front = function () {\n    return items[0];\n  }; // 判断队列是否为空\n\n\n  this.isEmpty = function () {\n    return items.length === 0;\n  }; // 返回队列的长度\n\n\n  this.size = function () {\n    return items.length;\n  }; // 清空队列\n\n\n  this.clear = function () {\n    items = [];\n  }; // 打印队列内的所有元素\n\n\n  this.print = function () {\n    console.log(items.toString());\n  };\n}\n\n_c2 = Queue;\n\nfunction split(root, tag) {\n  if (root['data'].length > tag) {\n    let x1 = root['bound'][0][0];\n    let y1 = root['bound'][0][1];\n    let x2 = root['bound'][1][0];\n    let y2 = root['bound'][1][1];\n    let mid_vertical = (root['bound'][0][0] + root['bound'][1][0]) / 2;\n    let mid_horizontal = (root['bound'][0][1] + root['bound'][1][1]) / 2;\n    root['LU'] = {};\n    root['RU'] = {};\n    root['RD'] = {};\n    root['LD'] = {};\n    root['LU']['bound'] = [[x1, mid_horizontal], [mid_vertical, y2]];\n    root['LD']['bound'] = [[x1, y1], [mid_vertical, mid_horizontal]];\n    root['RU']['bound'] = [[mid_vertical, mid_horizontal], [x2, y2]];\n    root['RD']['bound'] = [[mid_vertical, y1], [x2, mid_horizontal]];\n    root['LD']['data'] = [];\n    root['RU']['data'] = [];\n    root['RD']['data'] = [];\n    root['LU']['data'] = [];\n    root['data'].forEach(d => {\n      if (match_points[d].coordinates[0] <= mid_vertical) {\n        if (match_points[d].coordinates[1] > mid_horizontal) {\n          root['LU']['data'].push(d);\n        } else {\n          root['LD']['data'].push(d);\n        }\n      } else {\n        if (match_points[d].coordinates[1] > mid_horizontal) {\n          root['RU']['data'].push(d);\n        } else {\n          root['RD']['data'].push(d);\n        }\n      }\n    }); // split(root['LU'],tag);\n    // split(root['RU'],tag);\n    // split(root['RD'],tag);\n    // split(root['LD'],tag);\n  }\n}\n\nlet quardTree = {};\n\nfunction getQuardTree() {\n  return new Promise(resolve => {\n    d3.json('http://127.0.0.1:8888/quardTree').then(d => {\n      console.log('quard', d);\n      Object.keys(d).forEach(key => {\n        quardTree[key] = d[key];\n      });\n      resolve();\n    });\n  }); //设置区域的上下左右\n}\n\nlet SpeedData = []; //获取time 时间点的所有道路点的速度信息\n\nfunction getBeijingSpeed(time) {\n  SpeedData = [];\n  return new Promise(resolve => {\n    d3.json('http://10.72.100.14:8888/data/rootdata/' + time).then(data => {\n      console.log(data);\n      data.forEach(d => {\n        SpeedData.push(d);\n      });\n      resolve();\n    });\n  });\n}\n\nlet pathlist = []; //获取速度信息对应的道路标号\n\nfunction getPathlist() {\n  //记录了速度数据集里面每个点的时间\n  pathlist = [];\n  return new Promise(resolve => {\n    d3.json('http://10.72.100.14:8888/data/pathlist').then(data => {\n      // console.log(data);\n      data.forEach(d => {\n        pathlist.push(d);\n      });\n      resolve();\n    });\n  });\n}\n\nlet SpeedMap = {};\n\nfunction getNodeSpeedMap() {\n  SpeedData.map((val, index) => {\n    SpeedMap[pathlist[index]] = val;\n  });\n}\n\nlet point_speed = {};\n\nfunction getPointSpeed(point_id) {\n  return new Promise(resolve => {\n    if (!point_speed.hasOwnProperty(point_id)) {\n      d3.json('http://10.72.100.14:8888/data/pointspeed/' + point_id).then(data => {\n        point_speed[point_id] = data;\n        resolve();\n      });\n    } else resolve();\n  });\n}\n\nlet Real_match_map = {};\n\nfunction getMatchMap() {\n  return new Promise(resolve => {\n    d3.json('http://127.0.0.1:8888/match_map').then(data => {\n      Object.keys(data).forEach(d => {\n        Real_match_map[d] = data[d];\n      });\n    });\n  });\n} //获取Beijing的所有道路信息\n\n\nlet Beijingdata = [];\n\nfunction getBeiJingData() {\n  Beijingdata = [];\n  return new Promise(resolve => {\n    d3.json('http://127.0.0.1:8888/road_data').then(data => {\n      // console.log(data)\n      data.forEach(d => {\n        if (Real_match_map.hasOwnProperty(d['link_id'])) {\n          // console.log('real_match',Real_match_map);\n          Beijingdata.push({\n            'name': d['link_id'],\n            'coordinates': [parseFloat(Real_match_map[d['link_id']][0]), parseFloat(Real_match_map[d['link_id']][1])],\n            'value': SpeedMap[d['link_id']]\n          });\n        } else Beijingdata.push({\n          'name': d['link_id'],\n          'coordinates': [parseFloat(d['node_lng']) - 0.00622, parseFloat(d['node_lat']) - 0.00142],\n          'value': SpeedMap[d['link_id']]\n        });\n      });\n      resolve();\n    });\n  });\n} //\n\n\nlet pos_map = {};\n\nfunction getposmap() {\n  return new Promise(resolve => {\n    d3.json('http://127.0.0.1:8888/pos_map').then(data => {\n      Object.keys(data).forEach(key => {\n        let point = [];\n        point.push(parseFloat(data[key][0]) - 0.00622);\n        point.push(parseFloat(data[key][1]) - 0.00142);\n        pos_map[key] = point;\n      });\n      resolve();\n    });\n  });\n}\n\nlet neighbordata = [];\n\nfunction getneighbor() {\n  return new Promise(resolve => {\n    d3.json('http://127.0.0.1:8888/path_data').then(data => {\n      data.forEach(d => {\n        let path = [];\n        d.forEach(dd => {\n          path.push(pos_map[dd]);\n        });\n        neighbordata.push({\n          path: path\n        });\n      });\n      console.log('neighbor', neighbordata);\n      resolve();\n    });\n  });\n}\n\nlet Grid = [];\n\nfunction QuardBound(node) {\n  if (node) {\n    Grid.push({\n      contour: [[parseFloat(node['bound'][0][0]), parseFloat(node['bound'][0][1])], [parseFloat(node['bound'][0][0]), parseFloat(node['bound'][1][1])], [parseFloat(node['bound'][1][0]), parseFloat(node['bound'][1][1])], [parseFloat(node['bound'][1][0]), parseFloat(node['bound'][0][1])]]\n    });\n    QuardBound(node['LU']);\n    QuardBound(node['RU']);\n    QuardBound(node['LD']);\n    QuardBound(node['RD']);\n  }\n}\n\n_c3 = QuardBound;\n\nfunction _formatTime(t) {\n  return `2017年${4 + Math.floor(t / 43200)}月${Math.floor((t - Math.floor(t / 43200) * 43200) / 1440)}日${Math.floor(t % 1440 / 60)}时${Math.floor(t % 60)}分`; // return `${Math.floor(t%60)}.${Math.floor((t%1440)/60)}.${Math.floor((t-Math.floor((t/43200))*43200)/1440)}.${4+Math.floor(t/43200)}.2017`\n}\n\nfunction _formatDayTime(t) {\n  //月，日，时\n  return `${4 + Math.floor(t / 43200)}:${Math.floor((t - Math.floor(t / 43200) * 43200) / 1440)}:${Math.floor(t % 1440 / 60) % 24}:${Math.floor(t % 60)}`;\n}\n\nlet predict_origin = new Map();\nlet predict_des = new Map(); //获取预测流量数据\n\nfunction getPredictData() {\n  return new Promise(resolve => {\n    d3.csv('./Traffic_Predict_Data/prediction1-origin.csv').then(d => {\n      d.map((x, index) => {\n        // console.log('time',x.DepTime);\n        let date = new Date(x.DepTime); // console.log('hour',date.getHours())\n\n        let hour = date.getHours();\n\n        if (!predict_origin.has(hour)) {\n          predict_origin.set(hour, {});\n        }\n\n        let tmp = predict_origin.get(hour);\n        tmp[x.Origin] = x.Trips;\n      });\n      d3.csv('./Traffic_Predict_Data/prediction2-dep.csv').then(d => {\n        d.map((x, index) => {\n          let date = new Date(x.DepTime); // console.log('hour',date.getHours())\n\n          let hour = date.getHours();\n\n          if (!predict_des.has(hour)) {\n            predict_des.set(hour, {});\n          }\n\n          let tmp = predict_des.get(hour);\n          tmp[x.Destination] = x.Trips;\n        });\n        resolve();\n      });\n    });\n  });\n}\n\nlet realOrg = new Map();\nlet realDes = new Map(); //获取真实流量数据\n\nfunction getRealData() {\n  d3.csv('./Traffic_Predict_Data/origin.csv').then(d => {\n    d.map((x, index) => {\n      // console.log('time',x.DepTime);\n      let date = new Date(x.DepTime); // console.log('hour',date.getHours())\n\n      let hour = date.getHours();\n\n      if (!realOrg.has(hour)) {\n        realOrg.set(hour, {});\n      }\n\n      let tmp = realOrg.get(hour);\n      tmp[x.Origin] = x.Trips;\n    });\n    d3.csv('./Traffic_Predict_Data/destination.csv').then(d => {\n      d.map((x, index) => {\n        let date = new Date(x.DepTime); // console.log('hour',date.getHours())\n\n        let hour = date.getHours();\n\n        if (!realDes.has(hour)) {\n          realDes.set(hour, {});\n        }\n\n        let tmp = realDes.get(hour);\n        tmp[x.Destination] = x.Trips;\n      });\n    });\n  });\n}\n\nlet blockRoute = [];\nlet count = [];\nlet blockData = new Map();\n\nfunction getBlockData() {\n  d3.csv('./blockdetect/anomalyFile.csv').then(d => {\n    d.map(x => {\n      console.log(x);\n      console.log(x['occurencingTime']);\n      let da = new Date(x['occurencingTime']);\n      console.log('da', da);\n      let h = da.getHours();\n      let m = da.getMinutes();\n      let s = da.getSeconds();\n      let t = h * 3600 + m * 60 + s;\n      blockData.set(t, [parseFloat(x['longitude']), parseFloat(x['latitude'])]);\n    });\n    console.log(blockData);\n  });\n}\n\nfunction getBlockRoute() {\n  return new Promise(resolve => {\n    d3.csv('./blockdetect/GPS_588_merge.csv').then(d => {\n      console.log(d);\n      let path = [];\n      let timestamps = [];\n      let m = 0;\n      d.map((x, index) => {\n        // console.log('x',x);\n        // console.log('lat',x.lat)\n        let da = new Date(x['date']);\n        let h = da.getHours();\n        let m = da.getMinutes();\n        let s = da.getSeconds();\n        let t = h * 3600 + m * 60 + s;\n\n        if (count.indexOf(t) === -1 && m % 5 === 0) {\n          m++;\n          count.push(t);\n          timestamps.push(t);\n          path.push([parseFloat(x['Long']), parseFloat(x['Lat'])]);\n\n          if (m % 1 === 0) {\n            blockData.set(t, [parseFloat(x['Long']), parseFloat(x['Lat'])]);\n          }\n        }\n      });\n      blockRoute.push({\n        path: path,\n        timestamps: timestamps,\n        color: 0\n      });\n      resolve();\n    });\n  });\n} //设置预测流量数据\n\n\nfunction setPredictData(hour) {\n  console.log('org', predict_origin);\n  let data = [];\n  let tmp = predict_origin.get(parseInt(hour));\n  console.log('tmp', tmp);\n\n  for (let key in tmp) {\n    // console.log('key',key)\n    data.push({\n      centroid: depCenter[parseInt(key)],\n      value: tmp[key]\n    });\n  }\n\n  return data;\n} //设置实际流量数据\n\n\nfunction setRealData(hour) {\n  // console.log('org',predict_origin)\n  let data = [];\n  let tmp = realOrg.get(parseInt(hour));\n  console.log('tmp', tmp);\n\n  for (let key in tmp) {\n    // console.log('key',key)\n    data.push({\n      centroid: depCenter[parseInt(key)],\n      value: tmp[key]\n    });\n  }\n\n  console.log('data', data);\n  return data;\n} // getRoute.then(function () {\n//     console.log('get')\n// });\n\n\nlet tmpIcon = []; //nebula 尝试\n\nconst features = {\n  type: 'FeatureCollection',\n  features: []\n};\nconst selectedFeatureIndexes = []; //记录折线图的总时长\n\nlet time_interval = 100; //两天的时长\n\nlet heatmap_interval = 672; //七天的数据\n\nlet area_interval = 48; //一天的时长\n//河流图\n//获取请求数据\n\nlet queryData = [];\n\nfunction getQueryData(time) {\n  return new Promise(resolve => {\n    d3.json('http://10.72.100.14:8888/query/' + time).then(d => {\n      d.forEach(dd => {\n        queryData.push({\n          inbound: 72,\n          outbound: 74,\n          from: {\n            coordinates: [parseFloat(dd[3]), parseFloat(dd[4])]\n          },\n          to: {\n            coordinates: [parseFloat(dd[5]), parseFloat(dd[6])]\n          }\n        });\n      });\n      resolve();\n    });\n  });\n} //\n\n\nlet newDayquery = [];\n\nfunction getQueryDataforArea(time) {\n  return new Promise(resolve => {\n    d3.json('http://10.72.100.14:8888/query/' + time / 15).then(d => {\n      d.forEach(dd => {\n        let s = _formatDayTime(time);\n\n        let ss = s.split(':');\n        newDayquery.push({\n          time: ss[2],\n          from: {\n            coordinates: [parseFloat(dd[3]), parseFloat(dd[4])]\n          },\n          to: {\n            coordinates: [parseFloat(dd[5]), parseFloat(dd[6])]\n          }\n        }); //是小时\n      });\n      resolve();\n    });\n  });\n}\n\nlet onepathdata = [];\n\nfunction getOnePath(start, end) {\n  return new Promise(resolve => {\n    let urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + \"pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJja21haDcxY3Axcmg2MnhrbmZqdHVraXlrIn0.5Yy3Rgb1I1vohpAjeMKUVw\";\n    d3.json(urlNow).then(d => {\n      onepathdata.push({\n        path: d.routes[0].geometry.coordinates,\n        color: \"f88c24\"\n      });\n      console.log('Onepathdata:', onepathdata);\n      resolve();\n    });\n  });\n}\n\nfunction getDrivePath(start, end) {\n  return new Promise(resolve => {\n    let urlDrive = 'https://api.mapbox.com/directions/v5/mapbox/driving/' + start[0] + ',' + start[1] + ';' + end[0] + ',' + end[1] + '?steps=true&geometries=geojson&access_token=' + \"pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJja21haDcxY3Axcmg2MnhrbmZqdHVraXlrIn0.5Yy3Rgb1I1vohpAjeMKUVw\";\n    d3.json(urlDrive).then(d => {\n      onepathdata.push({\n        path: d.routes[0].geometry.coordinates,\n        color: '1ca9e6'\n      });\n      console.log('Onepathdata:', onepathdata);\n      resolve();\n    });\n  });\n}\n\nexport default class RouteMap extends Component {\n  constructor(props) {\n    super(props); // const [value, setValue] = React.useState([0]);\n\n    this.state = {\n      time: 54000,\n      hour: -1,\n      depV: false,\n      desV: false,\n      area: [],\n      options: [],\n      block: false,\n      pre_org: [],\n      pre_des: [],\n      real_org: [],\n      real: false,\n      showPredict: true,\n      blockIcon: [],\n      showRoute: true,\n      modeId: null,\n      modeHandler: null,\n      //editlayer 数据\n      features: features,\n      modeConfig: {},\n      mode: DrawPolygonMode,\n      ODTag: 3,\n      Beijing: [],\n      selectedFeatureIndexes: [],\n      //\n      BeijingSpeedData: [],\n      Quater: -1,\n      //记录在一个多边形内的点，二维数组\n      inPoints: [],\n      //记录点的速度\n      pointData: [],\n      //让表格只渲染一次\n      showTag: 0,\n      piedata: [],\n      //区域内速度点河流图数据\n      streamData: [],\n      avarageData: [],\n      match_data: [],\n      Grid: [],\n      ToolTag: 0,\n      heatdata: [],\n      arcData: [],\n      querySearchData: [],\n      raidData: [],\n      A2BAreaData: [],\n      onePath: [],\n      moduleTag: 0\n    };\n  }\n\n  componentDidMount() {\n    getArea();\n    let p = getPredictData();\n    p.then(function () {// this.setState({\n      //     pre_origin: predict_origin,\n      //     pre_des : predict_des\n      // })\n    }.bind(this));\n    getRealData();\n    let p2 = getBlockRoute();\n    p2.then(function () {\n      console.log('blockRoute', blockRoute);\n      this.setState({\n        blockRoute: blockRoute\n      });\n    }.bind(this));\n    let button = document.getElementById('start');\n    console.log(button); // setTimeout(()=>{button.click()},1200);\n\n    let p4 = getBeijingSpeed(1800);\n    let p_getMatchmap = getMatchMap();\n    p_getMatchmap.then(function () {\n      p4.then(function () {\n        let p5 = getPathlist();\n        p5.then(function () {\n          getNodeSpeedMap();\n          let p3 = getBeiJingData();\n          p3.then(function () {\n            // console.log('beijing',Beijingdata);\n            this.setState({\n              BeijingSpeedData: Beijingdata\n            });\n            let pp = getpie();\n            pp.then(function () {\n              this.setState({\n                piedata: piedata\n              }); // let pie = new Pie('pie', {\n              //     appendPadding: 10,\n              //     data: this.state.piedata,\n              //     angleField: 'value',\n              //     colorField: 'type',\n              //     radius: 1,\n              //     innerRadius: 0.64,\n              //\n              //     label: {\n              //         type: 'inner',\n              //         offset: '-50%',\n              //         autoRotate: false,\n              //         style: { textAlign: 'center' },\n              //         formatter: ({ percent }) => `${(percent * 100).toFixed(0)}%`,\n              //     },\n              //     statistic: {\n              //         title: {\n              //             offsetY: -8,\n              //         },\n              //         content: {\n              //             offsetY: -4,\n              //         },\n              //     },\n              // });\n              // pie.render();\n            }.bind(this));\n          }.bind(this));\n        }.bind(this));\n      }.bind(this));\n    });\n    let p_match = getMatchdata();\n    p_match.then(function () {\n      this.setState({\n        match_data: match_points\n      });\n    }.bind(this));\n    let p_Quard = getQuardTree();\n    p_Quard.then(function () {\n      console.log('quardTrue', quardTree);\n      QuardBound(quardTree);\n      this.setState({\n        Grid: Grid\n      });\n    }.bind(this));\n    let time = this.state.time;\n    let promiseG = [];\n\n    for (let i = -area_interval; i < area_interval; i++) {\n      if (time + i * 15 >= 0 && time + i * 15 < 87840) {\n        //\n        // console.log('speed:',Math.floor((time+i*15)/15));\n        promiseG.push(getQueryDataforArea(time + i * 15));\n      }\n    }\n\n    Promise.all(promiseG).then(function () {\n      this.setState({\n        querySearchData: newDayquery\n      });\n    }.bind(this));\n    let p_getPath = getOnePath([116.44392013549806, 39.912205075917015], [116.47885322570801, 39.93280820087599]);\n    let p_getDrive = getDrivePath([116.44392013549806, 39.912205075917015], [116.47885322570801, 39.93280820087599]);\n    Promise.all([p_getPath, p_getDrive]).then(function () {\n      this.setState({\n        onePath: onepathdata\n      });\n    }.bind(this));\n  } // const editlayer=new EditableGeoJsonLayer({\n  //     id: 'editlayer',\n  //     data: this.state.features,\n  //     mode: this.state.mode,\n  //     selectedFeatureIndexes,\n  //     onEdit: ({ updatedData }) => {\n  //         this.setState({\n  //             data: updatedData,\n  //         });\n  //     }\n  // });\n  // getBlockData();\n  // this.setState({\n  //     depPolygon:depPolygon,\n  //     desPolygon:desPolygon\n  // })\n\n\n  componentWillUnmount() {// if (this._animationFrame) {\n    //     window.cancelAnimationFrame(this._animationFrame);\n    // }\n  } //get route from mapbox\n\n\n  getRoute() {\n    d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\n      let re = /([-+]?[0-9]*\\.?[0-9]+)/g;\n      console.log('data1:', data);\n      data.forEach(d => {\n        let tmp = d.value.match(re);\n        let tmpData = [];\n\n        for (let i = 0; i < tmp.length - 1; i += 2) {\n          tmpData.push([parseFloat(tmp[i + 1]), parseFloat(tmp[i])]);\n        }\n\n        depData.push(tmpData);\n      });\n      depData.forEach(d => {\n        let sumlong = 0;\n        let sumlat = 0;\n        d.forEach(data => {\n          sumlong += data[0];\n          sumlat += data[1];\n        });\n        depCenter.push([sumlong / d.length, sumlat / d.length]);\n      });\n      d3.csv(\"./edge_des_csv.csv\").then(function (data) {\n        let re = /([-+]?[0-9]*\\.?[0-9]+)/g;\n        console.log('data2:', data);\n        data.forEach(d => {\n          let tmp = d.value.match(re);\n          let tmpData = [];\n\n          for (let i = 0; i < tmp.length - 1; i += 2) {\n            tmpData.push([parseFloat(tmp[i + 1]), parseFloat(tmp[i])]);\n          }\n\n          desData.push(tmpData);\n        });\n        desData.forEach(d => {\n          let sumlong = 0;\n          let sumlat = 0;\n          d.forEach(data => {\n            sumlong += data[0];\n            sumlat += data[1];\n          });\n          desCenter.push([sumlong / d.length, sumlat / d.length]);\n        }); // d3.json('http://localhost:5000/data/12:00:00').then(function(data){\n        //     data.forEach(d=>{\n        //         var tmp=d.split(',');\n        //         if(tmp[0]!=-1 && tmp[1]!=-1) {\n        //             if(tmp[0]>46&&tmp[0]<=60){\n        //              //   if (tmp[2] !== '0') {\n        //                 var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n        //                 gets.push($.ajax({\n        //                     type: 'GET',\n        //                     url: urlNow,\n        //                     success: function (r) {\n        //                         console.log('r:', r)\n        //                         //var json = JSON.parse(data);\n        //                         var plan = r.routes[0];\n        //                         var route = plan.geometry.coordinates;\n        //                         var timestamps = [0];//先设置每条路径1000stamp\n        //                         for (var i = 0; i < route.length; i++) {\n        //                             if (i !== 0) {\n        //                                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n        //                                 timestamps.push(dist + timestamps[i - 1])\n        //                             }\n        //                         }\n        //                         var geojson = {\n        //                             'vendor': 1,\n        //                             'path': route,\n        //                             'timestamps': timestamps,\n        //\n        //                         };\n        //                         console.log(geojson)\n        //                         Routes.push(geojson)\n        //                         saveJson[tmp[0]+','+tmp[1]] = geojson\n        //                     },\n        //                     error:function(){\n        //                         console.log('err')\n        //                     }\n        //                 }));\n        //\n        //            // }\n        //             }\n        //         }\n        //     })\n        //     // url.forEach(function(value) {\n        //     //     console.log('url:',value)\n        //     //     gets.push($.ajax({\n        //     //         type: 'GET',\n        //     //         url: value,\n        //     //         success: function(data) {\n        //     //             console.log('data:',data)\n        //     //             //var json = JSON.parse(data);\n        //     //             var plan = data.routes[0];\n        //     //             var route = plan.geometry.coordinates;\n        //     //             var timestamps=[0];//先设置每条路径1000stamp\n        //     //             for(var i=0;i<route.length;i++){\n        //     //                 if(i!==0){\n        //     //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n        //     //                     timestamps.push(dist+timestamps[i-1])\n        //     //                 }\n        //     //             }\n        //     //             var geojson = {\n        //     //                 'vendor':1,\n        //     //                 'path': route,\n        //     //                 'timestamps':timestamps,\n        //     //\n        //     //             };\n        //     //             console.log(geojson)\n        //     //             Routes.push(geojson)\n        //     //\n        //     //\n        //     //         }\n        //     //     }));\n        //     // });\n        //\n        //     $.when.apply($, gets).then(function() {\n        //         console.log(saveJson)\n        //         var jsonData=JSON.stringify(saveJson)\n        //         download(jsonData,'route.json','text/plain')\n        //         console.log('Routes:',Routes)\n        //         resolve(Routes);\n        //         // resolve([\n        //         //     {\n        //         //         \"vendor\": 1,\n        //         //         \"path\": [\n        //         //             [120.167057,30.185901],\n        //         //             [120.165752,30.185723],\n        //         //             [120.16581,30.188491],\n        //         //             [120.190417,30.198224],\n        //         //             [120.191971\t,30.204],\n        //         //             [120.189622\t,30.20767],\n        //         //             [120.182369\t,30.218973],\n        //         //             [120.180889\t,30.222601],\n        //         //             [120.200108\t,30.306856],\n        //         //             [120.23477\t,30.311914],\n        //         //             [120.246959\t,30.316748],\n        //         //             [120.309708\t,30.387518],\n        //         //             [120.312426\t,30.39154],\n        //         //             [120.309069\t,30.400897],\n        //         //             [120.302548\t,30.399632],],\n        //         //\n        //         //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n        //         //     }])\n        //     });\n        // })\n\n        d3.json('http://localhost:5000/data/0:00:00').then(function (data) {\n          var count = 0;\n          d3.json('./10.json').then(function (map) {\n            // console.log('map:',map)\n            data.forEach(d => {\n              var tmp = d.split(',');\n\n              if (tmp[0] != -1 && tmp[1] != -1) {\n                if (parseInt(tmp[2]) >= 5) {\n                  count++;\n                  var key = tmp[0] + ',' + tmp[1];\n                  console.log(map[key]);\n                  Routes.push(map[key]);\n                } // if(tmp[0]>40&&tmp[0]<=60&&tmp[1]>40&&tmp[1]<=60){\n                //   if (tmp[2] !== '0') {\n                // var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n                // gets.push($.ajax({\n                //     type: 'GET',\n                //     url: urlNow,\n                //     success: function (r) {\n                //         console.log('r:', r)\n                //         //var json = JSON.parse(data);\n                //         var plan = r.routes[0];\n                //         var route = plan.geometry.coordinates;\n                //         var timestamps = [0];//先设置每条路径1000stamp\n                //         for (var i = 0; i < route.length; i++) {\n                //             if (i !== 0) {\n                //                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n                //                 timestamps.push(dist + timestamps[i - 1])\n                //             }\n                //         }\n                //         var geojson = {\n                //             'vendor': 1,\n                //             'path': route,\n                //             'timestamps': timestamps,\n                //\n                //         };\n                //         console.log(geojson)\n                //         Routes.push(geojson)\n                //         saveJson[tmp[0]+','+tmp[1]] = geojson\n                //     },\n                //     error:function(){\n                //         console.log('err')\n                //     }\n                // }));\n                // }\n                // }\n\n              }\n            });\n            console.log('count:', count);\n            this.layers[1].setData(Routes); // resolve(Routes);\n            // console.log(Routes)\n          }); // url.forEach(function(value) {\n          //     console.log('url:',value)\n          //     gets.push($.ajax({\n          //         type: 'GET',\n          //         url: value,\n          //         success: function(data) {\n          //             console.log('data:',data)\n          //             //var json = JSON.parse(data);\n          //             var plan = data.routes[0];\n          //             var route = plan.geometry.coordinates;\n          //             var timestamps=[0];//先设置每条路径1000stamp\n          //             for(var i=0;i<route.length;i++){\n          //                 if(i!==0){\n          //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n          //                     timestamps.push(dist+timestamps[i-1])\n          //                 }\n          //             }\n          //             var geojson = {\n          //                 'vendor':1,\n          //                 'path': route,\n          //                 'timestamps':timestamps,\n          //\n          //             };\n          //             console.log(geojson)\n          //             Routes.push(geojson)\n          //\n          //\n          //         }\n          //     }));\n          // });\n          // $.when.apply($, gets).then(function() {\n          //     console.log(saveJson)\n          //     var jsonData=JSON.stringify(saveJson)\n          //     download(jsonData,'route.json','text/plain')\n          //     console.log('Routes:',Routes)\n          //     resolve(Routes);\n          //     // resolve([\n          //     //     {\n          //     //         \"vendor\": 1,\n          //     //         \"path\": [\n          //     //             [120.167057,30.185901],\n          //     //             [120.165752,30.185723],\n          //     //             [120.16581,30.188491],\n          //     //             [120.190417,30.198224],\n          //     //             [120.191971\t,30.204],\n          //     //             [120.189622\t,30.20767],\n          //     //             [120.182369\t,30.218973],\n          //     //             [120.180889\t,30.222601],\n          //     //             [120.200108\t,30.306856],\n          //     //             [120.23477\t,30.311914],\n          //     //             [120.246959\t,30.316748],\n          //     //             [120.309708\t,30.387518],\n          //     //             [120.312426\t,30.39154],\n          //     //             [120.309069\t,30.400897],\n          //     //             [120.302548\t,30.399632],],\n          //     //\n          //     //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n          //     //     }])\n          // });\n        });\n      });\n    });\n  } //routeTip\n  //     _renderTooltip() {\n  //         const {hoveredObject, pointerX, pointerY} = this.state || {};\n  //         return hoveredObject && (\n  //             <div className=\"tooltip\" style={{color:'#ffffff',position: 'absolute', zIndex: 1, pointerEvents: 'none', left: pointerX, top: pointerY}}>\n  //                 <div>\n  //                     <b>O-D: </b>\n  //                     <span>{hoveredObject.od}</span>\n  //                 </div>\n  //                 <div>\n  //                     <b>Traffic: </b>\n  //                     <span>{hoveredObject.traffic}</span>\n  //                 </div>\n  //\n  //             </div>\n  //\n  //         );\n  //     }\n  //areaTipDep\n\n\n  _renderTooltipDep() {\n    const {\n      depObject,\n      depX,\n      depY\n    } = this.state || {};\n    return depObject && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tooltip\",\n      style: {\n        color: '#00ffff',\n        position: 'absolute',\n        zIndex: 1,\n        pointerEvents: 'none',\n        left: depX,\n        top: depY\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"\\u533A\\u57DF id: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1849,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: depObject.number\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1850,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1848,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"\\u9A76\\u51FA\\u6D41\\u91CF: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1853,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: depObject.out\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1854,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1852,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1847,\n      columnNumber: 13\n    }, this);\n  } //areaTipDes\n\n\n  _renderTooltipDes() {\n    const {\n      desObject,\n      desX,\n      desY\n    } = this.state || {};\n    return desObject && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tooltip\",\n      style: {\n        color: '#00ffff',\n        position: 'absolute',\n        zIndex: 1,\n        pointerEvents: 'none',\n        left: desX,\n        top: desY\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"\\u533A\\u57DF: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1865,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: desObject.number\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1866,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1864,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"\\u9A76\\u5165\\u6D41\\u91CF: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1870,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: desObject.in\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1871,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1869,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1863,\n      columnNumber: 13\n    }, this);\n  } // _renderDrawSelectBar=()=>{\n  //     return (\n  //         {/*<div*/}\n  //         {/*    style={{ position: \"absolute\", top: 0, right: 0, maxWidth: \"320px\" }}*/}\n  //         {/*>*/}\n  //         {/*    <select onChange={this._switchMode}>*/}\n  //         {/*        <option value=\"\">--Please choose a draw mode--</option>*/}\n  //         {/*        {MODES.map((mode) => (*/}\n  //         {/*            <option key={mode.id} value={mode.id}>*/}\n  //         {/*                {mode.text}*/}\n  //         {/*            </option>*/}\n  //         {/*        ))}*/}\n  //         {/*    </select>*/}\n  //         {/*</div>*/}\n  //     );\n  // };\n\n\n  _getPredictData() {\n    if (this.state.showPredict) {\n      return this.state.real ? this.state.real_org : this.state.pre_org;\n    } else return [{\n      centroid: [0, 0],\n      value: [0, 0]\n    }];\n  } // _switchMode = (evt) => {\n  //     const modeId =\n  //         evt.target.value === this.state.modeId ? null : evt.target.value;\n  //     const mode = MODES.find((m) => m.id === modeId);\n  //     const modeHandler = mode ? new mode.handler() : null;\n  //     this.setState({ modeId, modeHandler });\n  // };\n  //转换字符串\n\n\n  _hex2rgb(hex) {\n    const value = parseInt(hex, 16);\n    return [16, 8, 0].map(shift => (value >> shift & 0xff) / 255);\n  }\n\n  _getDeckColorForFeature(str, bright, alpha) {\n    let s = this._hex2rgb(str);\n\n    console.log('str', s);\n    const color = s.map(c => c * bright * 255);\n    return [...color, alpha * 255];\n  }\n\n  _renderLayers() {\n    const {\n      // buildings = DATA_URL.BUILDINGS,\n      trailLength = 120,\n      theme = DEFAULT_THEME // TripsLayer=new TripsLayer({\n      //     id: 'trips',\n      //     //data: trips,\n      //     // data:[\n      //     //     {\n      //     //         \"vendor\": 1,\n      //     //         \"path\": [\n      //     //             [120.167057,30.185901],\n      //     //             [120.165752,30.185723],\n      //     //             [120.16581,30.188491],\n      //     //             [120.190417,30.198224],\n      //     //             [120.191971\t,30.204],\n      //     //             [120.189622\t,30.20767],\n      //     //             [120.182369\t,30.218973],\n      //     //             [120.180889\t,30.222601],\n      //     //             [120.200108\t,30.306856],\n      //     //             [120.23477\t,30.311914],\n      //     //             [120.246959\t,30.316748],\n      //     //             [120.309708\t,30.387518],\n      //     //             [120.312426\t,30.39154],\n      //     //             [120.309069\t,30.400897],\n      //     //             [120.302548\t,30.399632],],\n      //     //\n      //     //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n      //     //     }],\n      //     data:Routes,\n      //     getPath: d => d.path,\n      //     getTimestamps: d => d.timestamps,\n      //     getColor: d => (d.vendor === 0 ? theme.trailColor0 : theme.trailColor1),\n      //     opacity: 0.3,\n      //     widthMinPixels: 2,\n      //     rounded: true,\n      //     trailLength,\n      //     currentTime: this.state.time,\n      //\n      //     shadowEnabled: false\n      // }),\n\n    } = this.props;\n    const layers = [// new ScatterplotLayer({\n    //     id: 'Beijing',\n    //     data: this.state.Beijing,\n    //     pickable: true,\n    //     opacity: 0.8,\n    //     stroked: true,\n    //     filled: true,\n    //     radiusScale: 1,\n    //     radiusMinPixels: 1,\n    //     radiusMaxPixels: 10,\n    //     lineWidthMinPixels: 0.1,\n    //     getPosition: d =>{ return d['coordinates']} ,\n    //     getRadius: d => 10,\n    //     getFillColor: d => [255, 140, 0],\n    //     getLineColor: d => [0, 0, 0]\n    // }),\n    // new PolygonLayer({\n    //     id:'Grid-layer',\n    //     data:this.state.Grid,\n    //     pickable: true,\n    //     stroked: true,\n    //     filled: false,\n    //     wireframe: true,\n    //     lineWidthMinPixels: 1,\n    //     getPolygon: d => {\n    //\n    //         return d.contour},\n    //     getLineColor: [80, 80, 80],\n    //     getLineWidth: 2,\n    // }),\n    new PathLayer({\n      id: 'path-layer',\n      data: this.state.onePath,\n      pickable: true,\n      widthScale: 30,\n      widthMinPixels: 2,\n      getPath: d => {\n        return d.path;\n      },\n      getColor: d => this._getDeckColorForFeature(d.color, 1, 0.8),\n      getWidth: d => 1\n    }), new ColumnLayer({\n      id: 'Speed-layer',\n      data: this.state.BeijingSpeedData,\n      // data: this.state.match_data,\n      diskResolution: 12,\n      radius: 10,\n      // extruded: true,\n      extruded: false,\n      pickable: true,\n      stroked: true,\n      elevationScale: 3,\n      getLineWidth: 0.5,\n      getPosition: d => d.coordinates,\n      getFillColor: d => {\n        if (!d.value) {\n          return [255, 255, 255, 0];\n        } else if (parseInt(d.value) < 20) return colorRange[1];else if (parseInt(d.value) < 30 && parseInt(d.value) >= 20) return colorRange[2];else if (parseInt(d.value) >= 30 && parseInt(d.value) < 40) return colorRange[3];else if (parseInt(d.value) >= 40 && parseInt(d.value) < 50) return colorRange[4];else if (parseInt(d.value) >= 50) return colorRange[5];else return colorRange[0]; // if (d .value/10<= 5) {\n        //     return colorRange[d.value/10]\n        // } else {\n        //     return colorRange[5]\n        // }\n\n      },\n      getLineColor: d => {\n        if (!d.value) return [0, 0, 0, 0];else return [0, 0, 0];\n      },\n      getElevation: d => {\n        // if(!d.value)return 0.05;\n        // else{\n        if (!d.value) {\n          return 0;\n        } else if (parseInt(d.value) < 20) return d.value * 70 * 0.14 / 20;else if (parseInt(d.value) < 30 && parseInt(d.value) >= 20) return 9.8 + (d.value - 20) * 70 * 0.41 / 10;else if (parseInt(d.value) >= 30 && parseInt(d.value) < 40) return 38.5 + (d.value - 30) * 70 * 0.33 / 10;else if (parseInt(d.value) >= 40 && parseInt(d.value) < 50) return 61.6 + (d.value - 40) * 70 * 0.11 / 10;else if (parseInt(d.value) >= 50) return d.value + 20; // }\n\n      },\n      onHover: d => {\n        // 该点的一段时间内的数据\n        // this.setState({\n        //     lineData:\n        // })\n        // debugger\n        if (d.hasOwnProperty('object')) {\n          console.log(d.object['name']);\n        }\n\n        if (d.hasOwnProperty('object') && this.state.showTag === 0 && this.state.pointData.length === 0) {\n          if (SpeedMap.hasOwnProperty(d)) {\n            //SpeedMap 里面有速度再取，这时候speedMap肯定有数值了\n            console.log('data:', d);\n            let p1 = getPointSpeed(d.object['name']);\n            p1.then(function () {\n              let pointData = [];\n              let time = this.state.time;\n\n              for (let i = -time_interval; i < time_interval; i++) {\n                if (time + i * 15 >= 0 && time + i * 15 < 87840) {\n                  console.log('speed:', Math.floor((time + i * 15) / 15));\n                  pointData.push({\n                    'speed': point_speed[d.object['name']][Math.floor((time + i * 15) / 15)],\n                    'time': _formatTime(Math.floor(time + i * 15))\n                  });\n                }\n              }\n\n              console.log('pointdata', pointData);\n              this.setState({\n                pointData: pointData\n              });\n              G2.registerShape('point', 'breath-point', {\n                draw(cfg, container) {\n                  const data = cfg.data;\n                  const point = {\n                    x: cfg.x,\n                    y: cfg.y\n                  };\n                  const group = container.addGroup();\n\n                  if (data['time'] === _formatTime(Math.floor(time))) {\n                    const decorator1 = group.addShape('circle', {\n                      attrs: {\n                        x: point.x,\n                        y: point.y,\n                        r: 10,\n                        fill: cfg.color,\n                        opacity: 0.5\n                      }\n                    });\n                    const decorator2 = group.addShape('circle', {\n                      attrs: {\n                        x: point.x,\n                        y: point.y,\n                        r: 10,\n                        fill: cfg.color,\n                        opacity: 0.5\n                      }\n                    });\n                    const decorator3 = group.addShape('circle', {\n                      attrs: {\n                        x: point.x,\n                        y: point.y,\n                        r: 10,\n                        fill: cfg.color,\n                        opacity: 0.5\n                      }\n                    });\n                    decorator1.animate({\n                      r: 20,\n                      opacity: 0\n                    }, {\n                      duration: 1800,\n                      easing: 'easeLinear',\n                      repeat: true\n                    });\n                    decorator2.animate({\n                      r: 20,\n                      opacity: 0\n                    }, {\n                      duration: 1800,\n                      easing: 'easeLinear',\n                      repeat: true,\n                      delay: 600\n                    });\n                    decorator3.animate({\n                      r: 20,\n                      opacity: 0\n                    }, {\n                      duration: 1800,\n                      easing: 'easeLinear',\n                      repeat: true,\n                      delay: 1200\n                    });\n                    group.addShape('circle', {\n                      attrs: {\n                        x: point.x,\n                        y: point.y,\n                        r: 6,\n                        fill: cfg.color,\n                        opacity: 0.7\n                      }\n                    });\n                    group.addShape('circle', {\n                      attrs: {\n                        x: point.x,\n                        y: point.y,\n                        r: 1.5,\n                        fill: cfg.color\n                      }\n                    });\n                  }\n\n                  return group;\n                }\n\n              }); // const line = new Line('line', {\n              //     data: this.state.pointData,\n              //     xField: 'time',\n              //     yField: 'speed',\n              //     tooltip: { showMarkers: false },\n              //     point: {\n              //         shape: 'breath-point',\n              //     },\n              //\n              // });\n              // line.render();\n            }.bind(this));\n          }\n        }\n      } // transitions: {\n      //     getElevation: {\n      //         duration: 3000,\n      //         // type: 'spring',\n      //         // stiffness: 0.01,\n      //         // damping: 0.15,\n      //         // easing: d3.easeCubicInOut,\n      //         enter: d => {\n      //             // console.log(d);\n      //             let tmp = [];\n      //             for (let i = 0; i < 300; i++) {\n      //                 tmp.push(d[0] * i / 300)\n      //             }\n      //             // console.log(tmp)\n      //             return tmp;\n      //         },\n      //     }\n      // },\n      // updateTriggers: {\n      //     getElevation: [this.state.pre_org,this.state.real_org],\n      // }\n\n    }) // new ColumnLayer({\n    //     id: 'OutpointLayer',\n    //     data: this.state.arcData,\n    //     // data: this.state.match_data,\n    //     diskResolution: 12,\n    //     radius: 10,\n    //     extruded: true,\n    //     // extruded: false,\n    //     pickable: true,\n    //     stroked:true,\n    //     elevationScale: 3,\n    //     getLineWidth:0.5,\n    //     material:false,\n    //     getPosition: d => d.from.coordinates,\n    //     getFillColor: d => {\n    //         // console.log('d:',d);\n    //         return [0,100,255]\n    //     },\n    //     getLineColor: d=>{\n    //\n    //         return [0,0,0];\n    //     },\n    //     getElevation: d =>{\n    //         return 20\n    //     },\n    //\n    //\n    // }),\n    // new ColumnLayer({\n    //     id: 'InpointLayer',\n    //     data: this.state.arcData,\n    //     // data: this.state.match_data,\n    //     diskResolution: 12,\n    //     radius: 10,\n    //     // extruded: true,\n    //     extruded: true,\n    //     pickable: true,\n    //     stroked:true,\n    //     elevationScale: 3,\n    //     getLineWidth:0.5,\n    //     material:false,\n    //     getPosition: d => d.to.coordinates,\n    //     getFillColor: d => {\n    //         console.log(this.state.arcData.length);\n    //         // console.log('d:',d);\n    //         return [255,130,71]\n    //     },\n    //     getLineColor: d=>{\n    //\n    //         return [0,0,0];\n    //     },\n    //     getElevation: d =>{\n    //         return 20\n    //     },\n    //\n    // }),\n    // new ArcLayer({\n    //     id:\"query\",\n    //     data:this.state.arcData,\n    //     pickable: true,\n    //     getWidth: 2,\n    //     greatCircle:true,\n    //     getHeight:d=>0.1,\n    //     getSourcePosition: d => d.from.coordinates,\n    //     getTargetPosition: d => d.to.coordinates,\n    //\n    //     getSourceColor: d =>[151,255,255],\n    //     getTargetColor: d =>[255,130,71],\n    // })\n    // new EditableGeoJsonLayer({\n    //\n    // }),\n    // new SelectionLayer({\n    //     id: 'selection',\n    //     selectionType: 'rectangle',\n    //     onSelect:({pickingInfos})=> {\n    //         console.log(pickingInfos);\n    //     },\n    //     layerIds:['trips'],\n    //     getTentativeFillColor: () => [255, 0, 255, 100],\n    //     getTentativeLineColor: () => [0, 0, 255, 255],\n    //     getTentativeLineDashArray: () => [0, 0],\n    //     lineWidthMinPixels: 3\n    // }),\n    //    new EditableGeoJsonLayer({\n    //        id: 'editlayer',\n    //        data: this.state.data,\n    //        mode: this.state.mode,\n    //        selectedFeatureIndexes,\n    //        onEdit: ({ updatedData }) => {\n    //            this.setState({\n    //                data: updatedData,\n    //         });\n    //     }\n    // }),\n    // new IconLayer({\n    //     id:'blockIcon',\n    //     data:this.state.blockIcon,\n    //     iconAtlas:'./warning.png',\n    //     iconMapping:ICON_MAPPING,\n    //     getIcon: d => 'marker',\n    //     sizeScale: 15,\n    //     getPosition: d => d.coordinates,\n    //     getColor:[255,255,0],\n    //     getSize: d => 5,\n    //\n    // }),\n    // new TripsLayer({\n    //     id:'blockRoute',\n    //     data:this.state.blockRoute,\n    //     getPath:d=>d.path,\n    //     getTimestamps: d => d.timestamps,\n    //     // getColor: d => colorTable[d.color],\n    //     getColor:[0,140,255,255],\n    //     opacity: 0.3,\n    //     widthMinPixels: 5,\n    //     rounded: true,\n    //     trailLength:1200,\n    //     currentTime: this.state.time,\n    //     shadowEnabled: false,\n    //     pickable:true,\n    //     visible:this.state.block\n    // }),\n    //\n    // new TripsLayer({\n    //     id: 'trips',\n    //     //data: trips,\n    //     // data:[\n    //     //     {\n    //     //         \"vendor\": 1,\n    //     //         \"path\": [\n    //     //             [120.167057,30.185901],\n    //     //             [120.165752,30.185723],\n    //     //             [120.16581,30.188491],\n    //     //             [120.190417,30.198224],\n    //     //             [120.191971\t,30.204],\n    //     //             [120.189622\t,30.20767],\n    //     //             [120.182369\t,30.218973],\n    //     //             [120.180889\t,30.222601],\n    //     //             [120.200108\t,30.306856],\n    //     //             [120.23477\t,30.311914],\n    //     //             [120.246959\t,30.316748],\n    //     //             [120.309708\t,30.387518],\n    //     //             [120.312426\t,30.39154],\n    //     //             [120.309069\t,30.400897],\n    //     //             [120.302548\t,30.399632],],\n    //     //\n    //     //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n    //     //     }],\n    //     // data:getRoute,\n    //     data:this.state.Route,\n    //     // updateTriggers:{\n    //     //   data:Routes\n    //     // },\n    //     getPath: d => d.path,\n    //     getTimestamps: d => d.timestamps,\n    //     getColor: d => colorTable[d.color],\n    //     // getColor:[0,255,255,255],\n    //     opacity: 0.3,\n    //     widthMinPixels: 10,\n    //     rounded: true,\n    //     trailLength,\n    //     currentTime: this.state.time,\n    //     shadowEnabled: false,\n    //     pickable:true,\n    //     visible:this.state.showRoute,\n    //     // onHover:info=>{\n    //     //     console.log(info)\n    //     // }\n    // }),\n    // new PolygonLayer({\n    //     id: 'dep_polygon',\n    //     data:this.state.depPolygon,\n    //     pickable: true,\n    //     stroked: true,\n    //     filled: true,\n    //     wireframe: true,\n    //     lineWidthMinPixels: 1,\n    //     getPolygon: d => d.contour,\n    //     // getElevation: d => d.population / d.area / 10,\n    //     getFillColor: d => [255, 255, 0,50],\n    //     getLineColor: [80, 80, 80],\n    //     getLineWidth: 1,\n    //     onHover: info=>this.setState({\n    //         depObject: info.object,\n    //         depX: info.x,\n    //         depY: info.y\n    //     }),\n    //     visible:this.state.depV\n    //     // onHover: info=>{\n    //     //     console.log(info)\n    //     // }\n    //\n    // }),\n    //\n    // new PolygonLayer({\n    //     id:'des_polygon',\n    //     data:this.state.desPolygon,\n    //     pickable: true,\n    //     stroked: true,\n    //     filled: true,\n    //     wireframe: true,\n    //     lineWidthMinPixels: 1,\n    //     getPolygon: d => d.contour,\n    //     // getElevation: d => d.population / d.area / 10,\n    //     getFillColor: d => [255, 0, 0,50],\n    //     getLineColor: [80, 80, 80],\n    //     getLineWidth: 1,\n    //     onHover: info=>this.setState({\n    //         desObject: info.object,\n    //         desX: info.x,\n    //         desY: info.y\n    //     }),\n    //     visible:this.state.desV\n    // }),\n    //\n    // new ColumnLayer({\n    //     id: 'predict-origin-layer',\n    //     data: this._getPredictData(),\n    //     diskResolution: 12,\n    //     radius: 100,\n    //     extruded: true,\n    //     pickable: true,\n    //     elevationScale: 5000,\n    //     getPosition: d => d.centroid,\n    //     getFillColor: d => {\n    //         let k = (Math.log(d.value) / Math.log(4)).toFixed(0);\n    //         if (k <= 5) {\n    //             return colorRange[k]\n    //         } else {\n    //             return colorRange[5]\n    //         }\n    //     },\n    //     getLineColor: [0, 0, 0],\n    //     getElevation: d =>parseInt(d.value)/100,\n    //     transitions: {\n    //         getElevation: {\n    //             duration: 3000,\n    //             // type: 'spring',\n    //             // stiffness: 0.01,\n    //             // damping: 0.15,\n    //             // easing: d3.easeCubicInOut,\n    //             enter: d => {\n    //                 // console.log(d);\n    //                 let tmp = [];\n    //                 for (let i = 0; i < 300; i++) {\n    //                     tmp.push(d[0] * i / 300)\n    //                 }\n    //                 // console.log(tmp)\n    //                 return tmp;\n    //             },\n    //         }\n    //     },\n    //     updateTriggers: {\n    //         getElevation: [this.state.pre_org,this.state.real_org],\n    //     }\n    // }),\n    // new PolygonLayer({\n    //     id: 'buildings',\n    //     data: buildings,\n    //     extruded: true,\n    //     wireframe: false,\n    //     opacity: 0.5,\n    //     getPolygon: f => f.polygon,\n    //     getElevation: f => f.height,\n    //     getFillColor: theme.buildingColor,\n    //     material: theme.material\n    // })\n    ];\n    return layers;\n  }\n\n  _formatLabel(t) {\n    return `2017年${4 + Math.floor(t / 43200)}月${Math.floor((t - Math.floor(t / 43200) * 43200) / 1440)}日${Math.floor(t % 1440 / 60)}时${Math.floor(t % 60)}分`;\n  }\n\n  _Icon(props) {\n    // @ts-ignore\n    return /*#__PURE__*/_jsxDEV(\"box-icon\", {\n      color: \"currentColor\",\n      ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 2501,\n      columnNumber: 16\n    }, this);\n  } // _getIncludePoints(){\n  //     //数据是什么样的？\n  //     this.state.features.\n  //\n  // }\n  //\n\n\n  Online(P1, P2, Q) {\n    let tempy1 = P1[1] - P2[1];\n    let tempx1 = P1[0] - P2[0];\n    let tempy2 = Q[1] - P1[1];\n    let tempx2 = Q[0] - P1[0];\n    let xp = tempy1 * tempx2;\n    let yp = tempy2 * tempx1;\n    if (Math.abs(xp - yp) <= 1e-6) return 1;else return 0;\n  }\n\n  _InPolygonScan(Q, Poly, n) {\n    // debugger\n    // console.log('Q',Q);\n    // console.log('Poly',Poly);\n    let count = 0;\n    let xinters = 0;\n    let P1 = Poly[0];\n\n    for (let i = 1; i <= n; i++) {\n      let P2 = Poly[i % n]; // if(this.Online(P1,P2,Q)) return 1;\n\n      if (Q[1] > Math.min(P1[1], P2[1]) && Q[1] <= Math.max(P1[1], P2[1])) {\n        if (Q[0] <= Math.max(P1[0], P2[0])) {\n          if (P1[1] !== P2[1]) {\n            xinters = (Q[1] - P1[1]) * (P2[0] - P1[0]) / (P2[1] - P1[1]) + P1[0];\n            if (P1[0] === P2[0] || Q[0] <= xinters) count++; //符合要求\n          }\n        }\n      }\n\n      P1 = P2;\n    }\n\n    if (count % 2 === 0) return 0;\n    return 1;\n  }\n\n  render() {\n    const {\n      viewState,\n      // mapStyle = 'https://basemaps.cartocdn.com/gl/dark-matter-nolabels-gl-style/style.json',\n      mapStyle = 'mapbox://styles/mapbox/light-v10',\n      // mapStyle ='mapbox://styles/mapbox/dark-v10',\n      theme = DEFAULT_THEME\n    } = this.props;\n    const layer = new EditableGeoJsonLayer({\n      // id: \"geojson-layer\",\n      id: 'editlayer',\n      data: this.state.features,\n      //数据格式\n      // [\n      // {},\n      // {}\n      //]\n      mode: this.state.mode,\n      selectedFeatureIndexes: this.state.selectedFeatureIndexes,\n      //selectedFeaturesIndexes 地图上说有画的东西\n      getFillColor: (feature, isSelected) => {\n        // console.log('feature',feature);\n        console.log('features', this.state.features.features); // const index =this.state.features.features.indexOf(feature);\n        // console.log('index',index);\n        // console.log('properties',this.state.features.features[index]);\n\n        let data = [];\n\n        if (feature.properties[\"fill\"] === \"FFFFFF\") {\n          data = this._getDeckColorForFeature(feature.properties[\"fill\"], 1, 0.5);\n        } else data = this._getDeckColorForFeature(feature.properties[\"fill\"], 1, 0.5);\n\n        console.log(data);\n        return data;\n      },\n      getLineColor: (feature, isSelected) => {\n        // console.log('feature',feature);\n        // console.log('features',this.state.features.features);\n        // const index =this.state.features.features.indexOf(feature);\n        // console.log('index',index);\n        // console.log('properties',this.state.features.features[index]);\n        let data = this._getDeckColorForFeature(feature.properties[\"stroke\"], 1, 1);\n\n        console.log(data);\n        return data;\n      },\n      onEdit: ({\n        updatedData,\n        editType,\n        editContext\n      }) => {\n        let Poly = [];\n        let inPoints = []; // console.log('onEdit', editType, editContext, updatedData);\n\n        let updatedSelectedFeatureIndexes = this.state.selectedFeatureIndexes;\n\n        if (!['movePosition', 'extruding', 'rotating', 'translating', 'scaling'].includes(editType)) {// Don't log edits that happen as the pointer moves since they're really chatty\n          // const updatedDataInfo = featuresToInfoString(updatedData);\n          // eslint-disable-next-line\n          // console.log('onEdit', editType, editContext, updatedData);\n        }\n\n        if (editType === 'removePosition') {\n          // This is a simple example of custom handling of edits\n          // reject the edit\n          return;\n        }\n\n        if (editType === 'addFeature') {\n          let {\n            featureIndexes\n          } = editContext;\n          console.log('features+', featureIndexes);\n\n          if (this.state.ODTag === 0) {\n            updatedData.features[updatedData.features.length - 1].properties[\"fill\"] = \"1ca9e6\";\n            updatedData.features[updatedData.features.length - 1].properties[\"stroke\"] = \"1ca9e6\";\n          } else if (this.state.ODTag === 1) {\n            updatedData.features[updatedData.features.length - 1].properties[\"fill\"] = \"f88c24\";\n            updatedData.features[updatedData.features.length - 1].properties[\"stroke\"] = \"ff9900\";\n          } else if (this.state.ODTag === 2) {\n            updatedData.features[updatedData.features.length - 1].properties[\"fill\"] = \"FF0000\";\n            updatedData.features[updatedData.features.length - 1].properties[\"stroke\"] = \"FF0000\";\n          } else if (this.state.ODTag === 3) {\n            updatedData.features[updatedData.features.length - 1].properties[\"fill\"] = \"FFFFFF\";\n            updatedData.features[updatedData.features.length - 1].properties[\"stroke\"] = \"FF0000\";\n          }\n\n          console.log('updata', updatedData); // Add the new feature to the selection\n\n          updatedSelectedFeatureIndexes = [...this.state.selectedFeatureIndexes, ...featureIndexes];\n          updatedData.features.forEach(d => {\n            Poly.push(d.geometry.coordinates[0]);\n          });\n          let newBeijingdata = []; // console.log('poly:',Poly);\n          //\n          // let mapInPoint={};//不知道为什么inPoint会每个都重复，所以去除重复\n          //\n          // //统计在圈内的请求数据，怎么把一段时间的数据全部加进来？,直接把加载数据的过程放在didmount里面\n          // let inQueryPoints=[];\n          //\n          // let A2BPoints=[];\n          // let B2APoints=[];\n          // //对所有的poly计算在poly中的点\n          // if(Poly.length){\n          //     Poly.forEach(p=>{\n          //         this.state.BeijingSpeedData.forEach(d=>{\n          //             if(this._InPolygonScan(d['coordinates'],p,p.length)&& d.value &&!mapInPoint.hasOwnProperty(d['name'])){\n          //                 inPoints.push(d['name']);\n          //                 mapInPoint[d['name']]=1;\n          //\n          //                 // console.log('name:',d['name'],'value',d.value);\n          //                 //尝试改变数据\n          //                 // d['value']=50;\n          //             }\n          //             newBeijingdata.push(d);\n          //         });\n          //\n          //         //把当前所有的query 压入到多边形中。\n          //         console.log('querySearchData:',this.state.querySearchData);\n          //\n          //         let timeMap={};\n          //         this.state.querySearchData.forEach(d=>{\n          //             if(timeMap.hasOwnProperty(d.time)){\n          //                 timeMap[d.time]+=1;\n          //             }\n          //             else {\n          //                 timeMap[d.time]=1;\n          //             }\n          //\n          //             if(this._InPolygonScan(d.from.coordinates,p,p.length)){\n          //                 inQueryPoints.push({tag:'from', coordinates:d.from.coordinates, time:d.time});\n          //             }\n          //             if(this._InPolygonScan(d.to.coordinates,p,p.length)){\n          //                 inQueryPoints.push({tag:'to', coordinates:d.to.coordinates, time:d.time});\n          //             }\n          //         })\n          //         console.log('timeMap',timeMap);\n          //     });\n          // }\n          // // else if(Poly.length%2===0){\n          // //         let newQuerData=[];\n          // //\n          // //         this.state.querySearchData.forEach(d=>{\n          // //             // if(timeMap.hasOwnProperty(d.time)){\n          // //             //     timeMap[d.time]+=1;\n          // //             // }\n          // //             // else {\n          // //             //     timeMap[d.time]=1;\n          // //             // }\n          // //             for(let i=0;i<Poly.length;i+=2){\n          // //                 if(this._InPolygonScan(d.from.coordinates,Poly[i+0],Poly[i+0].length) && this._InPolygonScan(d.to.coordinates,Poly[i+1],Poly[i+1].length)){\n          // //                     A2BPoints.push({tag:'A2B', from:d.from.coordinates,to:d.to.coordinates,time:d.time});\n          // //                     newQuerData.push({tag:'A2B', from:{coordinates:d.from.coordinates},to:{coordinates:d.to.coordinates},time:d.time})\n          // //                 }\n          // //                 if(this._InPolygonScan(d.from.coordinates,Poly[i+1],Poly[i+1].length) && this._InPolygonScan(d.to.coordinates,Poly[i],Poly[i].length)){\n          // //                     B2APoints.push({tag:'B2A', from:d.from.coordinates,to:d.to.coordinates,time:d.time});\n          // //                     newQuerData.push({tag:'B2A', from:{coordinates:d.from.coordinates},to:{coordinates:d.to.coordinates},time:d.time})\n          // //                 }\n          // //             }\n          // //\n          // //         });\n          // //         this.setState({\n          // //             arcData:newQuerData\n          // //         })\n          // //     let A2B={};\n          // //     A2BPoints.forEach(d=>{\n          // //         if(A2B.hasOwnProperty(d.time)){\n          // //             A2B[d.time]+=1;\n          // //         }\n          // //         else A2B[d.time]=1;\n          // //     });\n          // //     let B2A={};\n          // //     B2APoints.forEach(d=>{\n          // //         if(B2A.hasOwnProperty(d.time)){\n          // //             B2A[d.time]+=1;\n          // //         }\n          // //         else B2A[d.time]=1;\n          // //     });\n          // //     let A2BAreaData=[]\n          // //     Object.keys(A2B).forEach(d=>{\n          // //         A2BAreaData.push({tag:'A2B',value:A2B[d],time:d});\n          // //     });\n          // //\n          // //     Object.keys(A2B).forEach(d=>{\n          // //         A2BAreaData.push({tag:'B2A',value:B2A[d],time:d});\n          // //     });\n          // //\n          // //     this.setState({\n          // //         A2BAreaData:A2BAreaData\n          // //     });\n          // //\n          // //     //\n          // //     // const stackedColumnPlot = new Column('stackColumn', {\n          // //     //     data:this.state.A2BAreaData,\n          // //     //     isGroup: true,\n          // //     //     xField: 'time',\n          // //     //     yField: 'value',\n          // //     //     seriesField: 'tag',\n          // //     //     /** 设置颜色 */\n          // //     //     color: ['#1ca9e6', '#f88c24'],\n          // //     //     /** 设置间距 */\n          // //     //     // marginRatio: 0.1,\n          // //     //     label: {\n          // //     //         // 可手动配置 label 数据标签位置\n          // //     //         position: 'middle', // 'top', 'middle', 'bottom'\n          // //     //         // 可配置附加的布局方法\n          // //     //         layout: [\n          // //     //             // 柱形图数据标签位置自动调整\n          // //     //             { type: 'interval-adjust-position' },\n          // //     //             // 数据标签防遮挡\n          // //     //             { type: 'interval-hide-overlap' },\n          // //     //             // 数据标签文颜色自动调整\n          // //     //             { type: 'adjust-color' },\n          // //     //         ],\n          // //     //     },\n          // //     // });\n          // //     //\n          // //     // stackedColumnPlot.render();\n          // //\n          // // }\n          //\n          //\n          //\n          //\n          // console.log('inQuery:',inQueryPoints);\n          //\n          // //把出发和返回的数据统计起来\n          // let fromQueryTimeCount={};\n          // let toQueryTimeCount={};\n          // inQueryPoints.forEach(d=>{\n          //     if(d.tag==='from'){\n          //         if(fromQueryTimeCount.hasOwnProperty(d.time)){\n          //             fromQueryTimeCount[d.time]+=1;\n          //         }\n          //         else{\n          //             fromQueryTimeCount[d.time]=1;\n          //         }\n          //     }\n          //     else{\n          //         if(toQueryTimeCount.hasOwnProperty(d.time)){\n          //             toQueryTimeCount[d.time]+=1;\n          //         }\n          //         else{\n          //             toQueryTimeCount[d.time]=1;\n          //         }\n          //     }\n          //\n          // });\n          // let raidData=[];\n          // Object.keys(fromQueryTimeCount).forEach(d=>{\n          //     raidData.push({time:d, value:fromQueryTimeCount[d], tag:'from'});\n          // });\n          // Object.keys(toQueryTimeCount).forEach(d=>{\n          //     raidData.push({time:d, value:toQueryTimeCount[d], tag:'to'});\n          // });\n          //\n          // this.setState({\n          //     raidData:raidData\n          // });\n          // console.log('raidData:',this.state.raidData);\n          //雷达图\n          // const radarPlot = new Radar('raid', {\n          //     data:this.state.raidData,\n          //     xField: 'time',\n          //     yField: 'value',\n          //     seriesField: 'tag',\n          //     meta: {\n          //         value: {\n          //             alias: '数量'\n          //         },\n          //     },\n          //     xAxis: {\n          //         line: null,\n          //         tickLine: null,\n          //         grid: {\n          //             line: {\n          //                 style: {\n          //                     lineDash: null,\n          //                 },\n          //             },\n          //         },\n          //     },\n          //     // 开启面积\n          //     area: {},\n          //     // 开启辅助点\n          //     point: {\n          //         size: 2,\n          //     },\n          // });\n          // radarPlot.render();\n          //每个多边形内点的ID的数组\n          // this.setState({\n          //     BeijingSpeedData:newBeijingdata\n          // });\n          //查询所有多边形内点的速度,设置河流图\n          // let streamData=[];\n          // let PromiseG=[];\n          //\n          // let avarageTimeMap={};\n          // let heatMapTimeMap={};\n          // console.log('inPoints',inPoints);\n          // inPoints.forEach(d=>{\n          //         if(SpeedMap.hasOwnProperty(d)){//SpeedMap 里面有速度再取\n          //             // console.log('data:',d);\n          //             PromiseG.push(getPointSpeed(d));\n          //         }\n          //     });\n          // Promise.all(PromiseG).then(values=>{\n          //         let time=this.state.time;\n          //         // console.log(\"point_speed\",point_speed);\n          //     inPoints.map((d,index)=>{\n          //         if(SpeedMap.hasOwnProperty(d)) {//SpeedMap 里面有速度再取\n          //             for(let i=-time_interval;i<time_interval;i++){\n          //                 if(time+i*15>=0 && time+i*15<87840 && i%4===0){\n          //                     // console.log('speed:',Math.floor((time+i*15)/15));\n          //                     if(avarageTimeMap.hasOwnProperty(_formatTime(Math.floor((time+i*15))))){\n          //                         avarageTimeMap[_formatTime(Math.floor((time+i*15)))]+=point_speed[d][Math.floor((time+i*15)/15)]\n          //                     }\n          //                     else{\n          //                         avarageTimeMap[_formatTime(Math.floor((time+i*15)))]=point_speed[d][Math.floor((time+i*15)/15)];\n          //                     }\n          //                     //河流图添加数据\n          //                     streamData.push({'name':index+'.','speed':point_speed[d][Math.floor((time+i*15)/15)],'time':_formatTime(Math.floor((time+i*15)))})\n          //                     //旭日图添加数据,不行这个太多了\n          //                     // heatmap.push({\"Day\":Math.floor((time+i*15)/1440),'hour':Math.floor(Math.floor(((time+i*15)%1440)/60)),'value':point_speed[d][Math.floor((time+i*15)/15)]})\n          //                     //\n          //                 }\n          //             }\n          //\n          //             // for(let i=-area_interval;i<area_interval;i++){\n          //             //     if(time+i*15>=0 && time+i*15<87840){\n          //             //         // console.log('speed:',Math.floor((time+i*15)/15));\n          //             //         getQueryData(time){\n          //             //\n          //             //         }\n          //             //     }\n          //             // }\n          //\n          //\n          //             for(let i=-heatmap_interval;i<heatmap_interval;i++){\n          //                 if(time+i*15>=0 && time+i*15<87840 && i%4===0){\n          //                     // console.log('speed:',Math.floor((time+i*15)/15));\n          //                     if(heatMapTimeMap.hasOwnProperty(_formatDayTime(Math.floor((time+i*15))))){\n          //                         heatMapTimeMap[_formatDayTime(Math.floor((time+i*15)))]+=point_speed[d][Math.floor((time+i*15)/15)];\n          //                     }\n          //                     else{\n          //                         heatMapTimeMap[_formatDayTime(Math.floor((time+i*15)))]=point_speed[d][Math.floor((time+i*15)/15)];\n          //                     }\n          //                 }\n          //             }\n          //         }\n          //         });\n          //\n          //     let avarageData=[];\n          //     Object.keys(avarageTimeMap).forEach(k=>{\n          //         avarageData.push({'time':k,'value':avarageTimeMap[k]/inPoints.length});\n          //     });\n          //     let heatmapData=[];\n          //     Object.keys(heatMapTimeMap).forEach(k=>{\n          //         // debugger\n          //         let s=k.split(':');\n          //         heatmapData.push({'Day':s[1],'hour':s[2],'value':heatMapTimeMap[k]/(inPoints.length)});\n          //     });\n          //\n          //     this.setState({\n          //         streamData:streamData,\n          //         avarageData:avarageData\n          //     });\n          //     console.log('avarageData',this.state.avarageData);\n          //\n          //     // const stream=new Area('stream',{\n          //     //     data:this.state.streamData,\n          //     //     xField:'time',\n          //     //     yField:'speed',\n          //     //     seriesField:'name'\n          //     // });\n          //     // stream.render();\n          //\n          //     // const columnPlot = new Column('column', {\n          //     //     data:this.state.avarageData,\n          //     //     xField: 'time',\n          //     //     yField: 'value',\n          //     //     columnWidthRatio: 1,\n          //     //     xAxis: {\n          //     //         label: {\n          //     //             autoHide: true,\n          //     //             autoRotate: false,\n          //     //             style: {\n          //     //                 fill: 'black',\n          //     //                 opacity: 1,\n          //     //                 fontSize: 10\n          //     //             },\n          //     //         },\n          //     //     },\n          //     //     yAxis:{\n          //     //         label:{\n          //     //             style:{\n          //     //                 fill: 'black',\n          //     //                 opacity: 1,\n          //     //                 fontSize: 20\n          //     //             }\n          //     //         },\n          //     //         grid: {\n          //     //             line: {\n          //     //                 style: {\n          //     //                     stroke: 'black',\n          //     //                     lineWidth: 2,\n          //     //                     lineDash: [4, 5],\n          //     //                     strokeOpacity: 0.8,\n          //     //                     shadowColor: 'black',\n          //     //                     shadowBlur: 10,\n          //     //                     shadowOffsetX: 5,\n          //     //                     shadowOffsetY: 5,\n          //     //                     cursor: 'pointer'\n          //     //                 }\n          //     //             }\n          //     //         }\n          //     //     },\n          //     //     meta: {\n          //     //         type: {\n          //     //             alias: '类别',\n          //     //         },\n          //     //         sales: {\n          //     //             alias: '均值',\n          //     //         },\n          //     //     },\n          //     // });\n          //\n          //     this.setState({\n          //         heatData:heatmapData\n          //     });\n          //     console.log('heatdata',this.state.heatData);\n          //\n          //\n          //     //周期热力图\n          //\n          //     // const heatchart = new F2.Chart({\n          //     //     id: 'heatchart',\n          //     //     pixelRatio: window.devicePixelRatio\n          //     // });\n          //     // heatchart.source(this.state.heatData);\n          //     // heatchart.coord('polar', {\n          //     //     innerRadius: 0.2\n          //     // });\n          //     // heatchart.tooltip(false);\n          //     // heatchart.axis('Day', {\n          //     //     grid: null,\n          //     //     line: null,\n          //     //     tickLine: null,\n          //     //     label: null\n          //     // });\n          //     // heatchart.axis('hour', {\n          //     //     line: null,\n          //     //     tickLine: null,\n          //     //     grid: null,\n          //     //     labelOffset: 3\n          //     // });\n          //     // // [1, 152, 189],\n          //     // //     [73, 227, 206],\n          //     // //     [216, 254, 181],\n          //     // //     [254, 237, 177],\n          //     // //     [254, 173, 84],\n          //     // //     [209, 55, 78]\n          //     // heatchart.polygon()\n          //     //     .position('hour*Day')\n          //     //     // .color('value', '#BAE7FF-#1890FF-#0050B3')\n          //     //     // .color('value', '#0198BD-#49E3CE-#FEEDB1-#D1374E')\n          //     //     .color('value', '#49E3CE-#FEEDB1-#D1374E')\n          //     //     .style({\n          //     //         stroke: '#fff',\n          //     //         lineWidth: 1\n          //     //     });\n          //     //\n          //     // this.state.heatData.forEach(function(val, idx) {\n          //     //     if(idx%24===0){\n          //     //         heatchart.guide().text({\n          //     //             top: true,\n          //     //             position: [ 0, idx/24 ],\n          //     //             content: val['Day'],\n          //     //             style: {\n          //     //                 fill: '#000',\n          //     //                 textAlign: 'center',\n          //     //                 fontSize:5,\n          //     //                 shadowBlur: 2,\n          //     //                 shadowColor: 'rgba(0, 0, 0, .45)'\n          //     //             }\n          //     //         });\n          //     //     }\n          //     // });\n          //     // heatchart.render();\n          //\n          //\n          //     // columnPlot.render();\n          //\n          // });\n          //画出neighbor的\n          // let p3=getposmap();\n          // p3.then(function () {\n          //     // console.log('pos_map',pos_map\n          //     //这个定义好像是要放到函数里面才行，因为定义了马上就执行的！！\n          //     let p4=getneighbor();\n          //     p4.then(function () {\n          //         this.setState({\n          //             neighbor_data:neighbordata\n          //         })\n          //     }.bind(this))\n          // }.bind(this));\n        } // console.log('Points',inPoints);\n\n\n        this.setState({\n          inPoints: inPoints,\n          features: updatedData,\n          selectedFeatureIndexes: updatedSelectedFeatureIndexes\n        });\n      }\n    });\n\n    const layers = this._renderLayers();\n\n    layers.push(layer);\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DeckGL, {\n        layers: layers,\n        effects: theme.effects,\n        initialViewState: BEIJIN_VIEW_STATE,\n        viewState: viewState,\n        controller: {\n          doubleClickZoom: false\n        },\n        onViewStateChange: ({\n          viewState\n        }) => {\n          const viewport = new WebMercatorViewport(viewState);\n          const nw = viewport.unproject([0, 0]);\n          const se = viewport.unproject([viewport.width, viewport.height]); // console.log(\"north: \", nw[1], \", south: \", se[1]);\n          // console.log(\"east: \", se[0], \"west: \", nw[0] );\n\n          let bound = [[nw[0], se[0]], [se[1], nw[1]]]; //判断在视野内\n          // if(this.state.arcData.length>0){\n          //     let tmpData=[];\n          //     this.state.arcData.forEach(d=>{\n          //         // debugger\n          //         // console.log('arcData:',d);\n          //         if( inbound(d.to.coordinates,bound)){\n          //             // if(inbound(d.from.coordinates,bound)){\n          //                 tmpData.push(d);\n          //             // }\n          //\n          //         }\n          //     });\n          //     this.setState({\n          //         arcData:tmpData\n          //     })\n          // }\n        },\n        getCursor: layer.getCursor.bind(layer),\n        children: /*#__PURE__*/_jsxDEV(StaticMap, {\n          reuseMaps: true,\n          mapStyle: mapStyle,\n          preventStyleDiffing: true,\n          mapboxApiAccessToken: MAPBOX_TOKEN\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3111,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3075,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"out\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '330px',\n          right: '10px',\n          backgroundColor: this.state.ODTag === 0 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)'\n        },\n        onClick: () => {\n          this.setState({\n            ODTag: 0\n          });\n        },\n        children: /*#__PURE__*/_jsxDEV(this._Icon, {\n          name: 'arrow-to-left',\n          color: \"rgba(255,255,255,1)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3120,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"in\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '365px',\n          right: '10px',\n          backgroundColor: this.state.ODTag === 1 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)'\n        },\n        onClick: () => {\n          this.setState({\n            ODTag: 1\n          });\n        },\n        children: /*#__PURE__*/_jsxDEV(this._Icon, {\n          name: 'arrow-to-right',\n          color: \"rgba(255,255,255,1)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3123,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"bridge\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '400px',\n          right: '10px',\n          backgroundColor: this.state.ODTag === 2 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)'\n        },\n        onClick: () => {\n          this.setState({\n            ODTag: 2\n          });\n        },\n        children: /*#__PURE__*/_jsxDEV(this._Icon, {\n          name: 'trip',\n          color: \"rgba(255,255,255,1)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3126,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '10px',\n          left: '10px',\n          backgroundColor: this.state.moduleTag === 1 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '70px',\n          width: '100px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag: 1,\n            moduleTag2: 0,\n            moduleTag3: 0\n          });\n        },\n        children: '车流速度展示'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '80px',\n          left: '10px',\n          backgroundColor: this.state.moduleTag === 2 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '70px',\n          width: '100px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag: 2,\n            moduleTag2: 0,\n            moduleTag3: 0\n          });\n        },\n        children: '区域分析'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '150px',\n          left: '10px',\n          backgroundColor: this.state.moduleTag === 3 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '70px',\n          width: '100px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag: 3,\n            moduleTag2: 0,\n            moduleTag3: 0\n          });\n        },\n        children: '道路分析'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '220px',\n          left: '10px',\n          backgroundColor: this.state.moduleTag === 4 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '70px',\n          width: '100px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag: 4,\n            moduleTag2: 0,\n            moduleTag3: 0\n          });\n        },\n        children: '预测交互'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '10px',\n          left: '110px',\n          backgroundColor: this.state.moduleTag2 === 1 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '35px',\n          width: '150px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag2: 1,\n            moduleTag: 1,\n            moduleTag3: 0\n          });\n        },\n        children: '散点图'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '45px',\n          left: '110px',\n          backgroundColor: this.state.moduleTag2 === 2 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '35px',\n          width: '150px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag2: 2,\n            moduleTag: 1,\n            moduleTag3: 0\n          });\n        },\n        children: '柱状图'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3155,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '80px',\n          left: '110px',\n          backgroundColor: this.state.moduleTag2 === 3 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '35px',\n          width: '75px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag2: 3,\n            moduleTag: 2,\n            moduleTag3: 0\n          });\n        },\n        children: '区域内分析'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '115px',\n          left: '110px',\n          backgroundColor: this.state.moduleTag2 === 4 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '35px',\n          width: '75px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag2: 4,\n            moduleTag: 2,\n            moduleTag3: 0\n          });\n        },\n        children: '区域间分析'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '80px',\n          left: '185px',\n          backgroundColor: this.state.moduleTag3 === 1 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '17.5px',\n          width: '75px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag3: 1,\n            moduleTag2: 3,\n            moduleTag: 2\n          });\n        },\n        children: '线性'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '97.5px',\n          left: '185px',\n          backgroundColor: this.state.moduleTag3 === 2 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '17.5px',\n          width: '75px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag3: 2,\n            moduleTag2: 3,\n            moduleTag: 2\n          });\n        },\n        children: '周期'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3167,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '115px',\n          left: '185px',\n          backgroundColor: this.state.moduleTag3 === 3 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '17.5px',\n          width: '75px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag3: 3,\n            moduleTag2: 4,\n            moduleTag: 2\n          });\n        },\n        children: '进出统计'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '132.5px',\n          left: '185px',\n          backgroundColor: this.state.moduleTag3 === 4 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '17.5px',\n          width: '75px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag3: 4,\n            moduleTag2: 4,\n            moduleTag: 2\n          });\n        },\n        children: '区域间对比'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '150px',\n          left: '110px',\n          backgroundColor: this.state.moduleTag2 === 5 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '35px',\n          width: '150px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag2: 5,\n            moduleTag: 3,\n            moduleTag3: 0\n          });\n        },\n        children: '道路点趋势'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '185px',\n          left: '110px',\n          backgroundColor: this.state.moduleTag2 === 6 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '35px',\n          width: '150px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag2: 6,\n            moduleTag: 3,\n            moduleTag3: 0\n          });\n        },\n        children: '道路多点对比'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '220px',\n          left: '110px',\n          backgroundColor: this.state.moduleTag2 === 7 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '17.5px',\n          width: '150px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag2: 7,\n            moduleTag3: 0,\n            moduleTag: 4\n          });\n        },\n        children: '请求数据展示'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3182,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '237.5px',\n          left: '110px',\n          backgroundColor: this.state.moduleTag2 === 8 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '17.5px',\n          width: '100px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag2: 8,\n            moduleTag3: 0,\n            moduleTag: 4\n          });\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: '请求数据筛选'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3186,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3185,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '255px',\n          left: '110px',\n          backgroundColor: this.state.moduleTag2 === 9 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '17.5px',\n          width: '100px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag2: 9,\n            moduleTag3: 0,\n            moduleTag: 4\n          });\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: '请求数据生成'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3189,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '272.5px',\n          left: '110px',\n          backgroundColor: this.state.moduleTag2 === 10 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '17.5px',\n          width: '100px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag2: 10,\n            moduleTag3: 0,\n            moduleTag: 4\n          });\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: '影响值调整'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3192,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3191,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"showSpeed\",\n        style: {\n          position: 'absolute',\n          zIndex: 2,\n          top: '237.5px',\n          left: '210px',\n          backgroundColor: this.state.moduleTag3 === 5 ? 'rgb(0, 105, 217)' : 'rgb(90, 98, 94)',\n          color: 'rgba(255,255,255,1)',\n          height: '52.5px',\n          width: '50px'\n        },\n        onClick: () => {\n          this.setState({\n            moduleTag3: 5,\n            moduleTag: 4\n          });\n        },\n        children: '提交'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3194,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Toolbox, {\n        mode: this.state.mode,\n        onSetMode: setmode => {\n          this.setState({\n            mode: setmode()\n          });\n        },\n        modeConfig: this.state.modeConfig,\n        onSetModeConfig: setmodeconfig => {\n          this.setState({\n            modeConfig: setmodeconfig()\n          });\n        },\n        geoJson: this.state.features,\n        onSetGeoJson: setfeatures => {\n          this.setState({\n            features: setfeatures()\n          });\n        },\n        onImport: setfeatures => {\n          this.setState({\n            features: setfeatures()\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3197,\n        columnNumber: 17\n      }, this), this._renderTooltipDep(), this._renderTooltipDes(), /*#__PURE__*/_jsxDEV(StyletronProvider, {\n        value: engine,\n        children: /*#__PURE__*/_jsxDEV(BaseProvider, {\n          theme: LightTheme,\n          children: /*#__PURE__*/_jsxDEV(SliderTraffic, {\n            min: 0,\n            max: 87840 //分钟\n            ,\n            value: [0, this.state.time],\n            formatLabel: this._formatLabel,\n            onChange: ({\n              value\n            }) => {\n              let nowTime = value[1]; // console.log('nowTime:',nowTime);\n\n              if (Math.floor(nowTime / 15) !== this.state.Quater) {\n                this.setState({\n                  Quater: Math.floor(nowTime / 15)\n                }); //一天24小时\n\n                console.log('nowztime:', nowTime); // var hour=((nowTime/60)%24).toFixed(0);\n                // console.log('hour:',hour);\n                // this.setState({\n                //     pre_org:setPredictData(hour),\n                //     real_org:setRealData(hour)\n                // });\n                // console.log('pre_org',this.state.pre_org);\n                // var p=getRoute(hour);\n                // p.then(function() {\n                //     console.log('Route',Routes)\n                //     this.setState({\n                //         Route:Routes,\n                //         depPolygon:depPolygon,\n                //         desPolygon:desPolygon\n                //     })\n                // }.bind(this))\n\n                let num = Math.floor(nowTime / 15);\n                let p4 = getBeijingSpeed(num);\n                p4.then(function () {\n                  let p5 = getPathlist();\n                  p5.then(function () {\n                    getNodeSpeedMap();\n                    let p3 = getBeiJingData();\n                    p3.then(function () {\n                      // console.log('beijing',Beijingdata);\n                      this.setState({\n                        BeijingSpeedData: Beijingdata\n                      });\n                    }.bind(this));\n                  }.bind(this));\n                }.bind(this)); //num 是除以15后的时间就是测速点\n\n                let p_getQuery = getQueryData(num);\n                p_getQuery.then(function () {\n                  this.setState({\n                    arcData: queryData\n                  }); // 直接设置无法更新图层，不知道怎么才能比较好的更新，原数据置空会更新\n                  // if(num%2===0){\n                  //     console.log('clean');\n                  //     this.setState({\n                  //         arcData:[]\n                  //     });\n                  // }\n\n                  console.log('arcData:', this.state.arcData);\n                }.bind(this));\n              }\n\n              this.setState({\n                time: nowTime\n              }); // console.log('time',this.state.time)\n              //console.log(this.state)\n              //console.log('value:',value)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 3268,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3212,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3211,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: 'background',\n        style: background,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: 'line'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3445,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: 'pie'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3446,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: 'stream'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3447,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: 'column'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3449,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          id: \"heatchart\",\n          width: \"400\",\n          height: \"260\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3450,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"raid\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3452,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"stackColumn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 3453,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 3444,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Panel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 3456,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 3074,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n/* {(<SliderInput\n                     value={[0,this.state.time]}\n                    min={0}\n                    max={24 * 60}\n                    formatLabel={this._formatLabel}\n                    onChange={({value}) => {\n                        if (value % 3600 === 0) {\n                            var p = getRoute(value / 3600);\n                            p.then(function () {\n                                this.setState({\n                                    Routes: Routes\n                                })\n                            }.bind(this))\n                        }\n                        this.setState({time: value});\n                        console.log(value)\n                    }}\n                />)\n                }*/\n// export function renderToDOM(container) {\n//     render(<App />, container);\n// }\n//ReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<CustomTicks />,document.getElementById('app'))\n// require('d3-request').csv(DATA_URL, (error, response) => {\n//         if (!error) {\n//             const data = response.map(row => ({\n//                 timestamp: new Date(`${row.DateTime} UTC`).getTime(),\n//                 latitude: Number(row.Latitude),\n//                 longitude: Number(row.Longitude),\n//                 depth: Number(row.Depth),\n//                 magnitude: Number(row.Magnitude)\n//             }));\n//             ReactDOM.render(<App2 data={data} />, document.getElementById('root'));\n//         }\n//     });\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Rad\");\n$RefreshReg$(_c2, \"Queue\");\n$RefreshReg$(_c3, \"QuardBound\");","map":{"version":3,"sources":["/home/zhiguangda/ITS/deckgl/src/components/routeMap.js"],"names":["React","Fragment","DeckGL","TripsLayer","StaticMap","d3","F2","WebMercatorViewport","Radar","_","Component","AmbientLight","PointLight","LightingEffect","PathLayer","ColumnLayer","PolygonLayer","IconLayer","ScatterplotLayer","ArcLayer","SliderTraffic","Select","SIZE","BaseProvider","LightTheme","styled","Client","Styletron","Provider","StyletronProvider","SelectionLayer","EditableGeoJsonLayer","Charts","HexagonLayer","Panel","DrawPolygonMode","Toolbox","Bar","Pie","Area","Column","G2","Line","keys","piedata","type","value","getpie","Promise","resolve","Beijingdata","forEach","d","background","width","margin","backgroundColor","minHeight","boxSizing","position","bottom","border","dashed","opacity","zIndex","SelectContainer","top","right","SelectContainer2","left","engine","MAPBOX_TOKEN","depData","depCenter","desCenter","desData","depPolygon","desPolygon","colorTable","ICON_MAPPING","marker","x","y","height","mask","ambientLight","color","intensity","pointLight","lightingEffect","material","ambient","diffuse","shininess","specularColor","DEFAULT_THEME","buildingColor","trailColor0","trailColor1","effects","INITIAL_VIEW_STATE","longitude","latitude","zoom","pitch","bearing","BEIJIN_VIEW_STATE","colorRange","Routes","Rad","Math","PI","getDistance","lng1","lat1","lng2","lat2","radLat1","radLat2","a","b","s","asin","sqrt","pow","sin","cos","round","getRouteByTime","time","data","json","then","pAll","map","dd","index","setInterval","push","reject","url","req","XMLHttpRequest","open","send","onload","JSON","parse","response","console","log","ontimeout","all","stringify","setTimeout","gerRouteByPoint","start","end","getRoutedata","routes","route","geometry","coordinates","timestamps","i","length","dist","geojson","getStep","step","trip","newTrip","getArea","csv","re","tmp","match","tmpData","parseFloat","contour","in","out","number","sumlong","sumlat","getRoute","count","routeData","sumMax","split","parseInt","key","pre","sum","countD","path","m","newRoutes","tmpTime","preIndex","t","tmpStep","traffic","od","match_points","match_map","getMatchdata","p","hasOwnProperty","MCBAND","MC2LL","bound","convertor","lng","lat","factor","abs","mc2coordinate","getBound","min","max","root","Queue","items","enqueue","element","Array","concat","dequeue","shift","front","isEmpty","size","clear","print","toString","tag","x1","y1","x2","y2","mid_vertical","mid_horizontal","quardTree","getQuardTree","Object","SpeedData","getBeijingSpeed","pathlist","getPathlist","SpeedMap","getNodeSpeedMap","val","point_speed","getPointSpeed","point_id","Real_match_map","getMatchMap","getBeiJingData","pos_map","getposmap","point","neighbordata","getneighbor","Grid","QuardBound","node","_formatTime","floor","_formatDayTime","predict_origin","Map","predict_des","getPredictData","date","Date","DepTime","hour","getHours","has","set","get","Origin","Trips","Destination","realOrg","realDes","getRealData","blockRoute","blockData","getBlockData","da","h","getMinutes","getSeconds","getBlockRoute","indexOf","setPredictData","centroid","setRealData","tmpIcon","features","selectedFeatureIndexes","time_interval","heatmap_interval","area_interval","queryData","getQueryData","inbound","outbound","from","to","newDayquery","getQueryDataforArea","ss","onepathdata","getOnePath","urlNow","getDrivePath","urlDrive","RouteMap","constructor","props","state","depV","desV","area","options","block","pre_org","pre_des","real_org","real","showPredict","blockIcon","showRoute","modeId","modeHandler","modeConfig","mode","ODTag","Beijing","BeijingSpeedData","Quater","inPoints","pointData","showTag","streamData","avarageData","match_data","ToolTag","heatdata","arcData","querySearchData","raidData","A2BAreaData","onePath","moduleTag","componentDidMount","bind","p2","setState","button","document","getElementById","p4","p_getMatchmap","p5","p3","pp","p_match","p_Quard","promiseG","p_getPath","p_getDrive","componentWillUnmount","layers","setData","_renderTooltipDep","depObject","depX","depY","pointerEvents","_renderTooltipDes","desObject","desX","desY","_getPredictData","_hex2rgb","hex","_getDeckColorForFeature","str","bright","alpha","c","_renderLayers","trailLength","theme","id","pickable","widthScale","widthMinPixels","getPath","getColor","getWidth","diskResolution","radius","extruded","stroked","elevationScale","getLineWidth","getPosition","getFillColor","getLineColor","getElevation","onHover","object","p1","registerShape","draw","cfg","container","group","addGroup","decorator1","addShape","attrs","r","fill","decorator2","decorator3","animate","duration","easing","repeat","delay","_formatLabel","_Icon","Online","P1","P2","Q","tempy1","tempx1","tempy2","tempx2","xp","yp","_InPolygonScan","Poly","n","xinters","render","viewState","mapStyle","layer","feature","isSelected","properties","onEdit","updatedData","editType","editContext","updatedSelectedFeatureIndexes","includes","featureIndexes","newBeijingdata","doubleClickZoom","viewport","nw","unproject","se","getCursor","moduleTag2","moduleTag3","setmode","setmodeconfig","setfeatures","nowTime","num","p_getQuery"],"mappings":"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","sourcesContent":["// /// app.js\nimport React,{Fragment} from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {TripsLayer} from '@deck.gl/geo-layers';\nimport {StaticMap} from 'react-map-gl';\nimport * as d3 from 'd3'\nimport F2 from '@antv/f2';\nimport {WebMercatorViewport} from '@deck.gl/core';\nimport { Radar } from '@antv/g2plot';\nimport _ from 'lodash';\n//\n// // Set your mapbox access token here\n// const MAPBOX_ACCESS_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\n//\n// // Initial viewport settings\n// const initialViewState = {\n//     longitude: -122.41669,\n//     latitude: 37.7853,\n//     zoom: 13,\n//     pitch: 0,\n//     bearing: 0\n// };\n//\n// // Data to be used by the LineLayer\n// const data = [   {\n//              waypoints: [{coordinates: [-122.3907988, 37.7664413], timestamp: 1554772579000},\n//                      {coordinates: [-122.3908298,37.7667706], timestamp: 1554772579010},\n//                      {coordinates: [-122.4485672, 37.8040182], timestamp: 1554772580200}\n//              ]\n//      }];\n//\n// class App extends React.Component {\n//     render() {\n//         const layers = [\n//             new TripsLayer({id: 'trips-layer', data,\n//                 getPath:d => d.waypoints.map(p => p.coordinates),\n//                 getTimestamps: d => d.waypoints.map(p => p.timestamp - 1554772579000),\n//                 getColor: [253, 128, 93],\n//                 opacity: 0.8,\n//                 widthMinPixels: 5,\n//                 rounded: true,\n//                 trailLength: 200,\n//                 currentTime: 0\n//\n//             })\n//         ];\n//\n//         return (\n//             <DeckGL\n//                 initialViewState={initialViewState}\n//                 controller={true}\n//                 layers={layers}\n//             >\n//                 <StaticMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} />\n//             </DeckGL>\n//         );\n//     }\n// }\n// ReactDOM.render(<App />, document.getElementById('root'));\nimport {Component} from 'react';\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\nimport {PathLayer,ColumnLayer, PolygonLayer,IconLayer,ScatterplotLayer,ArcLayer} from '@deck.gl/layers';\nimport SliderTraffic from \"./sliderTraffic\";\nimport { Select,SIZE } from \"baseui/select\";\nimport {BaseProvider, LightTheme, styled} from \"baseui\";\nimport {Client as Styletron} from 'styletron-engine-atomic';\nimport {Provider as StyletronProvider} from 'styletron-react';\nimport { SelectionLayer } from '@nebula.gl/layers';\nimport { EditableGeoJsonLayer} from 'nebula.gl';\nimport Charts from './charts/charts'\nimport {HexagonLayer} from '@deck.gl/aggregation-layers';\nimport Panel from \"./charts/panel\";\nimport { DrawPolygonMode } from \"@nebula.gl/edit-modes\";\nimport { Toolbox } from \"@nebula.gl/editor\";\nimport 'boxicons'\nimport {Bar, Pie, Area, Column} from '@antv/g2plot';\nimport { G2,Line } from '@antv/g2plot';\nimport {keys} from \"@material-ui/core/styles/createBreakpoints\";\n\n\n\nconst piedata=[\n    {type:'0-10',value:0},\n    {type:'10-20',value:0},\n    {type:'20-30',value:0},\n    {type:'30-40',value:0},\n    {type:'40-50',value:0},\n    {type:'50-60',value:0},\n    {type:'60-70',value:0},\n    {type:'70-80',value:0},\n    {type:'80-90',value:0},\n    {type:'90-100',value:0},\n    {type:'100-110',value:0},\n    {type:'110-120',value:0},\n    {type:'120+',value:0},\n\n    ];\n\n\nfunction getpie(){\n    return new Promise(resolve => {\n    Beijingdata.forEach(d=>{\n        if (d['value']>=0&&d['value']<10)piedata[0].value++;\n        else if(d['value']>=10&&d['value']<20)piedata[1].value++;\n        else if(d['value']>=20&&d['value']<30)piedata[2].value++;\n        else if(d['value']>=30&&d['value']<40)piedata[3].value++;\n        else if(d['value']>=40&&d['value']<50)piedata[4].value++;\n        else if(d['value']>=50&&d['value']<60)piedata[5].value++;\n        else if(d['value']>=60&&d['value']<70)piedata[6].value++;\n        else if(d['value']>=70&&d['value']<80)piedata[7].value++;\n        else if(d['value']>=80&&d['value']<90)piedata[8].value++;\n        else if(d['value']>=90&&d['value']<100)piedata[9].value++;\n        else if(d['value']>=100&&d['value']<110)piedata[10].value++;\n        else if(d['value']>=110&&d['value']<120)piedata[11].value++;\n        else if(d['value']>=120)piedata[12].value++;\n    });\n    resolve();\n    })\n}\n// import {\n//     Editor,\n//     EditingMode,\n//     DrawLineStringMode,\n//     DrawPolygonMode,\n// } from \"react-map-gl-draw\";\n\n\nconst background={\n    width: \"30%\",\n    margin: \"30px auto\",\n    backgroundColor: \"#FFFFFF\",\n        // [\"#FF895D\",\"#FF6836\",\"#F3470D\",\"#D13808\",\"#A4300C\",\"#7A270E\"],\n    minHeight: \"0px\",\n    boxSizing: \"border-box\",\n    position: \"fixed\",\n    // top: \"80%\",\n    bottom:\"10%\",\n    border:\"10px\",\n    dashed: \"#FF6836\",\n    opacity:1,\n    zIndex:1\n};\n\n\n\nconst SelectContainer=styled('div',{\n    position: 'absolute',\n    // display: 'flex',\n    // justifyContent: 'center',\n    // alignItems: 'center',\n    zIndex: 1,\n    top: '50px',\n    right:'10px',\n    width:'15%',\n    // height:'5%'\n});\nconst SelectContainer2=styled('div',{\n    position: 'absolute',\n    // display: 'flex',\n    // justifyContent: 'center',\n    // alignItems: 'center',\n    zIndex: 1,\n    top: '50px',\n    left:'10px',\n    width:'15%',\n    // height:'5%'\n});\n\nconst engine = new Styletron();\n// Set your mapbox token here\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\n\n//加载区域数据\nvar depData=[];\nvar depCenter=[];\nlet desCenter=[];\nlet desData=[];\nlet depPolygon=[];\nlet desPolygon=[];\n\nlet colorTable=[[128,255,0,255],[255,255,40,255],[255,128,0,255],[255,64,64,255],[255,0,0,255]];\nconst ICON_MAPPING = {\n    marker: {x: 0, y: 0, width: 32, height: 32, mask: true}\n};\n// Source data CSV\n// const DATA_URL = {\n//     BUILDINGS:\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/buildings.json', // eslint-disable-line\n//     TRIPS:\n//         'https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/trips/trips-v7.json' // eslint-disable-line\n// };\n\nconst ambientLight = new AmbientLight({\n    color: [255, 255, 255],\n    intensity: 1.0\n});\n\nconst pointLight = new PointLight({\n    color: [255, 255, 255],\n    intensity: 2.0,\n    position: [120.167057, 30.185901, 8000]\n});\n\nconst lightingEffect = new LightingEffect({ambientLight, pointLight});\n\nconst material = {\n    ambient: 0.1,\n    diffuse: 0.9,\n    shininess: 64,\n    specularColor: [60, 64, 70]\n};\nconst DEFAULT_THEME = {\n    buildingColor: [74, 80, 87],\n    trailColor0: [253, 128, 93],\n    trailColor1: [23, 184, 190],\n    material,\n    effects: [lightingEffect]\n};\nconst INITIAL_VIEW_STATE = {\n    longitude:  120.207057,\n    latitude: 30.225901,\n    // longitude:-74.00823,\n    // latitude: 40.71351,\n    zoom: 12.4,\n    pitch: 45,\n    bearing: 0\n};\n\n\nconst BEIJIN_VIEW_STATE ={\n    longitude:  116.39739990234375,\n    latitude: 39.915002988576155,\n    // longitude:-74.00823,\n    // latitude: 40.71351,\n    zoom: 12.4,\n    pitch: 45,\n    bearing: 0\n}\n//柱状图的颜色\nconst colorRange = [\n    [1, 152, 189],\n    [73, 227, 206],\n    [216, 254, 181],\n    [254, 237, 177],\n    [254, 173, 84],\n    [209, 55, 78]\n];\n// d3.json(\"https://api.openaq.org/v1/latest?limit=10000\").then(data=>{\n//     console.log(data)\n// })\nvar Routes=[];\nfunction Rad(d){\n    return d * Math.PI / 180.0;//经纬度转换成三角函数中度分表形式。\n}\n\n\nvar getDistance=function(lng1,lat1,lng2,lat2){\n    var radLat1 = Rad(lat1);\n    var radLat2 = Rad(lat2);\n    var a = radLat1 - radLat2;\n    var  b = Rad(lng1) - Rad(lng2);\n    var s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a/2),2) +\n        Math.cos(radLat1)*Math.cos(radLat2)*Math.pow(Math.sin(b/2),2)));\n    s = s *6378.137 ;// EARTH_RADIUS;\n    s = Math.round(s * 10000) / 10000; //输出为公里\n    //s=s.toFixed(4);\n    return s;\n};\n\n// var od=[];\n\nfunction getRouteByTime(time){\n    let data=[];\n    d3.json(\"http://10.72.100.14:8888/query/\"+time).then(d=>{\n            let pAll=[];\n            d.map((dd,index)=>{\n                setInterval(index*10);\n                pAll.push(new Promise((resolve,reject)=>{\n                    var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + dd[3] + ',' + dd[4] + ';' + dd[5] + ',' + dd[6] + '?steps=true&geometries=geojson&access_token=' + 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\n                    var req = new XMLHttpRequest();\n                    req.open('GET', url, true);\n                    req.send();\n                    req.onload=function () {\n                        var json = JSON.parse(req.response);\n                        data.push(json);\n                        console.log('oneRoute:',json);\n                        resolve()\n                    };\n                    req.ontimeout=function () {\n                        reject()\n                    }\n                }))\n\n            })\n            Promise.all(pAll).then(()=>{\n                // console.log('queryroute:',data)\n                console.log(JSON.stringify(data))\n\n            },()=>{\n                // console.log('queryroute:',data)\n                console.log(JSON.stringify(data))\n\n            })\n    });\n\n    setTimeout(()=>{\n        console.log(JSON.stringify(data))\n    },70000)\n}\n\nfunction gerRouteByPoint(start,end){\n\n}\n\n// getRouteByTime(1584);\n\n\nvar getRoutedata=function(start,end) {\n\n    var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[start][0] + ',' + depCenter[start][1] + ';' + desCenter[end][0] + ',' + desCenter[end][1] + '?steps=true&geometries=geojson&access_token=' + 'pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJjanozdXg0b3EwMHh4M21tcXk2MHlpN3B1In0.lInf8zFl2BsP_bDjMFhf3w';\n\n    // make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n    var req = new XMLHttpRequest();\n    req.open('GET', url, true);\n    req.send();\n    req.onload = function () {\n        var json = JSON.parse(req.response);\n        // console.log('route:',json)\n        var data = json.routes[0];\n        var route = data.geometry.coordinates;\n        var timestamps=[0];//先设置每条路径1000stamp\n        for(var i=0;i<route.length;i++){\n            if(i!==0){\n                var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n                timestamps.push(dist+timestamps[i-1])\n            }\n        }\n        var geojson = {\n            'path': route,\n            'timestamps':timestamps,\n        };\n        console.log(geojson);\n        Routes.push(geojson)\n\n    }\n};\n//getRoutedata([120.167057,30.185901], [120.302548\t,30.399632])\n// var getRoute=new function(time) {\n//     // var gets = [];\n//     d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\n//\n//         let re=/([-+]?[0-9]*\\.?[0-9]+)/g;\n//         console.log('data1:',data)\n//         data.forEach(d=>{\n//             let tmp=d.value.match(re)\n//             let tmpData=[];\n//             for(let i=0;i<tmp.length-1;i+=2){\n//                 tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\n//             }\n//             depData.push(tmpData)\n//         })\n//         depData.forEach(d=>{\n//             let sumlong=0\n//             let sumlat=0;\n//             d.forEach(data=>{\n//                 sumlong+=data[0];\n//                 sumlat+=data[1];\n//             })\n//             depCenter.push([sumlong/d.length,sumlat/d.length])\n//         })\n//         d3.csv(\"./edge_des_csv.csv\").then(function (data) {\n//             let re=/([-+]?[0-9]*\\.?[0-9]+)/g\n//             console.log('data2:',data)\n//             data.forEach(d=>{\n//                 let tmp=d.value.match(re)\n//                 let tmpData=[];\n//                 for(let i=0;i<tmp.length-1;i+=2){\n//                     tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\n//                 }\n//                 desData.push(tmpData)\n//             })\n//             desData.forEach(d=>{\n//                 let sumlong=0;\n//                 let sumlat=0;\n//                 d.forEach(data=>{\n//                     sumlong+=data[0];\n//                     sumlat+=data[1];\n//                 })\n//                 desCenter.push([sumlong/d.length,sumlat/d.length])\n//             });\n//             // d3.json('http://localhost:5000/data/12:00:00').then(function(data){\n//             //     data.forEach(d=>{\n//             //         var tmp=d.split(',');\n//             //         if(tmp[0]!=-1 && tmp[1]!=-1) {\n//             //             if(tmp[0]>46&&tmp[0]<=60){\n//             //              //   if (tmp[2] !== '0') {\n//             //                 var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n//             //                 gets.push($.ajax({\n//             //                     type: 'GET',\n//             //                     url: urlNow,\n//             //                     success: function (r) {\n//             //                         console.log('r:', r)\n//             //                         //var json = JSON.parse(data);\n//             //                         var plan = r.routes[0];\n//             //                         var route = plan.geometry.coordinates;\n//             //                         var timestamps = [0];//先设置每条路径1000stamp\n//             //                         for (var i = 0; i < route.length; i++) {\n//             //                             if (i !== 0) {\n//             //                                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n//             //                                 timestamps.push(dist + timestamps[i - 1])\n//             //                             }\n//             //                         }\n//             //                         var geojson = {\n//             //                             'vendor': 1,\n//             //                             'path': route,\n//             //                             'timestamps': timestamps,\n//             //\n//             //                         };\n//             //                         console.log(geojson)\n//             //                         Routes.push(geojson)\n//             //                         saveJson[tmp[0]+','+tmp[1]] = geojson\n//             //                     },\n//             //                     error:function(){\n//             //                         console.log('err')\n//             //                     }\n//             //                 }));\n//             //\n//             //            // }\n//             //             }\n//             //         }\n//             //     })\n//             //     // url.forEach(function(value) {\n//             //     //     console.log('url:',value)\n//             //     //     gets.push($.ajax({\n//             //     //         type: 'GET',\n//             //     //         url: value,\n//             //     //         success: function(data) {\n//             //     //             console.log('data:',data)\n//             //     //             //var json = JSON.parse(data);\n//             //     //             var plan = data.routes[0];\n//             //     //             var route = plan.geometry.coordinates;\n//             //     //             var timestamps=[0];//先设置每条路径1000stamp\n//             //     //             for(var i=0;i<route.length;i++){\n//             //     //                 if(i!==0){\n//             //     //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n//             //     //                     timestamps.push(dist+timestamps[i-1])\n//             //     //                 }\n//             //     //             }\n//             //     //             var geojson = {\n//             //     //                 'vendor':1,\n//             //     //                 'path': route,\n//             //     //                 'timestamps':timestamps,\n//             //     //\n//             //     //             };\n//             //     //             console.log(geojson)\n//             //     //             Routes.push(geojson)\n//             //     //\n//             //     //\n//             //     //         }\n//             //     //     }));\n//             //     // });\n//             //\n//             //     $.when.apply($, gets).then(function() {\n//             //         console.log(saveJson)\n//             //         var jsonData=JSON.stringify(saveJson)\n//             //         download(jsonData,'route.json','text/plain')\n//             //         console.log('Routes:',Routes)\n//             //         resolve(Routes);\n//             //         // resolve([\n//             //         //     {\n//             //         //         \"vendor\": 1,\n//             //         //         \"path\": [\n//             //         //             [120.167057,30.185901],\n//             //         //             [120.165752,30.185723],\n//             //         //             [120.16581,30.188491],\n//             //         //             [120.190417,30.198224],\n//             //         //             [120.191971\t,30.204],\n//             //         //             [120.189622\t,30.20767],\n//             //         //             [120.182369\t,30.218973],\n//             //         //             [120.180889\t,30.222601],\n//             //         //             [120.200108\t,30.306856],\n//             //         //             [120.23477\t,30.311914],\n//             //         //             [120.246959\t,30.316748],\n//             //         //             [120.309708\t,30.387518],\n//             //         //             [120.312426\t,30.39154],\n//             //         //             [120.309069\t,30.400897],\n//             //         //             [120.302548\t,30.399632],],\n//             //         //\n//             //         //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n//             //         //     }])\n//             //     });\n//             // })\n//\n//             d3.json('http://localhost:5000/data/'+time+':00:00').then(function(data){\n//                 var count=0;\n//                 d3.json('./10.json').then(function (map) {\n//                    // console.log('map:',map)\n//                     data.forEach(d=>{\n//                         var tmp=d.split(',');\n//                         if(tmp[0]!=-1 && tmp[1]!=-1) {\n//                             if(parseInt(tmp[2])>=5){\n//                                 count++;\n//                                 var key=tmp[0]+','+tmp[1];\n//                                 console.log(map[key]);\n//                                 Routes.push(map[key]);\n//                             }\n//                             // if(tmp[0]>40&&tmp[0]<=60&&tmp[1]>40&&tmp[1]<=60){\n//                                 //   if (tmp[2] !== '0') {\n//                                 // var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n//                                 // gets.push($.ajax({\n//                                 //     type: 'GET',\n//                                 //     url: urlNow,\n//                                 //     success: function (r) {\n//                                 //         console.log('r:', r)\n//                                 //         //var json = JSON.parse(data);\n//                                 //         var plan = r.routes[0];\n//                                 //         var route = plan.geometry.coordinates;\n//                                 //         var timestamps = [0];//先设置每条路径1000stamp\n//                                 //         for (var i = 0; i < route.length; i++) {\n//                                 //             if (i !== 0) {\n//                                 //                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n//                                 //                 timestamps.push(dist + timestamps[i - 1])\n//                                 //             }\n//                                 //         }\n//                                 //         var geojson = {\n//                                 //             'vendor': 1,\n//                                 //             'path': route,\n//                                 //             'timestamps': timestamps,\n//                                 //\n//                                 //         };\n//                                 //         console.log(geojson)\n//                                 //         Routes.push(geojson)\n//                                 //         saveJson[tmp[0]+','+tmp[1]] = geojson\n//                                 //     },\n//                                 //     error:function(){\n//                                 //         console.log('err')\n//                                 //     }\n//                                 // }));\n//\n//                                 // }\n//                            // }\n//                         }\n//                     })\n//                     console.log('count:',count)\n//                    // console.log(Routes)\n//                 })\n//                 // url.forEach(function(value) {\n//                 //     console.log('url:',value)\n//                 //     gets.push($.ajax({\n//                 //         type: 'GET',\n//                 //         url: value,\n//                 //         success: function(data) {\n//                 //             console.log('data:',data)\n//                 //             //var json = JSON.parse(data);\n//                 //             var plan = data.routes[0];\n//                 //             var route = plan.geometry.coordinates;\n//                 //             var timestamps=[0];//先设置每条路径1000stamp\n//                 //             for(var i=0;i<route.length;i++){\n//                 //                 if(i!==0){\n//                 //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n//                 //                     timestamps.push(dist+timestamps[i-1])\n//                 //                 }\n//                 //             }\n//                 //             var geojson = {\n//                 //                 'vendor':1,\n//                 //                 'path': route,\n//                 //                 'timestamps':timestamps,\n//                 //\n//                 //             };\n//                 //             console.log(geojson)\n//                 //             Routes.push(geojson)\n//                 //\n//                 //\n//                 //         }\n//                 //     }));\n//                 // });\n//\n//                 // $.when.apply($, gets).then(function() {\n//                 //     console.log(saveJson)\n//                 //     var jsonData=JSON.stringify(saveJson)\n//                 //     download(jsonData,'route.json','text/plain')\n//                 //     console.log('Routes:',Routes)\n//                 //     resolve(Routes);\n//                 //\n//                 // });\n//             })\n//         });\n//     });\n//\n// };\n//每条路径按流量加线的数量\nlet getStep=function(step,trip){\n    let newTrip=[];\n    trip.forEach(d=>{\n        d+=3600/step;\n        newTrip.push(d)\n    });\n    return newTrip;\n};\nfunction getArea(){\n    d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\n        let re = /([-+]?[0-9]*\\.?[0-9]+)/g;\n        console.log('data1:', data)\n        data.forEach((d,index) => {\n            let tmp = d.value.match(re);\n            let tmpData = [];\n            for (let i = 0; i < tmp.length - 1; i += 2) {\n                tmpData.push([parseFloat(tmp[i + 1]), parseFloat(tmp[i])])\n            }\n            depData.push(tmpData)\n            depPolygon.push({\n                contour:tmpData,\n                in:0,\n                out:0,\n                number:index\n            })\n        });\n        depData.forEach(d => {\n            let sumlong = 0;\n            let sumlat = 0;\n            d.forEach(data => {\n                sumlong += data[0];\n                sumlat += data[1];\n            });\n            depCenter.push([sumlong / d.length, sumlat / d.length])\n        });\n        d3.csv(\"./edge_des_csv.csv\").then(function (data) {\n            let re = /([-+]?[0-9]*\\.?[0-9]+)/g;\n            console.log('data2:', data);\n            data.forEach((d,index)=> {\n                let tmp = d.value.match(re);\n                let tmpData = [];\n                for (let i = 0; i < tmp.length - 1; i += 2) {\n                    tmpData.push([parseFloat(tmp[i + 1]), parseFloat(tmp[i])])\n                }\n                desData.push(tmpData)\n\n                desPolygon.push({\n                    contour:tmpData,\n                    in:0,\n                    out:0,\n                    number:index\n                })\n\n\n            });\n            desData.forEach(d => {\n                let sumlong = 0;\n                let sumlat = 0;\n                d.forEach(data => {\n                    sumlong += data[0];\n                    sumlat += data[1];\n                });\n                desCenter.push([sumlong / d.length, sumlat / d.length])\n            });\n        })\n})\n}\n//获取流量数据\nfunction getRoute(time) {\n    return new Promise(resolve => {\n        // var gets = [];\n        // d3.json('http://localhost:5000/data/'+time).then(function (data) {\n        d3.json('http://192.168.111.1:8888/data/'+time).then(function (data) {\n                var count = 0;\n            d3.json('./10.json').then(function (map) {\n                // console.log('map:',map)\n                var routeData=[];\n                var sumMax=0;\n                data.forEach(d => {\n                    var tmp = d.split(',');\n                    if (tmp[0] != -1 && tmp[1] != -1) {\n                        if (parseInt(tmp[2]) >= 2) {\n\n                            depPolygon[parseInt(tmp[0])].out+=parseInt(tmp[2]);\n                            desPolygon[parseInt(tmp[1])].in+=parseInt(tmp[2]);\n                            count++;\n                            var key = tmp[0] + ',' + tmp[1];\n                            //  console.log(map[key]);\n                            var pre=[];\n                            var sum=0;\n                            var countD=[];\n                            map[key].path.forEach(d=>{\n                                if(pre.length==0){\n                                    pre=d\n                                }\n                                else{\n                                    // console.log('pre:',pre);\n                                    var m=getDistance(pre[0],pre[1],d[0],d[1]);\n                                    countD.push(m);\n                                    sum+=m;\n                                    pre=d;\n                                }\n                            });\n                            if(sum>=sumMax){\n                                sumMax=sum\n                            }\n//control color\n                            if(parseInt(tmp[2]) >= 2&& parseInt(tmp[2]) < 5){\n                                routeData.push({\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\n                                    'traffic':parseInt(tmp[2]),\n                                    \"color\":0,\n                                    \"path\":map[key].path,\n                                    \"timestamps\":countD\n                                })\n                                // console.log('path',map[key].path)\n                            }\n                            else if(parseInt(tmp[2]) >=5&&parseInt(tmp[2]) <20){\n                                routeData.push({\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\n                                    'traffic':parseInt(tmp[2]),\n                                    \"color\":1,\n                                    \"path\":map[key].path,\n                                    \"timestamps\":countD\n                                })\n                            }\n                            else if(parseInt(tmp[2]) >=20&&parseInt(tmp[2]) <100){\n                                routeData.push({\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\n                                    'traffic':parseInt(tmp[2]),\n                                    \"color\":2,\n                                    \"path\":map[key].path,\n                                    \"timestamps\":countD\n                                })\n                            }\n                            else if(parseInt(tmp[2]) >= 100&&parseInt(tmp[2]) <150){\n                                routeData.push({\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\n                                    'traffic':parseInt(tmp[2]),\n                                    \"color\":3,\n                                    \"path\":map[key].path,\n                                    \"timestamps\":countD\n                                })\n                            }\n                            else if(parseInt(tmp[2]) >= 150){\n                                routeData.push({\n                                    'od':parseInt(tmp[0])+','+parseInt(tmp[1]),\n                                    'traffic':parseInt(tmp[2]),\n                                    \"color\":4,\n                                    \"path\":map[key].path,\n                                    \"timestamps\":countD\n                                })\n                            }\n\n                        }\n\n                    }\n                });\n                let newRoutes=[];\n                //按照流量多加动画效果\n                routeData.forEach(d=>{\n                    var tmpTime=[time*3600];\n                    let preIndex=0;\n                    // console.log('timestamps:',d.timestamps)\n                    d.timestamps.forEach(t=>{\n                        // console.log('t:',t)\n                        tmpTime.push(tmpTime[preIndex]+(3600/sumMax)*t)//加上当前已经过去的小时的时间\n                        preIndex++;\n                    });\n                    d.timestamps=tmpTime;\n                    let tmpStep=tmpTime;\n                    for(let i=0;i<(d.traffic);i++){\n                        tmpStep=getStep((d.traffic),tmpStep);\n                        newRoutes.push({\n                            'od':d.od,\n                            'traffic':d.traffic,\n                            \"color\":d.color,\n                            \"path\":d.path,\n                            \"timestamps\":tmpStep\n                        })\n                    }\n                });\n                newRoutes.forEach(d=>{\n                    routeData.push(d)\n                })\n                // routeData.forEach(d=>{\n                //     Routes.push(d)\n                // })\n                Routes=routeData;\n                console.log('count:', count);\n                console.log('Routes:', Routes);\n                resolve('0')\n                // console.log(Routes)\n            })\n\n        })\n\n    });\n}\n\nlet match_points=[];\nlet match_map={};\nfunction getMatchdata(){\n    return new Promise(resolve => {\n        d3.json('./match.json').then(d=>{\n            console.log(\"match\",d);\n            d.forEach(dd=>{\n                if(dd['code']===\"Ok\"){\n                    dd['tracepoints'].forEach(p=>{\n                        if(p!==null && !match_map.hasOwnProperty(p['location'])){\n                            //去除重复的点。\n                            match_map[p['location']]=1;\n                            match_points.push({coordinates:[parseFloat(p['location'][0]),parseFloat(p['location'][1])],value:15});\n                        }\n                    })\n                }\n            });\n            resolve();\n        })\n    })\n\n}\n\n\n\nlet MCBAND = [12890594.86, 8362377.87, 5591021, 3481989.83, 1678043.12, 0];\n\n\nlet MC2LL = [\n    [1.410526172116255e-008, 8.983055096488720e-006, -1.99398338163310, 2.009824383106796e+002, -1.872403703815547e+002, 91.60875166698430, -23.38765649603339, 2.57121317296198, -0.03801003308653, 1.733798120000000e+007],\n    [-7.435856389565537e-009, 8.983055097726239e-006, -0.78625201886289, 96.32687599759846, -1.85204757529826, -59.36935905485877, 47.40033549296737, -16.50741931063887, 2.28786674699375, 1.026014486000000e+007],\n    [-3.030883460898826e-008, 8.983055099835780e-006, 0.30071316287616, 59.74293618442277, 7.35798407487100, -25.38371002664745, 13.45380521110908, -3.29883767235584, 0.32710905363475, 6.856817370000000e+006],\n    [-1.981981304930552e-008, 8.983055099779535e-006, 0.03278182852591, 40.31678527705744, 0.65659298677277, -4.44255534477492, 0.85341911805263, 0.12923347998204, -0.04625736007561, 4.482777060000000e+006],\n    [3.091913710684370e-009, 8.983055096812155e-006, 0.00006995724062, 23.10934304144901, -0.00023663490511, -0.63218178102420, -0.00663494467273, 0.03430082397953, -0.00466043876332, 2.555164400000000e+006],\n    [2.890871144776878e-009, 8.983055095805407e-006, -0.00000003068298, 7.47137025468032, -0.00000353937994, -0.02145144861037, -0.00001234426596, 0.00010322952773, -0.00000323890364, 8.260885000000000e+005],\n];\n\n\nlet bound=[12924083.26,4792883.01,12992448.86,4864389.46];\nfunction convertor(lng,lat,factor){\n    let x = factor[0] + factor[1] * Math.abs(lng)\n    let tmp = Math.abs(lat) / factor[9]\n    let y = factor[2]\n    for(let i=3;i<9;i++){\n        y += factor[i] * Math.pow(tmp, i-2);\n        x =  lng > 0?x: -x;\n        y = lat > 0?y: -y\n    }\n    return [x,y]\n}\n\nfunction mc2coordinate(x,y){\n    let factor = null;\n    MCBAND.map((index,value)=>{\n        if(y>value){\n            factor=MC2LL[index];\n        }\n    });\n    return convertor(x,y,factor);\n}\n\nfunction getBound(){\n    let min=mc2coordinate(bound[0],bound[1]);\n    let max=mc2coordinate(bound[2],bound[3]);\n    return [min,max];\n}\n\n\nlet root={};\nfunction Queue() {\n    let items = [];\n\n    // 向队列添加元素（一个或多个）\n    this.enqueue = function (element) {\n        if (element instanceof Array) items = items.concat(element);\n        else items.push(element);\n    };\n\n    // 从队列移除元素\n    this.dequeue = function () {\n        return items.shift();\n    };\n\n    // 返回队列中的第一个元素\n    this.front = function () {\n        return items[0];\n    };\n\n    // 判断队列是否为空\n    this.isEmpty = function () {\n        return items.length === 0;\n    };\n\n    // 返回队列的长度\n    this.size = function () {\n        return items.length;\n    };\n\n    // 清空队列\n    this.clear = function () {\n        items = [];\n    };\n\n    // 打印队列内的所有元素\n    this.print = function () {\n        console.log(items.toString());\n    };\n}\n\nfunction split(root,tag){\n    if(root['data'].length>tag){\n        let x1=root['bound'][0][0];\n        let y1=root['bound'][0][1];\n        let x2=root['bound'][1][0];\n        let y2=root['bound'][1][1];\n        let mid_vertical = (root['bound'][0][0]+root['bound'][1][0])/2;\n        let mid_horizontal = (root['bound'][0][1]+root['bound'][1][1])/2;\n        root['LU']={};\n        root['RU']={};\n        root['RD']={};\n        root['LD']={};\n\n        root['LU']['bound']=[[x1,mid_horizontal],[mid_vertical,y2]];\n        root['LD']['bound']=[[x1,y1],[mid_vertical,mid_horizontal]];\n        root['RU']['bound']=[[mid_vertical,mid_horizontal],[x2,y2]];\n        root['RD']['bound']=[[mid_vertical,y1],[x2,mid_horizontal]];\n\n\n        root['LD']['data']=[];\n        root['RU']['data']=[];\n        root['RD']['data']=[];\n        root['LU']['data']=[];\n        root['data'].forEach(d=>{\n            if(match_points[d].coordinates[0]<=mid_vertical){\n                if(match_points[d].coordinates[1]>mid_horizontal){\n                    root['LU']['data'].push(d);\n                }\n                else{\n                    root['LD']['data'].push(d);\n                }\n            }\n            else {\n                if(match_points[d].coordinates[1]>mid_horizontal){\n                    root['RU']['data'].push(d);\n                }\n                else{\n                    root['RD']['data'].push(d);\n                }\n            }\n        });\n\n        // split(root['LU'],tag);\n        // split(root['RU'],tag);\n        // split(root['RD'],tag);\n        // split(root['LD'],tag);\n    }\n}\n\n\nlet quardTree={}\n\nfunction getQuardTree(){\n   return new Promise(resolve=>{\n       d3.json('http://127.0.0.1:8888/quardTree').then((d)=>{\n           console.log('quard',d);\n           Object.keys(d).forEach(key=>{\n               quardTree[key]=d[key]\n           })\n           resolve();\n       })\n   })\n    //设置区域的上下左右\n}\n\n\nlet SpeedData=[];\n//获取time 时间点的所有道路点的速度信息\nfunction getBeijingSpeed(time){\n    SpeedData=[];\n    return new Promise(resolve => {\n        d3.json('http://10.72.100.14:8888/data/rootdata/'+time).then((data)=>{\n            console.log(data);\n            data.forEach(d=>{\n                SpeedData.push(d)\n            });\n            resolve();\n        });\n    })\n}\nlet pathlist=[];\n//获取速度信息对应的道路标号\nfunction getPathlist(){ //记录了速度数据集里面每个点的时间\n    pathlist=[];\n    return new Promise(resolve => {\n        d3.json('http://10.72.100.14:8888/data/pathlist').then((data)=>{\n            // console.log(data);\n            data.forEach(d=>{\n                pathlist.push(d)\n            });\n            resolve();\n        });\n    })\n}\n\nlet SpeedMap={};\nfunction getNodeSpeedMap(){\n    SpeedData.map((val,index)=>{\n        SpeedMap[pathlist[index]]=val;\n    })\n}\nlet point_speed={};\nfunction getPointSpeed(point_id){\n\n    return new Promise(resolve => {\n        if(!point_speed.hasOwnProperty(point_id)){\n            d3.json('http://10.72.100.14:8888/data/pointspeed/'+point_id).then((data)=>{\n                point_speed[point_id]=data;\n                resolve();\n            })\n        }\n        else resolve();\n    })\n\n}\n\nlet Real_match_map={};\n\nfunction getMatchMap(){\n    return new Promise(resolve => {\n        d3.json('http://127.0.0.1:8888/match_map').then((data)=>{\n            Object.keys(data).forEach(d=>{\n                Real_match_map[d]=data[d];\n            })\n        })\n    })\n}\n\n//获取Beijing的所有道路信息\nlet Beijingdata=[];\nfunction getBeiJingData(){\n    Beijingdata=[];\n    return new Promise(resolve => {\n        d3.json('http://127.0.0.1:8888/road_data').then((data)=>{\n            // console.log(data)\n            data.forEach(d=>{\n\n                if(Real_match_map.hasOwnProperty(d['link_id'])){\n                    // console.log('real_match',Real_match_map);\n                    Beijingdata.push({'name': d['link_id'],'coordinates': [parseFloat(Real_match_map[d['link_id']][0]),parseFloat(Real_match_map[d['link_id']][1]),],'value':SpeedMap[d['link_id']]})\n\n                }\n                else Beijingdata.push({'name': d['link_id'],'coordinates': [parseFloat(d['node_lng'])-0.00622,parseFloat(d['node_lat'])-0.00142],'value':SpeedMap[d['link_id']]})\n            });\n            resolve();\n        });\n    })\n}\n//\nlet pos_map={};\nfunction getposmap(){\n    return new Promise(resolve => {\n        d3.json('http://127.0.0.1:8888/pos_map').then((data)=>{\n            Object.keys(data).forEach(key=>{\n                let point=[];\n                point.push(parseFloat(data[key][0])-0.00622);\n                point.push(parseFloat(data[key][1])-0.00142);\n                pos_map[key]=point;\n            });\n            resolve();\n        });\n    })\n}\nlet neighbordata=[];\nfunction getneighbor(){\n\n    return new Promise(resolve => {\n        d3.json('http://127.0.0.1:8888/path_data').then((data)=>{\n\n            data.forEach(d=>{\n                let path=[];\n                d.forEach(dd=>{\n                    path.push(pos_map[dd])\n                });\n                neighbordata.push({path:path})\n            });\n            console.log('neighbor',neighbordata);\n            resolve();\n        });\n    })\n}\n\nlet Grid=[];\nfunction QuardBound(node){\n    if(node){\n        Grid.push({\n            contour:[[parseFloat(node['bound'][0][0]),parseFloat(node['bound'][0][1])],[parseFloat(node['bound'][0][0]),parseFloat(node['bound'][1][1])],[parseFloat(node['bound'][1][0]),parseFloat(node['bound'][1][1])],[parseFloat(node['bound'][1][0]),parseFloat(node['bound'][0][1])]]\n        })\n        QuardBound(node['LU'])\n        QuardBound(node['RU'])\n        QuardBound(node['LD'])\n        QuardBound(node['RD'])\n    }\n\n}\n\nfunction  _formatTime(t){\n    return `2017年${4+Math.floor(t/43200)}月${Math.floor((t-Math.floor((t/43200))*43200)/1440)}日${Math.floor((t%1440)/60)}时${Math.floor(t%60)}分`;\n    // return `${Math.floor(t%60)}.${Math.floor((t%1440)/60)}.${Math.floor((t-Math.floor((t/43200))*43200)/1440)}.${4+Math.floor(t/43200)}.2017`\n}\n\nfunction _formatDayTime(t){\n    //月，日，时\n    return `${4+Math.floor(t/43200)}:${Math.floor((t-Math.floor((t/43200))*43200)/1440)}:${(Math.floor((t%1440)/60))%24}:${Math.floor(t%60)}`;\n}\n\n\n\nlet predict_origin=new Map();\nlet predict_des=new Map();\n//获取预测流量数据\nfunction getPredictData(){\n    return new Promise( resolve => {\n        d3.csv('./Traffic_Predict_Data/prediction1-origin.csv').then(d=>{\n            d.map((x,index)=>{\n                // console.log('time',x.DepTime);\n                let date=new Date(x.DepTime);\n                // console.log('hour',date.getHours())\n                let hour=date.getHours();\n                if(!predict_origin.has(hour)){\n                    predict_origin.set(hour,{})\n                }\n                let tmp=predict_origin.get(hour)\n                tmp[x.Origin]=x.Trips\n            })\n            d3.csv('./Traffic_Predict_Data/prediction2-dep.csv').then(d=>{d.map((x,index)=>{\n                let date=new Date(x.DepTime);\n                // console.log('hour',date.getHours())\n                let hour=date.getHours();\n                    if(!predict_des.has(hour)){\n                        predict_des.set(hour,{})\n                    }\n                    let tmp=predict_des.get(hour)\n                        tmp[x.Destination]=x.Trips;\n                    });\n                resolve();\n                }\n            )\n            }\n        )\n    })\n}\nlet realOrg=new Map();\nlet realDes=new Map();\n//获取真实流量数据\nfunction getRealData(){\n    d3.csv('./Traffic_Predict_Data/origin.csv').then(d=>{\n            d.map((x,index)=>{\n                // console.log('time',x.DepTime);\n                let date=new Date(x.DepTime);\n                // console.log('hour',date.getHours())\n                let hour=date.getHours();\n                if(!realOrg.has(hour)){\n                    realOrg.set(hour,{})\n                }\n                let tmp=realOrg.get(hour)\n                tmp[x.Origin]=x.Trips\n            })\n            d3.csv('./Traffic_Predict_Data/destination.csv').then(d=>{d.map((x,index)=>{\n                    let date=new Date(x.DepTime);\n                    // console.log('hour',date.getHours())\n                    let hour=date.getHours();\n                    if(!realDes.has(hour)){\n                        realDes.set(hour,{})\n                    }\n                    let tmp=realDes.get(hour)\n                    tmp[x.Destination]=x.Trips;\n                });\n                }\n            )\n        }\n    )\n}\nlet blockRoute=[];\nlet count=[];\nlet blockData=new Map();\nfunction getBlockData(){\n    d3.csv('./blockdetect/anomalyFile.csv').then(d=>{\n        d.map(x=>{\n            console.log(x)\n            console.log(x['occurencingTime'])\n            let da=new Date(x['occurencingTime']);\n            console.log('da',da)\n            let h=da.getHours();\n            let m=da.getMinutes();\n            let s=da.getSeconds();\n            let t=h*3600+m*60+s;\n            blockData.set(t,[parseFloat(x['longitude']),parseFloat(x['latitude'])])\n        })\n        console.log(blockData)\n    })\n}\nfunction getBlockRoute(){\n    return new Promise(resolve => {\n        d3.csv('./blockdetect/GPS_588_merge.csv').then(d=>{\n            console.log(d);\n            let path=[];\n            let timestamps=[];\n            let m=0;\n            d.map((x,index)=>{\n                // console.log('x',x);\n                // console.log('lat',x.lat)\n                let da=new Date(x['date']);\n                let h=da.getHours();\n                let m=da.getMinutes();\n                let s=da.getSeconds();\n                let t=h*3600+m*60+s;\n                if(count.indexOf(t)===-1&&m%5===0){\n                    m++;\n                    count.push(t);\n                    timestamps.push(t);\n                    path.push([parseFloat(x['Long']),parseFloat(x['Lat'])])\n                    if(m%1===0){\n                        blockData.set(t,[parseFloat(x['Long']),parseFloat(x['Lat'])])\n\n                    }\n                }\n            })\n            blockRoute.push({\n                path:path,\n                timestamps:timestamps,\n                color:0\n            })\n\n\n            resolve();\n        })\n\n    })\n\n\n}\n//设置预测流量数据\nfunction setPredictData(hour){\n    console.log('org',predict_origin);\n    let data=[];\n    let tmp=predict_origin.get(parseInt(hour));\n    console.log('tmp',tmp)\n    for(let key in tmp){\n        // console.log('key',key)\n        data.push({\n            centroid: depCenter[parseInt(key)],\n            value:tmp[key]\n        })\n    }\n    return data;\n}\n//设置实际流量数据\nfunction setRealData(hour){\n    // console.log('org',predict_origin)\n    let data=[];\n    let tmp=realOrg.get(parseInt(hour));\n    console.log('tmp',tmp);\n    for(let key in tmp){\n        // console.log('key',key)\n        data.push({\n            centroid: depCenter[parseInt(key)],\n            value:tmp[key]\n        })\n    }\n    console.log('data',data);\n    return data;\n\n}\n// getRoute.then(function () {\n//     console.log('get')\n// });\nlet tmpIcon=[];\n//nebula 尝试\nconst features = {\n    type: 'FeatureCollection',\n    features: [\n    ],\n};\nconst selectedFeatureIndexes = [];\n\n\n//记录折线图的总时长\nlet time_interval = 100;//两天的时长\nlet heatmap_interval=672;//七天的数据\n\nlet area_interval=48;//一天的时长\n\n//河流图\n\n//获取请求数据\nlet queryData=[]\nfunction getQueryData(time){\n    return new Promise(resolve => {\n        d3.json('http://10.72.100.14:8888/query/'+time).then(d=>{\n            d.forEach(dd=>{\n                queryData.push({\n                    inbound: 72,\n                    outbound: 74,\n                    from:{\n                        coordinates:[parseFloat(dd[3]),parseFloat(dd[4])]\n                    },\n                    to:{\n                        coordinates:[parseFloat(dd[5]),parseFloat(dd[6])]\n                    }\n                });\n            });\n            resolve();\n        })\n    })\n}\n\n//\nlet newDayquery=[];\nfunction getQueryDataforArea(time){\n    return new Promise(resolve => {\n        d3.json('http://10.72.100.14:8888/query/'+(time/15)).then(d=>{\n            d.forEach(dd=>{\n                let s=_formatDayTime(time);\n                let ss=s.split(':');\n                newDayquery.push({\n                    time:ss[2],\n                    from:{coordinates:[parseFloat(dd[3]),parseFloat(dd[4])]},\n                    to:{coordinates:[parseFloat(dd[5]),parseFloat(dd[6])]},\n                })//是小时\n            });\n            resolve();\n        })\n    })\n}\n\n\nlet onepathdata=[];\nfunction getOnePath(start,end){\n    return new Promise(resolve => {\n        let urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + start[0]+ ',' + start[1] + ';' + end[0]+ ',' + end[1]  + '?steps=true&geometries=geojson&access_token=' + \"pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJja21haDcxY3Axcmg2MnhrbmZqdHVraXlrIn0.5Yy3Rgb1I1vohpAjeMKUVw\";\n        d3.json(urlNow).then((d)=>{\n            onepathdata.push({\n                path:d.routes[0].geometry.coordinates,\n                color:\"f88c24\"\n            });\n            console.log('Onepathdata:',onepathdata);\n            resolve();\n        })\n    })\n}\nfunction getDrivePath(start,end){\n    return new Promise(resolve => {\n        let urlDrive = 'https://api.mapbox.com/directions/v5/mapbox/driving/' + start[0]+ ',' + start[1] + ';' + end[0]+ ',' + end[1]  + '?steps=true&geometries=geojson&access_token=' + \"pk.eyJ1IjoiemhpZ3VhbmdkYSIsImEiOiJja21haDcxY3Axcmg2MnhrbmZqdHVraXlrIn0.5Yy3Rgb1I1vohpAjeMKUVw\";\n        d3.json(urlDrive).then((d)=>{\n            onepathdata.push({\n                path:d.routes[0].geometry.coordinates,\n                color:'1ca9e6'\n            });\n            console.log('Onepathdata:',onepathdata);\n            resolve();\n        })\n\n    })\n}\n\n\nexport default class RouteMap extends Component {\n\n    constructor(props) {\n        super(props);\n         // const [value, setValue] = React.useState([0]);\n        this.state = {\n            time: 54000,\n            hour:-1,\n            depV:false,\n            desV:false,\n            area:[],\n            options:[],\n            block:false,\n            pre_org:[],\n            pre_des:[],\n            real_org:[],\n            real:false,\n            showPredict:true,\n            blockIcon:[],\n            showRoute:true,\n            modeId: null,\n            modeHandler: null,\n            //editlayer 数据\n            features: features,\n            modeConfig:{},\n            mode: DrawPolygonMode,\n            ODTag: 3,\n            Beijing: [],\n            selectedFeatureIndexes: [], //\n            BeijingSpeedData:[],\n            Quater:-1,\n            //记录在一个多边形内的点，二维数组\n            inPoints:[],\n            //记录点的速度\n            pointData:[],\n            //让表格只渲染一次\n            showTag:0,\n            piedata:[],\n            //区域内速度点河流图数据\n            streamData:[],\n            avarageData:[],\n            match_data:[],\n            Grid:[],\n            ToolTag:0,\n            heatdata:[],\n            arcData:[],\n            querySearchData:[],\n            raidData:[],\n            A2BAreaData:[],\n            onePath:[],\n            moduleTag:0,\n        };\n    }\n    componentDidMount() {\n        getArea();\n        let p = getPredictData();\n        p.then(function () {\n            // this.setState({\n            //     pre_origin: predict_origin,\n            //     pre_des : predict_des\n            // })\n        }.bind(this))\n\n        getRealData();\n\n        let p2 = getBlockRoute();\n        p2.then(function () {\n            console.log('blockRoute', blockRoute);\n            this.setState({\n                blockRoute: blockRoute\n            })\n        }.bind(this));\n        let button = document.getElementById('start');\n        console.log(button);\n        // setTimeout(()=>{button.click()},1200);\n\n        let p4 = getBeijingSpeed(1800);\n        let p_getMatchmap=getMatchMap();\n        p_getMatchmap.then(function(){\n            p4.then(function () {\n                let p5 = getPathlist();\n                p5.then(function () {\n                    getNodeSpeedMap();\n                    let p3 = getBeiJingData();\n                    p3.then(function () {\n                        // console.log('beijing',Beijingdata);\n                        this.setState({\n                            BeijingSpeedData: Beijingdata\n                        })\n                        let pp = getpie();\n                        pp.then(function () {\n                            this.setState({\n                                piedata: piedata\n                            })\n                            // let pie = new Pie('pie', {\n                            //     appendPadding: 10,\n                            //     data: this.state.piedata,\n                            //     angleField: 'value',\n                            //     colorField: 'type',\n                            //     radius: 1,\n                            //     innerRadius: 0.64,\n                            //\n                            //     label: {\n                            //         type: 'inner',\n                            //         offset: '-50%',\n                            //         autoRotate: false,\n                            //         style: { textAlign: 'center' },\n                            //         formatter: ({ percent }) => `${(percent * 100).toFixed(0)}%`,\n                            //     },\n                            //     statistic: {\n                            //         title: {\n                            //             offsetY: -8,\n                            //         },\n                            //         content: {\n                            //             offsetY: -4,\n                            //         },\n                            //     },\n                            // });\n                            // pie.render();\n                        }.bind(this));\n                    }.bind(this));\n                }.bind(this));\n            }.bind(this));\n        });\n\n\n        let p_match = getMatchdata();\n        p_match.then(function () {\n            this.setState({\n                match_data: match_points\n            })\n\n        }.bind(this));\n\n        let p_Quard = getQuardTree();\n        p_Quard.then(function () {\n            console.log('quardTrue',quardTree);\n\n            QuardBound(quardTree);\n\n            this.setState({\n                Grid:Grid\n            })\n        }.bind(this));\n\n        let time=this.state.time;\n        let promiseG=[];\n        for(let i=-area_interval;i<area_interval;i++){\n            if(time+i*15>=0 && time+i*15<87840 ){//\n                // console.log('speed:',Math.floor((time+i*15)/15));\n                promiseG.push(getQueryDataforArea(time+i*15));\n            }\n        }\n        Promise.all(promiseG).then(function(){\n            this.setState({\n                querySearchData:newDayquery\n            })\n        }.bind(this));\n        let p_getPath=getOnePath([116.44392013549806,\n            39.912205075917015],[\n            116.47885322570801,\n            39.93280820087599\n        ]);\n        let p_getDrive=getDrivePath([116.44392013549806,\n            39.912205075917015],[\n            116.47885322570801,\n            39.93280820087599\n        ]);\n        Promise.all([p_getPath,p_getDrive]).then(\n            function (){\n                this.setState({\n                    onePath:onepathdata\n                })\n            }.bind(this)\n        )\n    }\n\n\n\n        // const editlayer=new EditableGeoJsonLayer({\n        //     id: 'editlayer',\n        //     data: this.state.features,\n        //     mode: this.state.mode,\n        //     selectedFeatureIndexes,\n        //     onEdit: ({ updatedData }) => {\n        //         this.setState({\n        //             data: updatedData,\n        //         });\n        //     }\n        // });\n        // getBlockData();\n\n        // this.setState({\n        //     depPolygon:depPolygon,\n        //     desPolygon:desPolygon\n        // })\n\n    componentWillUnmount() {\n        // if (this._animationFrame) {\n        //     window.cancelAnimationFrame(this._animationFrame);\n        // }\n    }\n//get route from mapbox\n    getRoute(){\n        d3.csv(\"./edge_dep_csv.csv\").then(function (data) {\n            let re=/([-+]?[0-9]*\\.?[0-9]+)/g;\n            console.log('data1:',data)\n            data.forEach(d=>{\n                let tmp=d.value.match(re)\n                let tmpData=[];\n                for(let i=0;i<tmp.length-1;i+=2){\n                    tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\n                }\n                depData.push(tmpData)\n            })\n            depData.forEach(d=>{\n                let sumlong=0\n                let sumlat=0;\n                d.forEach(data=>{\n                    sumlong+=data[0];\n                    sumlat+=data[1];\n                })\n                depCenter.push([sumlong/d.length,sumlat/d.length])\n            })\n            d3.csv(\"./edge_des_csv.csv\").then(function (data) {\n                let re=/([-+]?[0-9]*\\.?[0-9]+)/g\n                console.log('data2:',data)\n                data.forEach(d=>{\n                    let tmp=d.value.match(re)\n                    let tmpData=[];\n                    for(let i=0;i<tmp.length-1;i+=2){\n                        tmpData.push([parseFloat(tmp[i+1]),parseFloat(tmp[i])])\n                    }\n                    desData.push(tmpData)\n                })\n                desData.forEach(d=>{\n                    let sumlong=0;\n                    let sumlat=0;\n                    d.forEach(data=>{\n                        sumlong+=data[0];\n                        sumlat+=data[1];\n                    })\n                    desCenter.push([sumlong/d.length,sumlat/d.length])\n                });\n                // d3.json('http://localhost:5000/data/12:00:00').then(function(data){\n                //     data.forEach(d=>{\n                //         var tmp=d.split(',');\n                //         if(tmp[0]!=-1 && tmp[1]!=-1) {\n                //             if(tmp[0]>46&&tmp[0]<=60){\n                //              //   if (tmp[2] !== '0') {\n                //                 var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n                //                 gets.push($.ajax({\n                //                     type: 'GET',\n                //                     url: urlNow,\n                //                     success: function (r) {\n                //                         console.log('r:', r)\n                //                         //var json = JSON.parse(data);\n                //                         var plan = r.routes[0];\n                //                         var route = plan.geometry.coordinates;\n                //                         var timestamps = [0];//先设置每条路径1000stamp\n                //                         for (var i = 0; i < route.length; i++) {\n                //                             if (i !== 0) {\n                //                                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n                //                                 timestamps.push(dist + timestamps[i - 1])\n                //                             }\n                //                         }\n                //                         var geojson = {\n                //                             'vendor': 1,\n                //                             'path': route,\n                //                             'timestamps': timestamps,\n                //\n                //                         };\n                //                         console.log(geojson)\n                //                         Routes.push(geojson)\n                //                         saveJson[tmp[0]+','+tmp[1]] = geojson\n                //                     },\n                //                     error:function(){\n                //                         console.log('err')\n                //                     }\n                //                 }));\n                //\n                //            // }\n                //             }\n                //         }\n                //     })\n                //     // url.forEach(function(value) {\n                //     //     console.log('url:',value)\n                //     //     gets.push($.ajax({\n                //     //         type: 'GET',\n                //     //         url: value,\n                //     //         success: function(data) {\n                //     //             console.log('data:',data)\n                //     //             //var json = JSON.parse(data);\n                //     //             var plan = data.routes[0];\n                //     //             var route = plan.geometry.coordinates;\n                //     //             var timestamps=[0];//先设置每条路径1000stamp\n                //     //             for(var i=0;i<route.length;i++){\n                //     //                 if(i!==0){\n                //     //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n                //     //                     timestamps.push(dist+timestamps[i-1])\n                //     //                 }\n                //     //             }\n                //     //             var geojson = {\n                //     //                 'vendor':1,\n                //     //                 'path': route,\n                //     //                 'timestamps':timestamps,\n                //     //\n                //     //             };\n                //     //             console.log(geojson)\n                //     //             Routes.push(geojson)\n                //     //\n                //     //\n                //     //         }\n                //     //     }));\n                //     // });\n                //\n                //     $.when.apply($, gets).then(function() {\n                //         console.log(saveJson)\n                //         var jsonData=JSON.stringify(saveJson)\n                //         download(jsonData,'route.json','text/plain')\n                //         console.log('Routes:',Routes)\n                //         resolve(Routes);\n                //         // resolve([\n                //         //     {\n                //         //         \"vendor\": 1,\n                //         //         \"path\": [\n                //         //             [120.167057,30.185901],\n                //         //             [120.165752,30.185723],\n                //         //             [120.16581,30.188491],\n                //         //             [120.190417,30.198224],\n                //         //             [120.191971\t,30.204],\n                //         //             [120.189622\t,30.20767],\n                //         //             [120.182369\t,30.218973],\n                //         //             [120.180889\t,30.222601],\n                //         //             [120.200108\t,30.306856],\n                //         //             [120.23477\t,30.311914],\n                //         //             [120.246959\t,30.316748],\n                //         //             [120.309708\t,30.387518],\n                //         //             [120.312426\t,30.39154],\n                //         //             [120.309069\t,30.400897],\n                //         //             [120.302548\t,30.399632],],\n                //         //\n                //         //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n                //         //     }])\n                //     });\n                // })\n\n                d3.json('http://localhost:5000/data/0:00:00').then(function(data){\n                    var count=0;\n                    d3.json('./10.json').then(function (map) {\n                        // console.log('map:',map)\n                        data.forEach(d=>{\n                            var tmp=d.split(',');\n                            if(tmp[0]!=-1 && tmp[1]!=-1) {\n                                if(parseInt(tmp[2])>=5){\n                                    count++;\n                                    var key=tmp[0]+','+tmp[1];\n                                    console.log(map[key]);\n                                    Routes.push(map[key]);\n                                }\n                                // if(tmp[0]>40&&tmp[0]<=60&&tmp[1]>40&&tmp[1]<=60){\n                                //   if (tmp[2] !== '0') {\n                                // var urlNow = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + depCenter[tmp[0]][0].toFixed(6) + ',' + depCenter[tmp[0]][1].toFixed(6) + ';' + desCenter[tmp[1]][0].toFixed(6) + ',' + desCenter[tmp[1]][1].toFixed(6) + '?steps=true&geometries=geojson&access_token=' + MAPBOX_TOKEN;\n                                // gets.push($.ajax({\n                                //     type: 'GET',\n                                //     url: urlNow,\n                                //     success: function (r) {\n                                //         console.log('r:', r)\n                                //         //var json = JSON.parse(data);\n                                //         var plan = r.routes[0];\n                                //         var route = plan.geometry.coordinates;\n                                //         var timestamps = [0];//先设置每条路径1000stamp\n                                //         for (var i = 0; i < route.length; i++) {\n                                //             if (i !== 0) {\n                                //                 var dist = getDistance(route[i - 1][0], route[i - 1][1], route[i][0], route[i][1]) * 50;\n                                //                 timestamps.push(dist + timestamps[i - 1])\n                                //             }\n                                //         }\n                                //         var geojson = {\n                                //             'vendor': 1,\n                                //             'path': route,\n                                //             'timestamps': timestamps,\n                                //\n                                //         };\n                                //         console.log(geojson)\n                                //         Routes.push(geojson)\n                                //         saveJson[tmp[0]+','+tmp[1]] = geojson\n                                //     },\n                                //     error:function(){\n                                //         console.log('err')\n                                //     }\n                                // }));\n\n                                // }\n                                // }\n                            }\n                        })\n                        console.log('count:',count)\n                        this.layers[1].setData(Routes)\n                        // resolve(Routes);\n                        // console.log(Routes)\n                    })\n\n                    // url.forEach(function(value) {\n                    //     console.log('url:',value)\n                    //     gets.push($.ajax({\n                    //         type: 'GET',\n                    //         url: value,\n                    //         success: function(data) {\n                    //             console.log('data:',data)\n                    //             //var json = JSON.parse(data);\n                    //             var plan = data.routes[0];\n                    //             var route = plan.geometry.coordinates;\n                    //             var timestamps=[0];//先设置每条路径1000stamp\n                    //             for(var i=0;i<route.length;i++){\n                    //                 if(i!==0){\n                    //                     var dist=getDistance(route[i-1][0],route[i-1][1],route[i][0],route[i][1])*50;\n                    //                     timestamps.push(dist+timestamps[i-1])\n                    //                 }\n                    //             }\n                    //             var geojson = {\n                    //                 'vendor':1,\n                    //                 'path': route,\n                    //                 'timestamps':timestamps,\n                    //\n                    //             };\n                    //             console.log(geojson)\n                    //             Routes.push(geojson)\n                    //\n                    //\n                    //         }\n                    //     }));\n                    // });\n\n                    // $.when.apply($, gets).then(function() {\n                    //     console.log(saveJson)\n                    //     var jsonData=JSON.stringify(saveJson)\n                    //     download(jsonData,'route.json','text/plain')\n                    //     console.log('Routes:',Routes)\n                    //     resolve(Routes);\n                    //     // resolve([\n                    //     //     {\n                    //     //         \"vendor\": 1,\n                    //     //         \"path\": [\n                    //     //             [120.167057,30.185901],\n                    //     //             [120.165752,30.185723],\n                    //     //             [120.16581,30.188491],\n                    //     //             [120.190417,30.198224],\n                    //     //             [120.191971\t,30.204],\n                    //     //             [120.189622\t,30.20767],\n                    //     //             [120.182369\t,30.218973],\n                    //     //             [120.180889\t,30.222601],\n                    //     //             [120.200108\t,30.306856],\n                    //     //             [120.23477\t,30.311914],\n                    //     //             [120.246959\t,30.316748],\n                    //     //             [120.309708\t,30.387518],\n                    //     //             [120.312426\t,30.39154],\n                    //     //             [120.309069\t,30.400897],\n                    //     //             [120.302548\t,30.399632],],\n                    //     //\n                    //     //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n                    //     //     }])\n                    // });\n                })\n            });\n        });\n    }\n//routeTip\n//     _renderTooltip() {\n//         const {hoveredObject, pointerX, pointerY} = this.state || {};\n//         return hoveredObject && (\n//             <div className=\"tooltip\" style={{color:'#ffffff',position: 'absolute', zIndex: 1, pointerEvents: 'none', left: pointerX, top: pointerY}}>\n//                 <div>\n//                     <b>O-D: </b>\n//                     <span>{hoveredObject.od}</span>\n//                 </div>\n//                 <div>\n//                     <b>Traffic: </b>\n//                     <span>{hoveredObject.traffic}</span>\n//                 </div>\n//\n//             </div>\n//\n//         );\n//     }\n//areaTipDep\n    _renderTooltipDep() {\n        const { depObject,  depX,  depY} = this.state || {};\n        return depObject && (\n            <div className=\"tooltip\" style={{color:'#00ffff',position: 'absolute', zIndex: 1, pointerEvents: 'none', left: depX, top: depY}}>\n                <div>\n                    <b>区域 id: </b>\n                    <span>{depObject.number}</span>\n                </div>\n                <div>\n                    <b>驶出流量: </b>\n                    <span>{depObject.out}</span>\n                </div>\n            </div>\n        );\n    }\n    //areaTipDes\n    _renderTooltipDes() {\n        const { desObject, desX, desY} = this.state || {};\n        return desObject && (\n            <div className=\"tooltip\" style={{color:'#00ffff',position: 'absolute', zIndex: 1, pointerEvents: 'none', left: desX, top: desY}}>\n                <div>\n                    <b>区域: </b>\n                    <span>{desObject.number}</span>\n                </div>\n\n                <div>\n                    <b>驶入流量: </b>\n                    <span>{desObject.in}</span>\n                </div>\n            </div>\n\n        );\n    }\n\n    // _renderDrawSelectBar=()=>{\n    //     return (\n    //         {/*<div*/}\n    //         {/*    style={{ position: \"absolute\", top: 0, right: 0, maxWidth: \"320px\" }}*/}\n    //         {/*>*/}\n    //         {/*    <select onChange={this._switchMode}>*/}\n    //         {/*        <option value=\"\">--Please choose a draw mode--</option>*/}\n    //         {/*        {MODES.map((mode) => (*/}\n    //         {/*            <option key={mode.id} value={mode.id}>*/}\n    //         {/*                {mode.text}*/}\n    //         {/*            </option>*/}\n    //         {/*        ))}*/}\n    //         {/*    </select>*/}\n    //         {/*</div>*/}\n    //     );\n    // };\n    _getPredictData(){\n        if(this.state.showPredict){\n            return this.state.real?this.state.real_org:this.state.pre_org\n        }\n        else return [{\n            centroid: [0,0],\n            value:[0,0]\n        }]\n    }\n    // _switchMode = (evt) => {\n    //     const modeId =\n    //         evt.target.value === this.state.modeId ? null : evt.target.value;\n    //     const mode = MODES.find((m) => m.id === modeId);\n    //     const modeHandler = mode ? new mode.handler() : null;\n    //     this.setState({ modeId, modeHandler });\n    // };\n\n    //转换字符串\n    _hex2rgb(hex) {\n        const value = parseInt(hex, 16);\n        return [16, 8, 0].map((shift) => ((value >> shift) & 0xff) / 255);\n    }\n    _getDeckColorForFeature(str, bright, alpha) {\n        let s=this._hex2rgb(str);\n        console.log('str',s);\n\n        const color = s.map((c) => c * bright * 255);\n\n        return [...color, alpha * 255];\n    }\n\n    _renderLayers() {\n        const {\n            // buildings = DATA_URL.BUILDINGS,\n            trailLength = 120,\n            theme = DEFAULT_THEME,\n            // TripsLayer=new TripsLayer({\n            //     id: 'trips',\n            //     //data: trips,\n            //     // data:[\n            //     //     {\n            //     //         \"vendor\": 1,\n            //     //         \"path\": [\n            //     //             [120.167057,30.185901],\n            //     //             [120.165752,30.185723],\n            //     //             [120.16581,30.188491],\n            //     //             [120.190417,30.198224],\n            //     //             [120.191971\t,30.204],\n            //     //             [120.189622\t,30.20767],\n            //     //             [120.182369\t,30.218973],\n            //     //             [120.180889\t,30.222601],\n            //     //             [120.200108\t,30.306856],\n            //     //             [120.23477\t,30.311914],\n            //     //             [120.246959\t,30.316748],\n            //     //             [120.309708\t,30.387518],\n            //     //             [120.312426\t,30.39154],\n            //     //             [120.309069\t,30.400897],\n            //     //             [120.302548\t,30.399632],],\n            //     //\n            //     //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n            //     //     }],\n            //     data:Routes,\n            //     getPath: d => d.path,\n            //     getTimestamps: d => d.timestamps,\n            //     getColor: d => (d.vendor === 0 ? theme.trailColor0 : theme.trailColor1),\n            //     opacity: 0.3,\n            //     widthMinPixels: 2,\n            //     rounded: true,\n            //     trailLength,\n            //     currentTime: this.state.time,\n            //\n            //     shadowEnabled: false\n            // }),\n        } = this.props;\n\n        const layers=[\n            // new ScatterplotLayer({\n            //     id: 'Beijing',\n            //     data: this.state.Beijing,\n            //     pickable: true,\n            //     opacity: 0.8,\n            //     stroked: true,\n            //     filled: true,\n            //     radiusScale: 1,\n            //     radiusMinPixels: 1,\n            //     radiusMaxPixels: 10,\n            //     lineWidthMinPixels: 0.1,\n            //     getPosition: d =>{ return d['coordinates']} ,\n            //     getRadius: d => 10,\n            //     getFillColor: d => [255, 140, 0],\n            //     getLineColor: d => [0, 0, 0]\n            // }),\n\n            // new PolygonLayer({\n            //     id:'Grid-layer',\n            //     data:this.state.Grid,\n            //     pickable: true,\n            //     stroked: true,\n            //     filled: false,\n            //     wireframe: true,\n            //     lineWidthMinPixels: 1,\n            //     getPolygon: d => {\n            //\n            //         return d.contour},\n            //     getLineColor: [80, 80, 80],\n            //     getLineWidth: 2,\n            // }),\n            new PathLayer({\n                id: 'path-layer',\n                data:this.state.onePath,\n                pickable: true,\n                widthScale: 30,\n                widthMinPixels: 2,\n                getPath: d => {return d.path},\n                getColor: d => this._getDeckColorForFeature(d.color,1,0.8),\n                getWidth: d => 1\n            }),\n            new ColumnLayer({\n                id: 'Speed-layer',\n                data: this.state.BeijingSpeedData,\n                // data: this.state.match_data,\n                diskResolution: 12,\n                radius: 10,\n                // extruded: true,\n                extruded: false,\n                pickable: true,\n                stroked:true,\n                elevationScale: 3,\n                getLineWidth:0.5,\n                getPosition: d => d.coordinates,\n                getFillColor: d => {\n                    if(!d.value){return [255,255,255,0]}\n                    else if(parseInt(d.value)<20) return colorRange[1];\n                    else if(parseInt(d.value)<30&&parseInt(d.value)>=20) return colorRange[2];\n                    else if(parseInt(d.value)>=30&& parseInt(d.value)<40)return colorRange[3];\n                    else if(parseInt(d.value)>=40 && parseInt(d.value)<50)return colorRange[4];\n                    else if(parseInt(d.value)>=50 )return colorRange[5];\n                    else return colorRange[0];\n\n\n\n                    // if (d .value/10<= 5) {\n                    //     return colorRange[d.value/10]\n                    // } else {\n                    //     return colorRange[5]\n                    // }\n                },\n\n                getLineColor: d=>{\n                    if(!d.value)return [0,0,0,0];\n                    else return [0,0,0];\n                },\n                getElevation: d =>{\n                    // if(!d.value)return 0.05;\n                    // else{\n                    if(!d.value){return 0}\n                    else if(parseInt(d.value)<20) return d.value*70*0.14/20;\n                    else if(parseInt(d.value)<30&&parseInt(d.value)>=20) return 9.8+(d.value-20)*70*0.41/10;\n                    else if(parseInt(d.value)>=30&& parseInt(d.value)<40)return 38.5+(d.value-30)*70*0.33/10;\n                    else if(parseInt(d.value)>=40 && parseInt(d.value)<50)return 61.6+(d.value-40)*70*0.11/10;\n                    else if(parseInt(d.value)>=50 )return d.value+20;\n\n                    // }\n                },\n                onHover:(d)=>{// 该点的一段时间内的数据\n                    // this.setState({\n                    //     lineData:\n                    // })\n                    // debugger\n                    if(d.hasOwnProperty('object')){\n                        console.log(d.object['name']);\n                    }\n                    if(d.hasOwnProperty('object') &&this.state.showTag===0 && this.state.pointData.length===0){\n\n                        if(SpeedMap.hasOwnProperty(d)){//SpeedMap 里面有速度再取，这时候speedMap肯定有数值了\n                            console.log('data:',d);\n                            let p1=getPointSpeed(d.object['name']);\n                            p1.then(function(){\n                                let pointData=[];\n                                let time=this.state.time;\n                                for(let i=-time_interval;i<time_interval;i++){\n                                    if(time+i*15>=0 && time+i*15<87840){\n                                        console.log('speed:',Math.floor((time+i*15)/15))\n                                        pointData.push({'speed':point_speed[d.object['name']][Math.floor((time+i*15)/15)],'time':_formatTime(Math.floor((time+i*15)))})\n                                    }\n                                }\n                                console.log('pointdata',pointData);\n                                this.setState({\n                                    pointData:pointData\n                                });\n\n                                G2.registerShape('point', 'breath-point', {\n                                    draw(cfg, container) {\n                                        const data = cfg.data;\n                                        const point = { x: cfg.x, y: cfg.y };\n                                        const group = container.addGroup();\n                                        if (data['time'] === _formatTime(Math.floor((time)))) {\n                                            const decorator1 = group.addShape('circle', {\n                                                attrs: {\n                                                    x: point.x,\n                                                    y: point.y,\n                                                    r: 10,\n                                                    fill: cfg.color,\n                                                    opacity: 0.5,\n                                                },\n                                            });\n                                            const decorator2 = group.addShape('circle', {\n                                                attrs: {\n                                                    x: point.x,\n                                                    y: point.y,\n                                                    r: 10,\n                                                    fill: cfg.color,\n                                                    opacity: 0.5,\n                                                },\n                                            });\n                                            const decorator3 = group.addShape('circle', {\n                                                attrs: {\n                                                    x: point.x,\n                                                    y: point.y,\n                                                    r: 10,\n                                                    fill: cfg.color,\n                                                    opacity: 0.5,\n                                                },\n                                            });\n                                            decorator1.animate(\n                                                {\n                                                    r: 20,\n                                                    opacity: 0,\n                                                },\n                                                {\n                                                    duration: 1800,\n                                                    easing: 'easeLinear',\n                                                    repeat: true,\n                                                }\n                                            );\n                                            decorator2.animate(\n                                                {\n                                                    r: 20,\n                                                    opacity: 0,\n                                                },\n                                                {\n                                                    duration: 1800,\n                                                    easing: 'easeLinear',\n                                                    repeat: true,\n                                                    delay: 600,\n                                                }\n                                            );\n                                            decorator3.animate(\n                                                {\n                                                    r: 20,\n                                                    opacity: 0,\n                                                },\n                                                {\n                                                    duration: 1800,\n                                                    easing: 'easeLinear',\n                                                    repeat: true,\n                                                    delay: 1200,\n                                                }\n                                            );\n                                            group.addShape('circle', {\n                                                attrs: {\n                                                    x: point.x,\n                                                    y: point.y,\n                                                    r: 6,\n                                                    fill: cfg.color,\n                                                    opacity: 0.7,\n                                                },\n                                            });\n                                            group.addShape('circle', {\n                                                attrs: {\n                                                    x: point.x,\n                                                    y: point.y,\n                                                    r: 1.5,\n                                                    fill: cfg.color,\n                                                },\n                                            });\n                                        }\n\n                                        return group;\n                                    },\n                                });\n\n                                // const line = new Line('line', {\n                                //     data: this.state.pointData,\n                                //     xField: 'time',\n                                //     yField: 'speed',\n                                //     tooltip: { showMarkers: false },\n                                //     point: {\n                                //         shape: 'breath-point',\n                                //     },\n                                //\n                                // });\n                                // line.render();\n                            }.bind(this));\n                        }\n                    }\n\n\n                }\n                // transitions: {\n                //     getElevation: {\n                //         duration: 3000,\n                //         // type: 'spring',\n                //         // stiffness: 0.01,\n                //         // damping: 0.15,\n                //         // easing: d3.easeCubicInOut,\n                //         enter: d => {\n                //             // console.log(d);\n                //             let tmp = [];\n                //             for (let i = 0; i < 300; i++) {\n                //                 tmp.push(d[0] * i / 300)\n                //             }\n                //             // console.log(tmp)\n                //             return tmp;\n                //         },\n                //     }\n                // },\n                // updateTriggers: {\n                //     getElevation: [this.state.pre_org,this.state.real_org],\n                // }\n            }),\n\n            // new ColumnLayer({\n            //     id: 'OutpointLayer',\n            //     data: this.state.arcData,\n            //     // data: this.state.match_data,\n            //     diskResolution: 12,\n            //     radius: 10,\n            //     extruded: true,\n            //     // extruded: false,\n            //     pickable: true,\n            //     stroked:true,\n            //     elevationScale: 3,\n            //     getLineWidth:0.5,\n            //     material:false,\n            //     getPosition: d => d.from.coordinates,\n            //     getFillColor: d => {\n            //         // console.log('d:',d);\n            //         return [0,100,255]\n            //     },\n            //     getLineColor: d=>{\n            //\n            //         return [0,0,0];\n            //     },\n            //     getElevation: d =>{\n            //         return 20\n            //     },\n            //\n            //\n            // }),\n\n\n\n            // new ColumnLayer({\n            //     id: 'InpointLayer',\n            //     data: this.state.arcData,\n            //     // data: this.state.match_data,\n            //     diskResolution: 12,\n            //     radius: 10,\n            //     // extruded: true,\n            //     extruded: true,\n            //     pickable: true,\n            //     stroked:true,\n            //     elevationScale: 3,\n            //     getLineWidth:0.5,\n            //     material:false,\n            //     getPosition: d => d.to.coordinates,\n            //     getFillColor: d => {\n            //         console.log(this.state.arcData.length);\n            //         // console.log('d:',d);\n            //         return [255,130,71]\n            //     },\n            //     getLineColor: d=>{\n            //\n            //         return [0,0,0];\n            //     },\n            //     getElevation: d =>{\n            //         return 20\n            //     },\n            //\n            // }),\n\n            // new ArcLayer({\n            //     id:\"query\",\n            //     data:this.state.arcData,\n            //     pickable: true,\n            //     getWidth: 2,\n            //     greatCircle:true,\n            //     getHeight:d=>0.1,\n            //     getSourcePosition: d => d.from.coordinates,\n            //     getTargetPosition: d => d.to.coordinates,\n            //\n            //     getSourceColor: d =>[151,255,255],\n            //     getTargetColor: d =>[255,130,71],\n            // })\n\n            // new EditableGeoJsonLayer({\n            //\n            // }),\n         // new SelectionLayer({\n         //     id: 'selection',\n         //     selectionType: 'rectangle',\n         //     onSelect:({pickingInfos})=> {\n         //         console.log(pickingInfos);\n         //     },\n         //     layerIds:['trips'],\n         //     getTentativeFillColor: () => [255, 0, 255, 100],\n         //     getTentativeLineColor: () => [0, 0, 255, 255],\n         //     getTentativeLineDashArray: () => [0, 0],\n         //     lineWidthMinPixels: 3\n         // }),\n\n         //    new EditableGeoJsonLayer({\n         //        id: 'editlayer',\n         //        data: this.state.data,\n         //        mode: this.state.mode,\n         //        selectedFeatureIndexes,\n         //        onEdit: ({ updatedData }) => {\n         //            this.setState({\n         //                data: updatedData,\n         //         });\n         //     }\n         // }),\n\n            // new IconLayer({\n            //     id:'blockIcon',\n            //     data:this.state.blockIcon,\n            //     iconAtlas:'./warning.png',\n            //     iconMapping:ICON_MAPPING,\n            //     getIcon: d => 'marker',\n            //     sizeScale: 15,\n            //     getPosition: d => d.coordinates,\n            //     getColor:[255,255,0],\n            //     getSize: d => 5,\n            //\n            // }),\n            // new TripsLayer({\n            //     id:'blockRoute',\n            //     data:this.state.blockRoute,\n            //     getPath:d=>d.path,\n            //     getTimestamps: d => d.timestamps,\n            //     // getColor: d => colorTable[d.color],\n            //     getColor:[0,140,255,255],\n            //     opacity: 0.3,\n            //     widthMinPixels: 5,\n            //     rounded: true,\n            //     trailLength:1200,\n            //     currentTime: this.state.time,\n            //     shadowEnabled: false,\n            //     pickable:true,\n            //     visible:this.state.block\n            // }),\n            //\n            // new TripsLayer({\n            //     id: 'trips',\n            //     //data: trips,\n            //     // data:[\n            //     //     {\n            //     //         \"vendor\": 1,\n            //     //         \"path\": [\n            //     //             [120.167057,30.185901],\n            //     //             [120.165752,30.185723],\n            //     //             [120.16581,30.188491],\n            //     //             [120.190417,30.198224],\n            //     //             [120.191971\t,30.204],\n            //     //             [120.189622\t,30.20767],\n            //     //             [120.182369\t,30.218973],\n            //     //             [120.180889\t,30.222601],\n            //     //             [120.200108\t,30.306856],\n            //     //             [120.23477\t,30.311914],\n            //     //             [120.246959\t,30.316748],\n            //     //             [120.309708\t,30.387518],\n            //     //             [120.312426\t,30.39154],\n            //     //             [120.309069\t,30.400897],\n            //     //             [120.302548\t,30.399632],],\n            //     //\n            //     //             \"timestamps\": [ 838, 867.979, 947.036, 962.913, 996.971, 1032.865, 1060.03, 1077.834, 1205.212, 1210.243, 1295.677, 1315.668, 1431.726, 1480.25, 1488.658]\n            //     //     }],\n            //     // data:getRoute,\n            //     data:this.state.Route,\n            //     // updateTriggers:{\n            //     //   data:Routes\n            //     // },\n            //     getPath: d => d.path,\n            //     getTimestamps: d => d.timestamps,\n            //     getColor: d => colorTable[d.color],\n            //     // getColor:[0,255,255,255],\n            //     opacity: 0.3,\n            //     widthMinPixels: 10,\n            //     rounded: true,\n            //     trailLength,\n            //     currentTime: this.state.time,\n            //     shadowEnabled: false,\n            //     pickable:true,\n            //     visible:this.state.showRoute,\n            //     // onHover:info=>{\n            //     //     console.log(info)\n            //     // }\n            // }),\n            // new PolygonLayer({\n            //     id: 'dep_polygon',\n            //     data:this.state.depPolygon,\n            //     pickable: true,\n            //     stroked: true,\n            //     filled: true,\n            //     wireframe: true,\n            //     lineWidthMinPixels: 1,\n            //     getPolygon: d => d.contour,\n            //     // getElevation: d => d.population / d.area / 10,\n            //     getFillColor: d => [255, 255, 0,50],\n            //     getLineColor: [80, 80, 80],\n            //     getLineWidth: 1,\n            //     onHover: info=>this.setState({\n            //         depObject: info.object,\n            //         depX: info.x,\n            //         depY: info.y\n            //     }),\n            //     visible:this.state.depV\n            //     // onHover: info=>{\n            //     //     console.log(info)\n            //     // }\n            //\n            // }),\n            //\n            // new PolygonLayer({\n            //     id:'des_polygon',\n            //     data:this.state.desPolygon,\n            //     pickable: true,\n            //     stroked: true,\n            //     filled: true,\n            //     wireframe: true,\n            //     lineWidthMinPixels: 1,\n            //     getPolygon: d => d.contour,\n            //     // getElevation: d => d.population / d.area / 10,\n            //     getFillColor: d => [255, 0, 0,50],\n            //     getLineColor: [80, 80, 80],\n            //     getLineWidth: 1,\n            //     onHover: info=>this.setState({\n            //         desObject: info.object,\n            //         desX: info.x,\n            //         desY: info.y\n            //     }),\n            //     visible:this.state.desV\n            // }),\n            //\n            // new ColumnLayer({\n            //     id: 'predict-origin-layer',\n            //     data: this._getPredictData(),\n            //     diskResolution: 12,\n            //     radius: 100,\n            //     extruded: true,\n            //     pickable: true,\n            //     elevationScale: 5000,\n            //     getPosition: d => d.centroid,\n            //     getFillColor: d => {\n            //         let k = (Math.log(d.value) / Math.log(4)).toFixed(0);\n            //         if (k <= 5) {\n            //             return colorRange[k]\n            //         } else {\n            //             return colorRange[5]\n            //         }\n            //     },\n            //     getLineColor: [0, 0, 0],\n            //     getElevation: d =>parseInt(d.value)/100,\n            //     transitions: {\n            //         getElevation: {\n            //             duration: 3000,\n            //             // type: 'spring',\n            //             // stiffness: 0.01,\n            //             // damping: 0.15,\n            //             // easing: d3.easeCubicInOut,\n            //             enter: d => {\n            //                 // console.log(d);\n            //                 let tmp = [];\n            //                 for (let i = 0; i < 300; i++) {\n            //                     tmp.push(d[0] * i / 300)\n            //                 }\n            //                 // console.log(tmp)\n            //                 return tmp;\n            //             },\n            //         }\n            //     },\n            //     updateTriggers: {\n            //         getElevation: [this.state.pre_org,this.state.real_org],\n            //     }\n            // }),\n            // new PolygonLayer({\n            //     id: 'buildings',\n            //     data: buildings,\n            //     extruded: true,\n            //     wireframe: false,\n            //     opacity: 0.5,\n            //     getPolygon: f => f.polygon,\n            //     getElevation: f => f.height,\n            //     getFillColor: theme.buildingColor,\n            //     material: theme.material\n            // })\n        ];\n\n        return layers;\n    }\n    _formatLabel(t) {\n        return `2017年${4+Math.floor(t/43200)}月${Math.floor((t-Math.floor((t/43200))*43200)/1440)}日${Math.floor((t%1440)/60)}时${Math.floor(t%60)}分`;\n    }\n\n    _Icon(props) {\n        // @ts-ignore\n        return <box-icon color=\"currentColor\" {...props} />;\n    }\n    // _getIncludePoints(){\n    //     //数据是什么样的？\n    //     this.state.features.\n    //\n    // }\n    //\n    Online(P1,P2,Q){\n        let tempy1 = (P1[1] - P2[1]) ;\n        let tempx1 = (P1[0] - P2[0]);\n        let tempy2 = (Q[1] - P1[1]) ;\n        let tempx2 = (Q[0] - P1[0]);\n        let xp = tempy1 * tempx2;\n        let yp = tempy2 * tempx1;\n        if(Math.abs(xp - yp) <= 1e-6)\n            return 1;\n        else\n            return 0;\n    }\n    _InPolygonScan(Q,Poly,n){\n        // debugger\n        // console.log('Q',Q);\n        // console.log('Poly',Poly);\n        let count=0;\n        let xinters=0;\n        let P1=Poly[0];\n        for(let i=1;i<=n;i++){\n            let P2=Poly[i%n];\n            // if(this.Online(P1,P2,Q)) return 1;\n            if(Q[1]>Math.min(P1[1],P2[1])&&Q[1]<=Math.max(P1[1],P2[1])){\n                if(Q[0]<=Math.max(P1[0],P2[0])){\n                    if(P1[1]!==P2[1]){\n                        xinters=(Q[1]-P1[1])*(P2[0]-P1[0])/(P2[1]-P1[1])+P1[0];\n                        if(P1[0]===P2[0]||Q[0]<=xinters) count++;//符合要求\n                    }\n                }\n            }\n            P1=P2;\n        }\n        if(count%2===0) return 0;\n        return 1;\n    }\n\n\n    render() {\n        const {\n            viewState,\n            // mapStyle = 'https://basemaps.cartocdn.com/gl/dark-matter-nolabels-gl-style/style.json',\n            mapStyle ='mapbox://styles/mapbox/light-v10',\n            // mapStyle ='mapbox://styles/mapbox/dark-v10',\n            theme = DEFAULT_THEME,\n        } = this.props;\n        const layer = new EditableGeoJsonLayer({\n            // id: \"geojson-layer\",\n            id: 'editlayer',\n            data: this.state.features,\n            //数据格式\n            // [\n            // {},\n            // {}\n            //]\n            mode: this.state.mode,\n            selectedFeatureIndexes: this.state.selectedFeatureIndexes, //selectedFeaturesIndexes 地图上说有画的东西\n            getFillColor: (feature,isSelected)=>{\n                // console.log('feature',feature);\n                console.log('features',this.state.features.features);\n                // const index =this.state.features.features.indexOf(feature);\n                // console.log('index',index);\n                // console.log('properties',this.state.features.features[index]);\n                let data=[];\n                if(feature.properties[\"fill\"] === \"FFFFFF\"){\n                    data=this._getDeckColorForFeature(feature.properties[\"fill\"],1,0.5)\n                }\n                else data=this._getDeckColorForFeature(feature.properties[\"fill\"],1,0.5)\n                console.log(data);\n                return data;\n            },\n            getLineColor: (feature,isSelected)=>{\n                // console.log('feature',feature);\n                // console.log('features',this.state.features.features);\n                // const index =this.state.features.features.indexOf(feature);\n                // console.log('index',index);\n                // console.log('properties',this.state.features.features[index]);\n                let data=this._getDeckColorForFeature(feature.properties[\"stroke\"],1,1)\n                console.log(data);\n                return data;\n            },\n            onEdit: ({ updatedData, editType, editContext }) => {\n\n                let Poly=[];\n                let inPoints=[];\n                // console.log('onEdit', editType, editContext, updatedData);\n                let updatedSelectedFeatureIndexes = this.state.selectedFeatureIndexes;\n\n                if (!['movePosition', 'extruding', 'rotating', 'translating', 'scaling'].includes(editType)) {\n                    // Don't log edits that happen as the pointer moves since they're really chatty\n                    // const updatedDataInfo = featuresToInfoString(updatedData);\n                    // eslint-disable-next-line\n                    // console.log('onEdit', editType, editContext, updatedData);\n                }\n\n                if (editType === 'removePosition') {\n                    // This is a simple example of custom handling of edits\n                    // reject the edit\n                    return;\n                }\n\n                if (editType === 'addFeature' ) {\n\n                    let {featureIndexes}  = editContext;\n                    console.log('features+',featureIndexes);\n\n                    if(this.state.ODTag === 0){\n                        updatedData.features[updatedData.features.length-1].properties[\"fill\"]=\"1ca9e6\";\n                        updatedData.features[updatedData.features.length-1].properties[\"stroke\"]= \"1ca9e6\";\n                    }\n                    else if(this.state.ODTag === 1){\n                        updatedData.features[updatedData.features.length-1].properties[\"fill\"]=\"f88c24\";\n                        updatedData.features[updatedData.features.length-1].properties[\"stroke\"]= \"ff9900\";\n                    }\n                    else if(this.state.ODTag === 2){\n                        updatedData.features[updatedData.features.length-1].properties[\"fill\"]=\"FF0000\";\n                        updatedData.features[updatedData.features.length-1].properties[\"stroke\"]= \"FF0000\";\n                    }\n                    else if(this.state.ODTag===3){\n                        updatedData.features[updatedData.features.length-1].properties[\"fill\"]=\"FFFFFF\";\n                        updatedData.features[updatedData.features.length-1].properties[\"stroke\"]= \"FF0000\";\n                    }\n                    console.log('updata',updatedData);\n                    // Add the new feature to the selection\n                    updatedSelectedFeatureIndexes = [...this.state.selectedFeatureIndexes, ...featureIndexes];\n\n                    updatedData.features.forEach(d=>{\n                        Poly.push(d.geometry.coordinates[0]);\n                    });\n                    let newBeijingdata=[];\n                    // console.log('poly:',Poly);\n                    //\n                    // let mapInPoint={};//不知道为什么inPoint会每个都重复，所以去除重复\n                    //\n                    // //统计在圈内的请求数据，怎么把一段时间的数据全部加进来？,直接把加载数据的过程放在didmount里面\n                    // let inQueryPoints=[];\n                    //\n                    // let A2BPoints=[];\n                    // let B2APoints=[];\n                    // //对所有的poly计算在poly中的点\n                    // if(Poly.length){\n                    //     Poly.forEach(p=>{\n                    //         this.state.BeijingSpeedData.forEach(d=>{\n                    //             if(this._InPolygonScan(d['coordinates'],p,p.length)&& d.value &&!mapInPoint.hasOwnProperty(d['name'])){\n                    //                 inPoints.push(d['name']);\n                    //                 mapInPoint[d['name']]=1;\n                    //\n                    //                 // console.log('name:',d['name'],'value',d.value);\n                    //                 //尝试改变数据\n                    //                 // d['value']=50;\n                    //             }\n                    //             newBeijingdata.push(d);\n                    //         });\n                    //\n                    //         //把当前所有的query 压入到多边形中。\n                    //         console.log('querySearchData:',this.state.querySearchData);\n                    //\n                    //         let timeMap={};\n                    //         this.state.querySearchData.forEach(d=>{\n                    //             if(timeMap.hasOwnProperty(d.time)){\n                    //                 timeMap[d.time]+=1;\n                    //             }\n                    //             else {\n                    //                 timeMap[d.time]=1;\n                    //             }\n                    //\n                    //             if(this._InPolygonScan(d.from.coordinates,p,p.length)){\n                    //                 inQueryPoints.push({tag:'from', coordinates:d.from.coordinates, time:d.time});\n                    //             }\n                    //             if(this._InPolygonScan(d.to.coordinates,p,p.length)){\n                    //                 inQueryPoints.push({tag:'to', coordinates:d.to.coordinates, time:d.time});\n                    //             }\n                    //         })\n                    //         console.log('timeMap',timeMap);\n                    //     });\n                    // }\n                    // // else if(Poly.length%2===0){\n                    // //         let newQuerData=[];\n                    // //\n                    // //         this.state.querySearchData.forEach(d=>{\n                    // //             // if(timeMap.hasOwnProperty(d.time)){\n                    // //             //     timeMap[d.time]+=1;\n                    // //             // }\n                    // //             // else {\n                    // //             //     timeMap[d.time]=1;\n                    // //             // }\n                    // //             for(let i=0;i<Poly.length;i+=2){\n                    // //                 if(this._InPolygonScan(d.from.coordinates,Poly[i+0],Poly[i+0].length) && this._InPolygonScan(d.to.coordinates,Poly[i+1],Poly[i+1].length)){\n                    // //                     A2BPoints.push({tag:'A2B', from:d.from.coordinates,to:d.to.coordinates,time:d.time});\n                    // //                     newQuerData.push({tag:'A2B', from:{coordinates:d.from.coordinates},to:{coordinates:d.to.coordinates},time:d.time})\n                    // //                 }\n                    // //                 if(this._InPolygonScan(d.from.coordinates,Poly[i+1],Poly[i+1].length) && this._InPolygonScan(d.to.coordinates,Poly[i],Poly[i].length)){\n                    // //                     B2APoints.push({tag:'B2A', from:d.from.coordinates,to:d.to.coordinates,time:d.time});\n                    // //                     newQuerData.push({tag:'B2A', from:{coordinates:d.from.coordinates},to:{coordinates:d.to.coordinates},time:d.time})\n                    // //                 }\n                    // //             }\n                    // //\n                    // //         });\n                    // //         this.setState({\n                    // //             arcData:newQuerData\n                    // //         })\n                    // //     let A2B={};\n                    // //     A2BPoints.forEach(d=>{\n                    // //         if(A2B.hasOwnProperty(d.time)){\n                    // //             A2B[d.time]+=1;\n                    // //         }\n                    // //         else A2B[d.time]=1;\n                    // //     });\n                    // //     let B2A={};\n                    // //     B2APoints.forEach(d=>{\n                    // //         if(B2A.hasOwnProperty(d.time)){\n                    // //             B2A[d.time]+=1;\n                    // //         }\n                    // //         else B2A[d.time]=1;\n                    // //     });\n                    // //     let A2BAreaData=[]\n                    // //     Object.keys(A2B).forEach(d=>{\n                    // //         A2BAreaData.push({tag:'A2B',value:A2B[d],time:d});\n                    // //     });\n                    // //\n                    // //     Object.keys(A2B).forEach(d=>{\n                    // //         A2BAreaData.push({tag:'B2A',value:B2A[d],time:d});\n                    // //     });\n                    // //\n                    // //     this.setState({\n                    // //         A2BAreaData:A2BAreaData\n                    // //     });\n                    // //\n                    // //     //\n                    // //     // const stackedColumnPlot = new Column('stackColumn', {\n                    // //     //     data:this.state.A2BAreaData,\n                    // //     //     isGroup: true,\n                    // //     //     xField: 'time',\n                    // //     //     yField: 'value',\n                    // //     //     seriesField: 'tag',\n                    // //     //     /** 设置颜色 */\n                    // //     //     color: ['#1ca9e6', '#f88c24'],\n                    // //     //     /** 设置间距 */\n                    // //     //     // marginRatio: 0.1,\n                    // //     //     label: {\n                    // //     //         // 可手动配置 label 数据标签位置\n                    // //     //         position: 'middle', // 'top', 'middle', 'bottom'\n                    // //     //         // 可配置附加的布局方法\n                    // //     //         layout: [\n                    // //     //             // 柱形图数据标签位置自动调整\n                    // //     //             { type: 'interval-adjust-position' },\n                    // //     //             // 数据标签防遮挡\n                    // //     //             { type: 'interval-hide-overlap' },\n                    // //     //             // 数据标签文颜色自动调整\n                    // //     //             { type: 'adjust-color' },\n                    // //     //         ],\n                    // //     //     },\n                    // //     // });\n                    // //     //\n                    // //     // stackedColumnPlot.render();\n                    // //\n                    // // }\n                    //\n                    //\n                    //\n                    //\n                    // console.log('inQuery:',inQueryPoints);\n                    //\n                    // //把出发和返回的数据统计起来\n                    // let fromQueryTimeCount={};\n                    // let toQueryTimeCount={};\n                    // inQueryPoints.forEach(d=>{\n                    //     if(d.tag==='from'){\n                    //         if(fromQueryTimeCount.hasOwnProperty(d.time)){\n                    //             fromQueryTimeCount[d.time]+=1;\n                    //         }\n                    //         else{\n                    //             fromQueryTimeCount[d.time]=1;\n                    //         }\n                    //     }\n                    //     else{\n                    //         if(toQueryTimeCount.hasOwnProperty(d.time)){\n                    //             toQueryTimeCount[d.time]+=1;\n                    //         }\n                    //         else{\n                    //             toQueryTimeCount[d.time]=1;\n                    //         }\n                    //     }\n                    //\n                    // });\n                    // let raidData=[];\n                    // Object.keys(fromQueryTimeCount).forEach(d=>{\n                    //     raidData.push({time:d, value:fromQueryTimeCount[d], tag:'from'});\n                    // });\n                    // Object.keys(toQueryTimeCount).forEach(d=>{\n                    //     raidData.push({time:d, value:toQueryTimeCount[d], tag:'to'});\n                    // });\n                    //\n                    // this.setState({\n                    //     raidData:raidData\n                    // });\n                    // console.log('raidData:',this.state.raidData);\n\n                    //雷达图\n                    // const radarPlot = new Radar('raid', {\n                    //     data:this.state.raidData,\n                    //     xField: 'time',\n                    //     yField: 'value',\n                    //     seriesField: 'tag',\n                    //     meta: {\n                    //         value: {\n                    //             alias: '数量'\n                    //         },\n                    //     },\n                    //     xAxis: {\n                    //         line: null,\n                    //         tickLine: null,\n                    //         grid: {\n                    //             line: {\n                    //                 style: {\n                    //                     lineDash: null,\n                    //                 },\n                    //             },\n                    //         },\n                    //     },\n                    //     // 开启面积\n                    //     area: {},\n                    //     // 开启辅助点\n                    //     point: {\n                    //         size: 2,\n                    //     },\n                    // });\n                    // radarPlot.render();\n\n\n\n\n                    //每个多边形内点的ID的数组\n                    // this.setState({\n                    //     BeijingSpeedData:newBeijingdata\n                    // });\n\n\n                    //查询所有多边形内点的速度,设置河流图\n                    // let streamData=[];\n                    // let PromiseG=[];\n                    //\n                    // let avarageTimeMap={};\n                    // let heatMapTimeMap={};\n                    // console.log('inPoints',inPoints);\n                    // inPoints.forEach(d=>{\n                    //         if(SpeedMap.hasOwnProperty(d)){//SpeedMap 里面有速度再取\n                    //             // console.log('data:',d);\n                    //             PromiseG.push(getPointSpeed(d));\n                    //         }\n                    //     });\n                    // Promise.all(PromiseG).then(values=>{\n                    //         let time=this.state.time;\n                    //         // console.log(\"point_speed\",point_speed);\n                    //     inPoints.map((d,index)=>{\n                    //         if(SpeedMap.hasOwnProperty(d)) {//SpeedMap 里面有速度再取\n                    //             for(let i=-time_interval;i<time_interval;i++){\n                    //                 if(time+i*15>=0 && time+i*15<87840 && i%4===0){\n                    //                     // console.log('speed:',Math.floor((time+i*15)/15));\n                    //                     if(avarageTimeMap.hasOwnProperty(_formatTime(Math.floor((time+i*15))))){\n                    //                         avarageTimeMap[_formatTime(Math.floor((time+i*15)))]+=point_speed[d][Math.floor((time+i*15)/15)]\n                    //                     }\n                    //                     else{\n                    //                         avarageTimeMap[_formatTime(Math.floor((time+i*15)))]=point_speed[d][Math.floor((time+i*15)/15)];\n                    //                     }\n                    //                     //河流图添加数据\n                    //                     streamData.push({'name':index+'.','speed':point_speed[d][Math.floor((time+i*15)/15)],'time':_formatTime(Math.floor((time+i*15)))})\n                    //                     //旭日图添加数据,不行这个太多了\n                    //                     // heatmap.push({\"Day\":Math.floor((time+i*15)/1440),'hour':Math.floor(Math.floor(((time+i*15)%1440)/60)),'value':point_speed[d][Math.floor((time+i*15)/15)]})\n                    //                     //\n                    //                 }\n                    //             }\n                    //\n                    //             // for(let i=-area_interval;i<area_interval;i++){\n                    //             //     if(time+i*15>=0 && time+i*15<87840){\n                    //             //         // console.log('speed:',Math.floor((time+i*15)/15));\n                    //             //         getQueryData(time){\n                    //             //\n                    //             //         }\n                    //             //     }\n                    //             // }\n                    //\n                    //\n                    //             for(let i=-heatmap_interval;i<heatmap_interval;i++){\n                    //                 if(time+i*15>=0 && time+i*15<87840 && i%4===0){\n                    //                     // console.log('speed:',Math.floor((time+i*15)/15));\n                    //                     if(heatMapTimeMap.hasOwnProperty(_formatDayTime(Math.floor((time+i*15))))){\n                    //                         heatMapTimeMap[_formatDayTime(Math.floor((time+i*15)))]+=point_speed[d][Math.floor((time+i*15)/15)];\n                    //                     }\n                    //                     else{\n                    //                         heatMapTimeMap[_formatDayTime(Math.floor((time+i*15)))]=point_speed[d][Math.floor((time+i*15)/15)];\n                    //                     }\n                    //                 }\n                    //             }\n                    //         }\n                    //         });\n                    //\n                    //     let avarageData=[];\n                    //     Object.keys(avarageTimeMap).forEach(k=>{\n                    //         avarageData.push({'time':k,'value':avarageTimeMap[k]/inPoints.length});\n                    //     });\n                    //     let heatmapData=[];\n                    //     Object.keys(heatMapTimeMap).forEach(k=>{\n                    //         // debugger\n                    //         let s=k.split(':');\n                    //         heatmapData.push({'Day':s[1],'hour':s[2],'value':heatMapTimeMap[k]/(inPoints.length)});\n                    //     });\n                    //\n                    //     this.setState({\n                    //         streamData:streamData,\n                    //         avarageData:avarageData\n                    //     });\n                    //     console.log('avarageData',this.state.avarageData);\n                    //\n                    //     // const stream=new Area('stream',{\n                    //     //     data:this.state.streamData,\n                    //     //     xField:'time',\n                    //     //     yField:'speed',\n                    //     //     seriesField:'name'\n                    //     // });\n                    //     // stream.render();\n                    //\n                    //     // const columnPlot = new Column('column', {\n                    //     //     data:this.state.avarageData,\n                    //     //     xField: 'time',\n                    //     //     yField: 'value',\n                    //     //     columnWidthRatio: 1,\n                    //     //     xAxis: {\n                    //     //         label: {\n                    //     //             autoHide: true,\n                    //     //             autoRotate: false,\n                    //     //             style: {\n                    //     //                 fill: 'black',\n                    //     //                 opacity: 1,\n                    //     //                 fontSize: 10\n                    //     //             },\n                    //     //         },\n                    //     //     },\n                    //     //     yAxis:{\n                    //     //         label:{\n                    //     //             style:{\n                    //     //                 fill: 'black',\n                    //     //                 opacity: 1,\n                    //     //                 fontSize: 20\n                    //     //             }\n                    //     //         },\n                    //     //         grid: {\n                    //     //             line: {\n                    //     //                 style: {\n                    //     //                     stroke: 'black',\n                    //     //                     lineWidth: 2,\n                    //     //                     lineDash: [4, 5],\n                    //     //                     strokeOpacity: 0.8,\n                    //     //                     shadowColor: 'black',\n                    //     //                     shadowBlur: 10,\n                    //     //                     shadowOffsetX: 5,\n                    //     //                     shadowOffsetY: 5,\n                    //     //                     cursor: 'pointer'\n                    //     //                 }\n                    //     //             }\n                    //     //         }\n                    //     //     },\n                    //     //     meta: {\n                    //     //         type: {\n                    //     //             alias: '类别',\n                    //     //         },\n                    //     //         sales: {\n                    //     //             alias: '均值',\n                    //     //         },\n                    //     //     },\n                    //     // });\n                    //\n                    //     this.setState({\n                    //         heatData:heatmapData\n                    //     });\n                    //     console.log('heatdata',this.state.heatData);\n                    //\n                    //\n                    //     //周期热力图\n                    //\n                    //     // const heatchart = new F2.Chart({\n                    //     //     id: 'heatchart',\n                    //     //     pixelRatio: window.devicePixelRatio\n                    //     // });\n                    //     // heatchart.source(this.state.heatData);\n                    //     // heatchart.coord('polar', {\n                    //     //     innerRadius: 0.2\n                    //     // });\n                    //     // heatchart.tooltip(false);\n                    //     // heatchart.axis('Day', {\n                    //     //     grid: null,\n                    //     //     line: null,\n                    //     //     tickLine: null,\n                    //     //     label: null\n                    //     // });\n                    //     // heatchart.axis('hour', {\n                    //     //     line: null,\n                    //     //     tickLine: null,\n                    //     //     grid: null,\n                    //     //     labelOffset: 3\n                    //     // });\n                    //     // // [1, 152, 189],\n                    //     // //     [73, 227, 206],\n                    //     // //     [216, 254, 181],\n                    //     // //     [254, 237, 177],\n                    //     // //     [254, 173, 84],\n                    //     // //     [209, 55, 78]\n                    //     // heatchart.polygon()\n                    //     //     .position('hour*Day')\n                    //     //     // .color('value', '#BAE7FF-#1890FF-#0050B3')\n                    //     //     // .color('value', '#0198BD-#49E3CE-#FEEDB1-#D1374E')\n                    //     //     .color('value', '#49E3CE-#FEEDB1-#D1374E')\n                    //     //     .style({\n                    //     //         stroke: '#fff',\n                    //     //         lineWidth: 1\n                    //     //     });\n                    //     //\n                    //     // this.state.heatData.forEach(function(val, idx) {\n                    //     //     if(idx%24===0){\n                    //     //         heatchart.guide().text({\n                    //     //             top: true,\n                    //     //             position: [ 0, idx/24 ],\n                    //     //             content: val['Day'],\n                    //     //             style: {\n                    //     //                 fill: '#000',\n                    //     //                 textAlign: 'center',\n                    //     //                 fontSize:5,\n                    //     //                 shadowBlur: 2,\n                    //     //                 shadowColor: 'rgba(0, 0, 0, .45)'\n                    //     //             }\n                    //     //         });\n                    //     //     }\n                    //     // });\n                    //     // heatchart.render();\n                    //\n                    //\n                    //     // columnPlot.render();\n                    //\n                    // });\n\n\n                    //画出neighbor的\n                    // let p3=getposmap();\n                    // p3.then(function () {\n                    //     // console.log('pos_map',pos_map\n                    //     //这个定义好像是要放到函数里面才行，因为定义了马上就执行的！！\n                    //     let p4=getneighbor();\n                    //     p4.then(function () {\n                    //         this.setState({\n                    //             neighbor_data:neighbordata\n                    //         })\n                    //     }.bind(this))\n                    // }.bind(this));\n                }\n                // console.log('Points',inPoints);\n                this.setState({\n                    inPoints:inPoints,\n                    features: updatedData,\n                    selectedFeatureIndexes: updatedSelectedFeatureIndexes,\n                });\n            }\n        });\n        const layers = this._renderLayers();\n        layers.push(layer);\n\n        return (\n            <Fragment>\n                <DeckGL\n                    layers={layers}\n                    effects={theme.effects}\n                    initialViewState={BEIJIN_VIEW_STATE}\n                    viewState={viewState}\n                    controller={{\n                        doubleClickZoom: false\n                    }}\n                    onViewStateChange={({viewState})=>{\n                        const viewport = new WebMercatorViewport(viewState);\n                        const nw = viewport.unproject([0, 0]);\n                        const se = viewport.unproject([viewport.width, viewport.height]);\n                        // console.log(\"north: \", nw[1], \", south: \", se[1]);\n                        // console.log(\"east: \", se[0], \"west: \", nw[0] );\n                        let bound=[[nw[0],se[0]],[se[1],nw[1]]];\n                        //判断在视野内\n                        // if(this.state.arcData.length>0){\n                        //     let tmpData=[];\n                        //     this.state.arcData.forEach(d=>{\n                        //         // debugger\n                        //         // console.log('arcData:',d);\n                        //         if( inbound(d.to.coordinates,bound)){\n                        //             // if(inbound(d.from.coordinates,bound)){\n                        //                 tmpData.push(d);\n                        //             // }\n                        //\n                        //         }\n                        //     });\n                        //     this.setState({\n                        //         arcData:tmpData\n                        //     })\n                        // }\n\n                    }}\n                    getCursor={layer.getCursor.bind(layer)}\n                >\n                    <StaticMap\n                        reuseMaps\n                        mapStyle={mapStyle}\n                        preventStyleDiffing={true}\n                        mapboxApiAccessToken={MAPBOX_TOKEN}\n                    >\n                    </StaticMap>\n                </DeckGL>\n                <button id = 'out'  style={{position:'absolute', zIndex: 2, top: '330px', right:'10px', backgroundColor: this.state.ODTag===0 ?  'rgb(0, 105, 217)':'rgb(90, 98, 94)'}} onClick={()=>{ this.setState({ODTag : 0})}}>\n                    {<this._Icon name={'arrow-to-left'} color='rgba(255,255,255,1)'/>}\n                </button>\n                <button id= 'in'  style={{position:'absolute', zIndex: 2, top: '365px', right:'10px',backgroundColor: this.state.ODTag===1 ?  'rgb(0, 105, 217)':'rgb(90, 98, 94)'}} onClick={()=>{ this.setState({ODTag: 1})}}>\n                    {<this._Icon name={'arrow-to-right'} color='rgba(255,255,255,1)'/>}\n                </button>\n                <button id = 'bridge'  style={{position:'absolute', zIndex: 2, top: '400px', right:'10px',backgroundColor: this.state.ODTag===2 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)'}} onClick={()=>{ this.setState({ODTag: 2})}}>\n                    {<this._Icon name={'trip'} color='rgba(255,255,255,1)'/>}\n                </button>\n                {/*<button id = 'clean'  style={{position:'absolute', zIndex: 2, top: '435px', right:'10px',backgroundColor: this.state.ODTag===3 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)'}} onClick={()=>{ this.setState({ODTag: 3})}}>*/}\n                {/*    {<this._Icon name={'trip'} color='rgba(255,255,255,1)'/>}*/}\n                {/*</button>*/}\n                {/*<button id = 'clean'  style={{color: 'white',padding: '50px 50px',fontsize:'16px',position:'absolute', zIndex: 2, top: '10px', left:'10px',backgroundColor: this.state.ToolTag===1 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)'}} onClick={()=>{ this.setState({ToolTag: 1})}}>*/}\n\n                {/*</button>*/}\n                {/*<button id = 'clean'  style={{color: 'white',padding: '15px 32px',fontsize:'16px',position:'absolute', zIndex: 2, top: '60px', left:'10px',backgroundColor: this.state.ToolTag===1 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)'}} onClick={()=>{ this.setState({ToolTag: 1})}}>*/}\n                {/*    {\"道路分析\"}*/}\n                {/*</button>*/}\n                {/*<button id = 'clean'  style={{color: 'white',padding: '15px 40px',fontsize:'16px',position:'absolute', zIndex: 2, top: '110px', left:'10px',backgroundColor: this.state.ToolTag===1 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)'}} onClick={()=>{ this.setState({ToolTag: 1})}}>*/}\n                {/*    {\"预测\"}*/}\n                {/*</button>*/}\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '10px', left:'10px',backgroundColor: this.state.moduleTag===1 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'70px',width:'100px'}} onClick={()=>{ this.setState({moduleTag: 1, moduleTag2: 0,moduleTag3: 0})}} >\n                    {'车流速度展示'}\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '80px', left:'10px',backgroundColor: this.state.moduleTag===2 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'70px',width:'100px'}} onClick={()=>{ this.setState({moduleTag: 2, moduleTag2: 0,moduleTag3: 0})}} >\n                    {'区域分析'}\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '150px', left:'10px',backgroundColor: this.state.moduleTag===3 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'70px',width:'100px'}} onClick={()=>{ this.setState({moduleTag: 3, moduleTag2: 0,moduleTag3: 0})}} >\n                    {'道路分析'}\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '220px', left:'10px',backgroundColor: this.state.moduleTag===4 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'70px',width:'100px'}} onClick={()=>{ this.setState({moduleTag: 4, moduleTag2: 0,moduleTag3: 0})}} >\n                    {'预测交互'}\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '10px', left:'110px',backgroundColor: this.state.moduleTag2===1 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'35px',width:'150px'}} onClick={()=>{ this.setState({moduleTag2: 1,moduleTag: 1,moduleTag3: 0})}} >\n                    {'散点图'}\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '45px', left:'110px',backgroundColor: this.state.moduleTag2===2 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'35px',width:'150px'}} onClick={()=>{ this.setState({moduleTag2: 2,moduleTag: 1,moduleTag3: 0})}} >\n                    {'柱状图'}\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '80px', left:'110px',backgroundColor: this.state.moduleTag2===3 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'35px',width:'75px'}} onClick={()=>{ this.setState({moduleTag2: 3, moduleTag: 2,moduleTag3: 0})}} >\n                    {'区域内分析'}\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '115px', left:'110px',backgroundColor: this.state.moduleTag2===4 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'35px',width:'75px'}} onClick={()=>{ this.setState({moduleTag2: 4,moduleTag: 2,moduleTag3: 0})}} >\n                    {'区域间分析'}\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '80px', left:'185px',backgroundColor: this.state.moduleTag3===1 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'75px'}} onClick={()=>{ this.setState({moduleTag3: 1,moduleTag2: 3, moduleTag: 2})}} >\n                    {'线性'}\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '97.5px', left:'185px',backgroundColor: this.state.moduleTag3===2 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'75px'}} onClick={()=>{ this.setState({moduleTag3: 2,moduleTag2: 3, moduleTag: 2})}} >\n                    {'周期'}\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '115px', left:'185px',backgroundColor: this.state.moduleTag3===3 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'75px'}} onClick={()=>{ this.setState({moduleTag3: 3,moduleTag2: 4,moduleTag: 2})}} >\n                    {'进出统计'}\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '132.5px', left:'185px',backgroundColor: this.state.moduleTag3===4 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'75px'}} onClick={()=>{ this.setState({moduleTag3: 4,moduleTag2: 4, moduleTag:2})}} >\n                    {'区域间对比'}\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '150px', left:'110px',backgroundColor: this.state.moduleTag2===5 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'35px',width:'150px'}} onClick={()=>{ this.setState({moduleTag2: 5,moduleTag:3,moduleTag3: 0})}} >\n                    {'道路点趋势'}\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '185px', left:'110px',backgroundColor: this.state.moduleTag2===6 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'35px',width:'150px'}} onClick={()=>{ this.setState({moduleTag2: 6,moduleTag: 3,moduleTag3: 0})}} >\n                    {'道路多点对比'}\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '220px', left:'110px',backgroundColor: this.state.moduleTag2===7 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'150px'}} onClick={()=>{ this.setState({moduleTag2: 7, moduleTag3: 0, moduleTag: 4})}} >\n                    {'请求数据展示'}\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '237.5px', left:'110px',backgroundColor: this.state.moduleTag2===8 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'100px'}} onClick={()=>{ this.setState({moduleTag2: 8, moduleTag3: 0, moduleTag: 4})}} >\n                    <div >{'请求数据筛选'}</div>\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '255px', left:'110px',backgroundColor: this.state.moduleTag2===9 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'100px'}} onClick={()=>{ this.setState({moduleTag2: 9, moduleTag3: 0, moduleTag: 4})}} >\n                    <div >{'请求数据生成'}</div>\n                </button>\n                <button id = 'showSpeed'  style={{ position:'absolute', zIndex: 2, top: '272.5px', left:'110px',backgroundColor: this.state.moduleTag2===10 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'17.5px',width:'100px'}} onClick={()=>{ this.setState({moduleTag2: 10, moduleTag3: 0, moduleTag: 4})}} >\n                    <div >{'影响值调整'}</div>\n                </button>\n                <button id = 'showSpeed'  style={{position:'absolute', zIndex: 2, top: '237.5px', left:'210px',backgroundColor: this.state.moduleTag3===5 ? 'rgb(0, 105, 217)':'rgb(90, 98, 94)',color:'rgba(255,255,255,1)',height:'52.5px',width:'50px'}} onClick={()=>{ this.setState({ moduleTag3: 5, moduleTag: 4})}} >\n                    {'提交'}\n                </button>\n                <Toolbox\n                    mode={this.state.mode}\n                    onSetMode={(setmode)=>{this.setState({mode:setmode()});\n                    }}\n                    modeConfig={this.state.modeConfig}\n                    onSetModeConfig={(setmodeconfig)=>{this.setState({modeConfig:setmodeconfig()})}}\n                    geoJson={this.state.features}\n                    onSetGeoJson={(setfeatures)=>{this.setState({features:setfeatures()})}}\n                    onImport={(setfeatures)=>{this.setState({features:setfeatures()})}}\n                />\n\n                {/*{this._renderDrawSelectBar()}*/}\n                { this._renderTooltipDep() }\n                {this._renderTooltipDes()}\n                <StyletronProvider value={engine}>\n                    <BaseProvider theme={LightTheme}>\n                        {/*<SliderTraffic*/}\n                        {/*    min={0}*/}\n                        {/*    max={86400}*/}\n                        {/*    value={[0,this.state.time]}*/}\n                        {/*    formatLabel={this._formatLabel}*/}\n                        {/*    onChange={({value}) => {*/}\n                        {/*        let nowTime=value[1];*/}\n\n                        {/*        if(blockData.has(nowTime)){*/}\n                        {/*            console.log('icon')*/}\n                        {/*            tmpIcon.push({*/}\n                        {/*                coordinates:blockData.get(nowTime)*/}\n                        {/*            })*/}\n                        {/*            let tmp=[];*/}\n                        {/*            tmpIcon.forEach(d=>{*/}\n                        {/*                tmp.push(d)*/}\n                        {/*            })*/}\n                        {/*            // if(tmpIcon.length>10){*/}\n                        {/*                console.log('set')*/}\n                        {/*                this.setState({*/}\n                        {/*                    blockIcon:tmp*/}\n                        {/*                })*/}\n                        {/*            // }*/}\n                        {/*            console.log(this.state.blockIcon)*/}\n                        {/*        }*/}\n\n                        {/*        // console.log('nowTime:',nowTime);*/}\n                        {/*        if(Math.floor(nowTime/3600)!==this.state.hour){*/}\n                        {/*            this.setState({hour:Math.floor(nowTime/3600)})*/}\n                        {/*            console.log('nowztime:',nowTime);*/}\n                        {/*            var hour=(nowTime/3600).toFixed(0);*/}\n                        {/*            console.log('hour:',hour);*/}\n                        {/*            this.setState({*/}\n                        {/*                pre_org:setPredictData(hour),*/}\n                        {/*                real_org:setRealData(hour)*/}\n                        {/*            });*/}\n                        {/*            // console.log('pre_org',this.state.pre_org);*/}\n\n                        {/*            var p=getRoute(hour);*/}\n                        {/*            p.then(function() {*/}\n                        {/*                console.log('Route',Routes)*/}\n                        {/*                this.setState({*/}\n                        {/*                    Route:Routes,*/}\n                        {/*                    depPolygon:depPolygon,*/}\n                        {/*                    desPolygon:desPolygon*/}\n                        {/*                })*/}\n                        {/*            }.bind(this))*/}\n                        {/*        }*/}\n                        {/*        this.setState({time: nowTime})*/}\n                        {/*        // console.log('time',this.state.time)*/}\n                        {/*        //console.log(this.state)*/}\n                        {/*        //console.log('value:',value)*/}\n                        {/*    }}*/}\n                        {/*/>*/}\n\n                        <SliderTraffic\n                            min={0}\n                            max={87840} //分钟\n                            value={[0,this.state.time]}\n                            formatLabel={this._formatLabel}\n                            onChange={({value}) => {\n                                let nowTime=value[1];\n                                // console.log('nowTime:',nowTime);\n                                if(Math.floor(nowTime/15)!==this.state.Quater){\n                                    this.setState({Quater:Math.floor(nowTime/15)}) //一天24小时\n                                    console.log('nowztime:',nowTime);\n                                    // var hour=((nowTime/60)%24).toFixed(0);\n                                    // console.log('hour:',hour);\n                                    // this.setState({\n                                    //     pre_org:setPredictData(hour),\n                                    //     real_org:setRealData(hour)\n                                    // });\n                                    // console.log('pre_org',this.state.pre_org);\n                                    // var p=getRoute(hour);\n                                    // p.then(function() {\n                                    //     console.log('Route',Routes)\n                                    //     this.setState({\n                                    //         Route:Routes,\n                                    //         depPolygon:depPolygon,\n                                    //         desPolygon:desPolygon\n                                    //     })\n                                    // }.bind(this))\n                                    let num=Math.floor(nowTime/15);\n\n                                    let p4=getBeijingSpeed(num);\n\n                                    p4.then(function(){\n                                        let p5=getPathlist();\n                                        p5.then(function(){\n                                            getNodeSpeedMap();\n                                            let p3=getBeiJingData();\n                                            p3.then(function(){\n                                                // console.log('beijing',Beijingdata);\n                                                this.setState({\n                                                    BeijingSpeedData:Beijingdata\n                                                })\n\n                                            }.bind(this))\n                                        }.bind(this))\n                                    }.bind(this));\n\n                                    //num 是除以15后的时间就是测速点\n                                    let p_getQuery=getQueryData(num);\n                                    p_getQuery.then(function (){\n                                        this.setState({\n                                            arcData:queryData\n                                        });\n                                        // 直接设置无法更新图层，不知道怎么才能比较好的更新，原数据置空会更新\n                                        // if(num%2===0){\n                                        //     console.log('clean');\n                                        //     this.setState({\n                                        //         arcData:[]\n                                        //     });\n                                        // }\n                                        console.log('arcData:',this.state.arcData)\n                                    }.bind(this))\n\n                                }\n                                this.setState({time: nowTime})\n                                // console.log('time',this.state.time)\n                                //console.log(this.state)\n                                //console.log('value:',value)\n                            }}\n                        />\n\n\n\n                {/*     <SelectContainer>*/}\n                {/*        <Select id={'area'}*/}\n                {/*        options={[*/}\n                {/*            {label:\"出发区域\",id:'dep_polygon'},*/}\n                {/*            {label:\"到达区域\",id:'des_polygon'},*/}\n                {/*            { label: \"隐藏\", id: \"\" },*/}\n\n                {/*        ]}*/}\n                {/*        value={this.state.area}*/}\n                {/*        placeholder=\"显示区域\"*/}\n                {/*        // onChange={params => setValue(params.value)}*/}\n                {/*        size={SIZE.mini}*/}\n                {/*        onChange={params=> {*/}\n                {/*            // console.log('params:',params);*/}\n                {/*            if(params.option!=null){*/}\n                {/*                if(params.option.id=='dep_polygon'){*/}\n                {/*                    console.log()*/}\n                {/*                    this.setState({*/}\n                {/*                        depPolygon:depPolygon,*/}\n                {/*                        depV:true,*/}\n                {/*                        desV:false,*/}\n                {/*                        area:[{label:\"出发区域\",id:'dep_polygon'}]*/}\n                {/*                    })*/}\n                {/*                }*/}\n                {/*                else if(params.option.id=='des_polygon'){*/}\n                {/*                    console.log('desPolygon',this.state.desPolygon)*/}\n                {/*                    this.setState({*/}\n                {/*                        desPolygon:desPolygon,*/}\n                {/*                        desV:true,*/}\n                {/*                        depV:false,*/}\n                {/*                        area:[{label:\"到达区域\",id:'des_polygon'}]*/}\n                {/*                    })*/}\n                {/*                }*/}\n                {/*                else{*/}\n                {/*                    this.setState({*/}\n                {/*                        desV:false,*/}\n                {/*                        depV:false,*/}\n                {/*                        area:[{ label: \"隐藏\", id: \"\" }]*/}\n                {/*                    })*/}\n                {/*                }*/}\n                {/*            }*/}\n                {/*            else{*/}\n                {/*                this.setState({*/}\n                {/*                    area:[],*/}\n                {/*                    desV:false,*/}\n                {/*                    depV:false,*/}\n                {/*                })*/}\n                {/*            }*/}\n\n                {/*        }}*/}\n                {/*    />*/}\n\n                {/*</SelectContainer>*/}\n                {/*        <SelectContainer2>*/}\n                {/*            <Select id={'option'}*/}\n                {/*                    options={[*/}\n                {/*                        {label:\"显示轨迹\",id:'route'},*/}\n                {/*                        {label:'预测流量',id:\"predict\"},*/}\n                {/*                        {label:\"实际流量\",id:'real'},*/}\n                {/*                        {label:'路障检测',id:'block'}*/}\n                {/*                    ]}*/}\n                {/*                    value={this.state.options}*/}\n                {/*                    placeholder={'选择服务'}*/}\n                {/*                    size={SIZE.mini}*/}\n                {/*                    onChange={ params=>{*/}\n                {/*                        if (params.option!==null){*/}\n                {/*                            if(params.option.id==='predict'){*/}\n                {/*                                this.setState({*/}\n                {/*                                    real:false,*/}\n                {/*                                    options:[{label:\"预测流量\",id:\"predict\"}],*/}\n                {/*                                    showPredict:true*/}\n                {/*                                })*/}\n                {/*                            }*/}\n                {/*                            else if(params.option.id==='real'){*/}\n                {/*                                this.setState({*/}\n                {/*                                    real:true,*/}\n                {/*                                    options:[{label:\"实际流量\",id:\"real\"}],*/}\n                {/*                                    showPredict:true*/}\n                {/*                                })*/}\n                {/*                            }*/}\n                {/*                            else if(params.option.id==='block'){*/}\n                {/*                                this.setState({*/}\n                {/*                                    block:true,*/}\n                {/*                                    options:[{label:\"路障检测\",id:\"block\"}],*/}\n                {/*                                    time:45466,*/}\n                {/*                                    showPredict:false,*/}\n                {/*                                    showRoute:false*/}\n                {/*                                })*/}\n\n                {/*                            }*/}\n                {/*                            else if(params.option.id==='route'){*/}\n                {/*                                this.setState({*/}\n                {/*                                    block:false,*/}\n                {/*                                    options:[{label:\"显示轨迹\",id:\"route\"}],*/}\n                {/*                                    showRoute:true,*/}\n\n                {/*                                })*/}\n                {/*                            }*/}\n                {/*                        }*/}\n                {/*                    }}*/}\n                {/*            />*/}\n                {/*        </SelectContainer2>*/}\n                    </BaseProvider>\n                </StyletronProvider>\n                <div id={'background'} style ={background}>\n                    <div id={'line'}/>\n                    <div id={'pie'}/>\n                <div id={'stream'}/>\n\n                <div id={'column'}/>\n                <canvas id=\"heatchart\" width=\"400\" height=\"260\"\n                />\n                <div id=\"raid\"/>\n                <div id={\"stackColumn\"}/>\n                </div>\n\n                <Panel/>\n            </Fragment>\n        );\n    }\n}\n\n\n\n\n/* {(<SliderInput\n                     value={[0,this.state.time]}\n                    min={0}\n                    max={24 * 60}\n                    formatLabel={this._formatLabel}\n                    onChange={({value}) => {\n                        if (value % 3600 === 0) {\n                            var p = getRoute(value / 3600);\n                            p.then(function () {\n                                this.setState({\n                                    Routes: Routes\n                                })\n                            }.bind(this))\n                        }\n                        this.setState({time: value});\n                        console.log(value)\n                    }}\n                />)\n                }*/\n\n\n// export function renderToDOM(container) {\n//     render(<App />, container);\n// }\n\n\n\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<CustomTicks />,document.getElementById('app'))\n\n// require('d3-request').csv(DATA_URL, (error, response) => {\n//         if (!error) {\n//             const data = response.map(row => ({\n//                 timestamp: new Date(`${row.DateTime} UTC`).getTime(),\n//                 latitude: Number(row.Latitude),\n//                 longitude: Number(row.Longitude),\n//                 depth: Number(row.Depth),\n//                 magnitude: Number(row.Magnitude)\n//             }));\n//             ReactDOM.render(<App2 data={data} />, document.getElementById('root'));\n//         }\n//     });\n"]},"metadata":{},"sourceType":"module"}