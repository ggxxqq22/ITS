"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RotateMode = void 0;

var _bbox = _interopRequireDefault(require("@turf/bbox"));

var _centroid = _interopRequireDefault(require("@turf/centroid"));

var _bearing = _interopRequireDefault(require("@turf/bearing"));

var _bboxPolygon = _interopRequireDefault(require("@turf/bbox-polygon"));

var _distance = _interopRequireDefault(require("@turf/distance"));

var _meta = require("@turf/meta");

var _invariant = require("@turf/invariant");

var _helpers = require("@turf/helpers");

var _transformRotate = _interopRequireDefault(require("@turf/transform-rotate"));

var _polygonToLine = _interopRequireDefault(require("@turf/polygon-to-line"));

var _utils = require("../utils");

var _geojsonEditMode = require("./geojson-edit-mode");

var _immutableFeatureCollection = require("./immutable-feature-collection");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var RotateMode = /*#__PURE__*/function (_GeoJsonEditMode) {
  _inherits(RotateMode, _GeoJsonEditMode);

  var _super = _createSuper(RotateMode);

  function RotateMode() {
    var _this;

    _classCallCheck(this, RotateMode);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "_selectedEditHandle", void 0);

    _defineProperty(_assertThisInitialized(_this), "_geometryBeingRotated", void 0);

    _defineProperty(_assertThisInitialized(_this), "_isRotating", false);

    _defineProperty(_assertThisInitialized(_this), "_isSinglePointGeometrySelected", function (geometry) {
      var _ref = geometry || {},
          features = _ref.features;

      if (Array.isArray(features) && features.length === 1) {
        // @ts-ignore
        var _getGeom = (0, _invariant.getGeom)(features[0]),
            type = _getGeom.type;

        return type === 'Point';
      }

      return false;
    });

    _defineProperty(_assertThisInitialized(_this), "getIsRotating", function () {
      return _this._isRotating;
    });

    return _this;
  }

  _createClass(RotateMode, [{
    key: "getGuides",
    value: function getGuides(props) {
      var selectedGeometry = this._geometryBeingRotated || this.getSelectedFeaturesAsFeatureCollection(props);

      if (this._isSinglePointGeometrySelected(selectedGeometry)) {
        return {
          type: 'FeatureCollection',
          features: []
        };
      }

      if (this._isRotating) {
        // Display rotate pivot
        return (0, _helpers.featureCollection)([(0, _centroid["default"])(selectedGeometry)]);
      }

      var boundingBox = (0, _bboxPolygon["default"])((0, _bbox["default"])(selectedGeometry));
      var previousCoord = null;
      var topEdgeMidpointCoords = null;
      var longestEdgeLength = 0;
      (0, _meta.coordEach)(boundingBox, function (coord) {
        if (previousCoord) {
          // @ts-ignore
          var edgeMidpoint = (0, _geojsonEditMode.getIntermediatePosition)(coord, previousCoord);

          if (!topEdgeMidpointCoords || edgeMidpoint[1] > topEdgeMidpointCoords[1]) {
            // Get the top edge midpoint of the enveloping box
            topEdgeMidpointCoords = edgeMidpoint;
          } // Get the length of the longest edge of the enveloping box


          var edgeDistance = (0, _distance["default"])(coord, previousCoord);
          longestEdgeLength = Math.max(longestEdgeLength, edgeDistance);
        }

        previousCoord = coord;
      }); // Scale the length of the line between the rotate handler and the enveloping box
      // relative to the length of the longest edge of the enveloping box

      var rotateHandleCoords = topEdgeMidpointCoords && [topEdgeMidpointCoords[0], topEdgeMidpointCoords[1] + longestEdgeLength / 1000];
      var lineFromEnvelopeToRotateHandle = (0, _helpers.lineString)([topEdgeMidpointCoords, rotateHandleCoords]);
      var rotateHandle = (0, _helpers.point)(rotateHandleCoords, {
        guideType: 'editHandle',
        editHandleType: 'rotate'
      }); // @ts-ignore

      return (0, _helpers.featureCollection)([// @ts-ignore
      (0, _polygonToLine["default"])(boundingBox), // @ts-ignore
      rotateHandle, lineFromEnvelopeToRotateHandle]);
    }
  }, {
    key: "handleDragging",
    value: function handleDragging(event, props) {
      if (!this._isRotating) {
        return;
      }

      var rotateAction = this.getRotateAction(event.pointerDownMapCoords, event.mapCoords, 'rotating', props);

      if (rotateAction) {
        props.onEdit(rotateAction);
      }

      event.cancelPan();
    }
  }, {
    key: "handlePointerMove",
    value: function handlePointerMove(event, props) {
      if (!this._isRotating) {
        var selectedEditHandle = (0, _utils.getPickedEditHandle)(event.picks);
        this._selectedEditHandle = selectedEditHandle && selectedEditHandle.properties.editHandleType === 'rotate' ? selectedEditHandle : null;
      }

      this.updateCursor(props);
    }
  }, {
    key: "handleStartDragging",
    value: function handleStartDragging(event, props) {
      if (this._selectedEditHandle) {
        this._isRotating = true;
        this._geometryBeingRotated = this.getSelectedFeaturesAsFeatureCollection(props);
      }
    }
  }, {
    key: "handleStopDragging",
    value: function handleStopDragging(event, props) {
      if (this._isRotating) {
        // Rotate the geometry
        var rotateAction = this.getRotateAction(event.pointerDownMapCoords, event.mapCoords, 'rotated', props);

        if (rotateAction) {
          props.onEdit(rotateAction);
        }

        this._geometryBeingRotated = null;
        this._selectedEditHandle = null;
        this._isRotating = false;
      }
    }
  }, {
    key: "updateCursor",
    value: function updateCursor(props) {
      if (this._selectedEditHandle) {
        // TODO: look at doing SVG cursors to get a better "rotate" cursor
        props.onUpdateCursor('crosshair');
      } else {
        props.onUpdateCursor(null);
      }
    }
  }, {
    key: "getRotateAction",
    value: function getRotateAction(startDragPoint, currentPoint, editType, props) {
      if (!this._geometryBeingRotated) {
        return null;
      }

      var centroid = (0, _centroid["default"])(this._geometryBeingRotated);
      var angle = getRotationAngle(centroid, startDragPoint, currentPoint); // @ts-ignore

      var rotatedFeatures = (0, _transformRotate["default"])( // @ts-ignore
      this._geometryBeingRotated, angle, {
        pivot: centroid
      });
      var updatedData = new _immutableFeatureCollection.ImmutableFeatureCollection(props.data);
      var selectedIndexes = props.selectedIndexes;

      for (var i = 0; i < selectedIndexes.length; i++) {
        var selectedIndex = selectedIndexes[i];
        var movedFeature = rotatedFeatures.features[i];
        updatedData = updatedData.replaceGeometry(selectedIndex, movedFeature.geometry);
      }

      return {
        updatedData: updatedData.getObject(),
        editType: editType,
        editContext: {
          featureIndexes: selectedIndexes
        }
      };
    }
  }]);

  return RotateMode;
}(_geojsonEditMode.GeoJsonEditMode);

exports.RotateMode = RotateMode;

function getRotationAngle(centroid, startDragPoint, currentPoint) {
  var bearing1 = (0, _bearing["default"])(centroid, startDragPoint);
  var bearing2 = (0, _bearing["default"])(centroid, currentPoint);
  return bearing2 - bearing1;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,